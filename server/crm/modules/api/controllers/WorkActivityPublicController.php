<?php
	/**
	 * 裂变公众号 + 企业微信 +（企业+公众）
	 * @author sym
	 */

	namespace app\modules\api\controllers;

	use app\components\InvalidDataException;
	use app\components\InvalidParameterException;
	use app\models\Fans;
	use app\models\Material;
	use app\models\SubUser;
	use app\models\SubUserAuthority;
	use app\models\Tags;
	use app\models\Template;
	use app\models\UserCorpRelation;
	use app\models\WorkCorp;
	use app\models\WorkCorpAgent;
	use app\models\WorkDepartment;
	use app\models\WorkExternalContact;
	use app\models\WorkExternalContactFollowUser;
	use app\models\WorkPublicActivity;
	use app\models\WorkPublicActivityConfigCall;
	use app\models\WorkPublicActivityConfigLevel;
	use app\models\WorkPublicActivityFansUser;
	use app\models\WorkPublicActivityFansUserDetail;
	use app\models\WorkPublicActivityPosterConfig;
	use app\models\WorkPublicActivityPrizeUser;
	use app\models\WorkPublicActivityStatistic;
	use app\models\WorkTag;
	use app\models\WorkTagFollowUser;
	use app\models\WxAuthorize;
	use app\models\WxAuthorizeInfo;
	use app\modules\api\components\WorkBaseController;
	use app\queue\ActivityExportJob;
	use app\util\DateUtil;
	use app\util\SUtils;
	use app\util\WorkUtils;
	use app\util\WxPay\RedPacketPay;
	use callmez\wechat\sdk\Wechat;
	use moonland\phpexcel\Excel;
	use Yii;

	class WorkActivityPublicController extends WorkBaseController
	{

		public function beforeAction ($action)
		{
			return parent::beforeAction($action); // TODO: Change the autogenerated stub
		}

		/**
		 * 创建活动
		 * showdoc
		 * @catalog         数据接口/api/work-activity-public/activity-add
		 * @title           创建活动
		 * @description     创建活动
		 * @method   POST
		 * @url  http://{host_name}/modules/api/work-activity-public/activity-add
		 *
		 * @param activity_id 选填 string 活动id
		 * @param is_detail 选填 string 是否查看详情（编辑不带）
		 * @param corp_agent 必填 string 应用id
		 * @param corp_id 必填 string 企业的唯一ID
		 * @param uid 必填 string 主账户id
		 * @param type 必填 int 1公众号,2企业微信,3企业+公众）
		 * @param public_id 必填 string 1公众号id
		 * @param activity_name 必填 string 活动名称
		 * @param start_time 必填 string 活动开始时间
		 * @param end_time 必填 string 活动结束时间
		 * @param level_end 必填 array 阶段结束
		 * @param activity_rule 必填 string 活动规则
		 * @param describe 必填 string 活动回复
		 * @param poster_open 必填 int 1开启默认2不开窍
		 * @param poster_describe 必填 string 海报回复
		 * @param sex_type 必填 int 性别参与1男,2女,3未知,4不限制
		 * @param region_type 必填 int 1不限,2指定地区
		 * @param region 选填 array  region_type为2可选填
		 * @param not_attention 必填 int 1不扣除,2取关扣除人数，3取关删除扣除（企业），4删除（企业）
		 * @param label_id 必填 array 标签id
		 * @param number 必填 int 活动主力次数默认0不限制(单人)
		 * @param mutual 必填 int 是否允许互助1允许2不允许
		 * @param keyword 必填 string 关键词触发
		 * @param action_type 必填 int 领奖方式
		 * @param user_key 必填 array 员工客服id
		 * @param channel_user 选填 array 企业微信员工id,type!=1
		 * @param welcome 选填 string 欢迎语
		 * @param welcome_url 选填 string 企业图文
		 * @param welcome_title 选填 string 企业图片标题
		 * @param welcome_describe 选填 string 企业描述
		 * @param tickets_start 选填 string 兑奖开始时间
		 * @param tickets_end 选填 string 兑奖结束时间
		 * @param hfive_url 必填 srting 领取连接
		 * @param hfive_config 必填 srting 领取连接配置
		 * @param level 必填 array 阶段奖励
		 * @param level.is_open 必填 int 阶段是否开启
		 * @param level.type 必填 array 1事物,2红包
		 * @param level.prize_name 必填 srting 奖品名称
		 * @param level.level 必填 level 等级
		 * @param level.money_amount 必填 decimal 红包金额
		 * @param level.money_count 必填 int 红包数量
		 * @param level.number 必填 int 助力次数
		 * @param level.num 必填 int 奖品数量
		 * @param is_heard 必填 int 是否使用头像
		 * @param heard_width 必填 int 头像宽 高
		 * @param heard_type 必填 int 1正方形2圆形
		 * @param heard_top 必填 int 头像距离顶部
		 * @param heard_left 必填 int 头像距离左边
		 * @param heard_ratio 必填 int 头像比列1.5
		 * @param code_width 必填 int 二维码宽高
		 * @param code_top 必填 int 二维码距离顶部
		 * @param code_left 必填 int 二维码距离左边
		 * @param code_ratio 必填 int 二维码比列1.5
		 * @param is_font 必填 int 是否使用名称
		 * @param font_top 必填 int 字体距离顶部
		 * @param font_left 必填 int 字体距离左边
		 * @param font_size 必填 int 字体大小
		 * @param font_color 必填 int 字体颜色rgb255,0,0
		 * @param background_url 必填 char 背景图片地址
		 * @param reply 必填 array 回复内容
		 * @param reply.is_open 必填 int 是否开启
		 * @param reply.type 必填 int 1新成员加入提醒，2好友取关扣除人气提醒，3任务完成提醒，4任务完成推送图片，5重复参加提醒，6好友助力成功提醒，7好友重复助力提醒，8其他提醒，9免打扰任务提醒，10活动下线提醒，11活动完成后继续有新成员
		 * @param reply.is_template 必填 int 是否使用模板0不使用（文本）,1使用
		 * @param reply.template_id 选填 string 模板id
		 * @param reply.template_context 选填 string 模板内容
		 * @param reply.context 选填 string 模板内容
		 * @param reply.img_url 选填 string 推送图片
		 *
		 * @remark          Create by PhpStorm. User: sym. Date: 2020/8/17
		 */
		public function actionActivityAdd ()
		{
			if (\Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不正确");
			}
			$activityData['uid']     = \Yii::$app->request->post("uid");
			$activityData['sub_id']  = empty($this->subUser->sub_id) ? NULL : $this->subUser->sub_id;
			$activityData['corp_id'] = empty($this->corp->id) ? NULL : $this->corp->id;
			$Poster['create_time']   = $activityData['create_time'] = time();
			//活动配置
			$activityData['type']       = \Yii::$app->request->post("type");//1公众号 2 企业微信  3企业+公众）
			$activityData['corp_agent'] = \Yii::$app->request->post("corp_agent");//1公众号 2 企业微信  3企业+公众）
			if (empty($activityData['corp_agent'])) {
				$activityData['corp_agent'] = NULL;
			}
			$activityData['public_id']        = \Yii::$app->request->post("public_id");//1公众号id
			$activityData['activity_name']    = \Yii::$app->request->post("activity_name");//活动名称
			$activityData['start_time']       = strtotime(\Yii::$app->request->post("start_time"));//活动开始时间
			$activityData['end_time']         = strtotime(\Yii::$app->request->post("end_time"));//活动结束时间
			$activityData['level_end']        = \Yii::$app->request->post("level_end");//阶段结束
			$activityData['level_end']        = empty($activityData['level_end']) ? NULL : json_encode($activityData['level_end']);//阶段结束
			$activityData['activity_rule']    = \Yii::$app->request->post("activity_rule");//活动规则
			$activityData['describe']         = \Yii::$app->request->post("describe");//活动回复
			$activityData['poster_open']      = \Yii::$app->request->post("poster_open");//海报回复开启
			$activityData['poster_describe']  = \Yii::$app->request->post("poster_describe");//海报回复
			$activityData['sex_type']         = \Yii::$app->request->post("sex_type");//性别参与 1男，2女，3未知，4不限制
			$activityData['region_type']      = \Yii::$app->request->post("region_type");//1不限，2指定地区
			$activityData['region']           = \Yii::$app->request->post("region");//地区
			$activityData['region']           = empty($activityData['region']) ? NULL : json_encode($activityData['region'], 288);//地区
			$activityData['not_attention']    = \Yii::$app->request->post("not_attention");//1 取关扣除人数，2不扣除
			$activityData['label_id']         = \Yii::$app->request->post("label_id");//标签id array
			$activityData['label_id']         = empty($activityData['label_id']) ? NULL : json_encode($activityData['label_id']);//标签id array
			$activityData['number']           = \Yii::$app->request->post("number");//活动主力次数默认0不限制(单人)
			$activityData['keyword']          = \Yii::$app->request->post("keyword");//关键词触发
			$channelUser                      = \Yii::$app->request->post("channel_user");//企业微信员工id ,type !=1
			$activityData['welcome']          = \Yii::$app->request->post("welcome");//欢迎语
			$activityData['welcome_help']     = \Yii::$app->request->post("welcome_help");//欢迎语
			$activityData['mutual']           = \Yii::$app->request->post("mutual");//是否允许互助
			$activityData['flow']             = \Yii::$app->request->post("flow", 1);//是否允许互助
			$activityData['welcome_url']      = \Yii::$app->request->post("welcome_url");//欢迎语
			$activityData['welcome_title']    = \Yii::$app->request->post("welcome_title");//企业图片标题
			$activityData['welcome_describe'] = \Yii::$app->request->post("welcome_describe");//企业描述
			$activityData['success_tags']     = \Yii::$app->request->post("success_tags",[]);//完成后打上指定标签
			$activityData['success_tags']     = json_encode($activityData['success_tags']);
//			$activityData['tickets_start']    = strtotime(\Yii::$app->request->post("tickets_start"));//兑奖开始时间
//			$activityData['tickets_end']      = strtotime(\Yii::$app->request->post("tickets_end"));//兑奖结束时间
			//领奖配置
			$activityData['action_type']  = \Yii::$app->request->post("action_type");//领奖方式
			$user_key                     = \Yii::$app->request->post("user_key");//员工客服id array
			$activityData['hfive_url']    = \Yii::$app->request->post("hfive_url");//领取连接
			$activityData['hfive_config'] = \Yii::$app->request->post("hfive_config");//领取连接配置
			$activityData['hfive_config'] = empty($activityData['hfive_config']) ? NULL : json_encode($activityData['hfive_config']);//员工客服id array
			//阶段奖励 array
			$level = \Yii::$app->request->post("level");//阶段奖励 array
			//海报配置
			$Poster['is_heard']       = \Yii::$app->request->post("is_heard") ? 1 : 0;//1正方形2圆形
			$Poster['heard_height']   = $Poster['heard_width'] = \Yii::$app->request->post("heard_width");//1正方形2圆形
			$Poster['heard_type']     = \Yii::$app->request->post("heard_type");//1正方形2圆形
			$Poster['heard_top']      = \Yii::$app->request->post("heard_top", 0);//头像距离顶部
			$Poster['heard_left']     = \Yii::$app->request->post("heard_left", 0);//头像距离左边
			$Poster['heard_ratio']    = \Yii::$app->request->post("heard_ratio");//头像比列
			$Poster['code_height']    = $Poster['code_width'] = \Yii::$app->request->post("code_width");//二维码宽
			$Poster['code_top']       = \Yii::$app->request->post("code_top", 0);//二维码距离顶部
			$Poster['code_left']      = \Yii::$app->request->post("code_left", 0);//二维码距离左边
			$Poster['code_ratio']     = \Yii::$app->request->post("code_ratio");//二维码比列
			$Poster['is_font']        = \Yii::$app->request->post("is_font") ? 1 : 0;//是否使用名称
			$Poster['font_top']       = \Yii::$app->request->post("font_top", 0);//字体距离顶部
			$Poster['font_left']      = \Yii::$app->request->post("font_left", 0);//字体距离顶部
			$Poster['font_size']      = \Yii::$app->request->post("font_size");//字体大小
			$Poster['font_color']     = \Yii::$app->request->post("font_color");//字体颜色
			$Poster['background_url'] = \Yii::$app->request->post("background_url");//背景地址
			$activityId               = \Yii::$app->request->post("activity_id");//背景地址
			$is_detail                = \Yii::$app->request->post("is_detail");//背景地址
			if (!empty($activityId)) {
				$activity = WorkPublicActivity::findOne($activityId);
				if ($activity !== NULL && $activity->end_time < time()) {
					throw new InvalidDataException("活动结束无法更改");
				}
				if (!empty($is_detail)) {
					$activity                  = WorkPublicActivity::find()->where(["id" => $activityId])->one();
					$activity                  = $activity->toArray();
					$activity['corp_agent']    = (string) $activity['corp_agent'];
					$activity['sex_type']      = (string) $activity['sex_type'];
					$activity['region_type']   = (string) $activity['region_type'];
					$activity['not_attention'] = (string) $activity['not_attention'];
					$activity['action_type']   = (string) $activity['action_type'];
					$activity["channel_user"]  = json_decode($activity["channel_user"], true);
					if (!empty($activity["channel_user"]) && is_array($activity["channel_user"])) {
						foreach ($activity["channel_user"] as &$value) {
							if (!isset($value['scopedSlots'])) {
								$value['scopedSlots'] = ['title' => 'custom'];
							}
						}
					}
					$activity["success_tags"] = empty($activity["success_tags"]) ? [] : json_decode($activity["success_tags"], true);
					$activity["user_key"]     = json_decode($activity["user_key"], true);
					$activity["label_id"]     = json_decode($activity["label_id"], true);
					$activity["region"]       = json_decode($activity["region"], true);
					$poster                   = WorkPublicActivityPosterConfig::find()->where(["activity_id" => $activityId])->asArray()->one();
					$activity                 = array_merge($activity, $poster);
					$activity['level']    = WorkPublicActivityConfigLevel::find()->where(["activity_id" => $activityId])
						->select("id,activity_id,is_open,type,level,prize_name,money_count_old as money_count,money_amount,number,num_old as num")->asArray()->all();
					$replyData            = WorkPublicActivityConfigCall::find()->where(["activity_id" => $activityId])->all();
					Yii::error($replyData, 'current');
					$reply = [];
					foreach ($replyData as $repl) {
						$repl = $repl->toArray();
						if ($repl["is_template"]) {
							$repl["template_context"] = json_decode($repl["template_old"], true);
						}
						$repl["is_url"] = (integer) $repl['is_url'];

						$reply[] = $repl;
					}
					$activity['reply']        = $reply;
					$activity['region_type']  = (integer) $activity['region_type'];
					$corp                     = WorkCorp::findOne($activity["corp_id"]);
					$activity["level_end"]    = json_decode($activity["level_end"], true);
					$activity["hfive_config"] = json_decode($activity["hfive_config"], true);
					$activity["corp_id"]      = '';
					if (!empty($corp)) {
						$activity["corp_id"] = $corp->corpid;
					}
					if ($activity["start_time"] < time() && $activity["end_time"] > time()) {
						$activity["is_over"] = 5;
					}
					$activity['start_time']    = date("Y-m-d H:i", $activity['start_time']);
					$activity['end_time']      = date("Y-m-d H:i", $activity['end_time']);
					$activity['tickets_start'] = date("Y-m-d H:i", $activity['tickets_start']);
					$activity['tickets_end']   = date("Y-m-d H:i", $activity['tickets_end']);
					if ($activity["type"] != WorkPublicActivity::ACTIVITY_TYPE_TWO) {
						$public                = WxAuthorizeInfo::find()->where(["author_id" => $activity["public_id"]])->one();
						$activity["public_id"] = empty($public) ? '' : $public->user_name;
					}

					Yii::error($activity);

					return $activity;
				}
			}
			if (!$Poster['heard_type'] || !$Poster['heard_ratio'] || !$Poster['code_ratio'] || !$Poster['font_size'] || !$Poster['font_color'] || !$Poster['background_url']) {
				throw new InvalidDataException("海报参数不完整");
			}
			if ($activityData["type"] != WorkPublicActivity::ACTIVITY_TYPE_TWO) {
				$wxInfo = WxAuthorizeInfo::find()->where(["user_name" => $activityData['public_id']])->asArray()->one();
				if (empty($wxInfo)) {
					throw new InvalidDataException("公众号不存在");
				}
				$activityData['public_id'] = $wxInfo["author_id"];
			} else {
				$activityData['public_id'] = 0;
			}
			$keyword           = WorkPublicActivity::find()->where(["keyword" => $activityData['keyword'], "public_id" => $activityData["public_id"], "corp_id" => $activityData["corp_id"], "is_over" => 1])->andWhere("end_time > UNIX_TIMESTAMP() and type !=2 ")->asArray()->all();
			$activityNameCount = WorkPublicActivity::find()->where(["activity_name" => $activityData['activity_name'], "corp_id" => $activityData['corp_id']])->andWhere("is_over !=0 and type !=2 ")->count();
			if ($activityNameCount > 0 && empty($activityId)) {
				throw new InvalidDataException("名称【" . $activityData['activity_name'] . "】已经存在");
			}
			if (!empty($keyword)) {
				foreach ($keyword as $item) {
					if ($activityData["start_time"] < $item["end_time"] && $activityId != $item["id"]) {
						throw new InvalidDataException("该关键词已经存在于其他未结束活动中");
					}
				}
			}
			//回复配置array
			$reply = \Yii::$app->request->post("reply"); //回复内容 array(reply_type,is_open,is_template,template_id,template_context,context,img_url)
			if (!empty($activityData['corp_id'])) {
				$workApi = WorkUtils::getWorkApi($activityData['corp_id'], WorkUtils::EXTERNAL_API);
			}
			if ($activityData["type"] != 2) {
				$time = $activityData["end_time"] - $activityData["start_time"];
				$time = $time / 86400;
				if (intval($time) >= 30) {
					throw new InvalidDataException("有关于公众号活动，最好不可以超过30天");
				}
			}
			$Transaction = \Yii::$app->mdb->beginTransaction();
			try {
				if (!empty($activityId)) {
					$Activity = WorkPublicActivity::find()->where(["id" => $activityId])->one();
				} else {
					$Activity = new WorkPublicActivity();
				}
				$action_type = array_column($level, "type");
				if ($activityData["action_type"] == WorkPublicActivity::ACTION_TYPE_ONE) {
					if (in_array(WorkPublicActivityConfigLevel::THINK_TYPE, $action_type)) {
						$activityData["action_type"] = WorkPublicActivity::ACTION_TYPE_ONE;
					} else {
						$activityData["action_type"] = WorkPublicActivity::ACTION_TYPE_TWO;
					}
				}
				$Activity->setAttributes($activityData);
				if (!$Activity->validate() || !$Activity->save()) {
					throw new InvalidDataException(SUtils::modelError($Activity));
				}
				if ($activityData['type'] != WorkPublicActivity::ACTIVITY_TYPE_ONE) {
					$tmpUserKey     = empty($user_key) ? NULL : json_encode($user_key, 258);
					$tmpChannelUser = empty($channelUser) ? NULL : json_encode($channelUser, 258);
					if ((empty($activityId) || (!empty($activityId) && $tmpUserKey != $Activity->user_key)) && !empty($user_key)) {
						$Temp     = WorkDepartment::GiveUserIdsReturnDepartmentAndUserIds($user_key);
						$user_ids = WorkDepartment::GiveDepartmentReturnUserData($Activity->corp_id, $Temp["department"], $Temp["user"], 1, true, 0);
						if (empty($user_ids)) {
							throw new InvalidDataException("请选择成员");
						}
						$userInfo           = WorkPublicActivity::CheckCorpUser($workApi, $Activity->id, $user_ids, 0, 0, false, 1);
						$Activity->user_url = $userInfo["qr_code"];
						$Activity->user_key = $tmpUserKey;
					}
					if ((empty($activityId) || (!empty($activityId) && $tmpChannelUser != $Activity->channel_user)) && !empty($channelUser)) {
						$Temp     = WorkDepartment::GiveUserIdsReturnDepartmentAndUserIds($channelUser);
						$user_ids = WorkDepartment::GiveDepartmentReturnUserData($Activity->corp_id, $Temp["department"], $Temp["user"], 1, true, 0);
						if (empty($user_ids)) {
							throw new InvalidDataException("请选择成员");
						}
						if (!empty($user_ids)) {
							$Activity->channel_user_id = implode(",", $user_ids);
						}
						$wayInfo = WorkPublicActivity::CheckCorpUser($workApi, $Activity->id, $user_ids, 0, 0, false, 2);
						if ($activityData['type'] == 2) {
							$Activity->qc_url = $wayInfo["qr_code"];
						} else {
							//将渠道码生成到本地
							$file     = file_get_contents($wayInfo["qr_code"]);
							$fileName = "activity_qc_url_" . rand(1, 10000) . time() . ".jpg";//定义图片名
							$save_dir = \Yii::getAlias('@upload') . '/poster/' . date('Ymd') . '/';
							//创建保存目录
							if (!file_exists($save_dir) && !mkdir($save_dir, 0777, true)) {
								throw new InvalidDataException("文件创建失败，权限不足");
							}
							try {
								file_put_contents($save_dir . $fileName, $file);
								$Activity->qc_url = "/upload/poster/" . date('Ymd') . '/' . $fileName;

							} catch (\Exception $e) {
								$save_dir = \Yii::getAlias('@upload') . '/poster/' . date('Ymd', strtotime("+1 day")) . '/';
								//创建保存目录
								if (!file_exists($save_dir) && !mkdir($save_dir, 0777, true)) {
									throw new InvalidDataException("文件创建失败，权限不足");
								}
								file_put_contents($save_dir . $fileName, $file);
								$Activity->qc_url = "/upload/poster/" . date('Ymd', strtotime("+1 day")) . '/' . $fileName;
							}
						}
						$Activity->channel_user = $tmpChannelUser;

					}
					$Activity->save();
				}
				if ($activityData['type'] != WorkPublicActivity::ACTIVITY_TYPE_TWO && empty($Activity->code_url)) {
					//微信二维码（临时二维码）
					$wxAuthInfo  = WxAuthorize::findOne(['author_id' => $activityData["public_id"]]);
					$wxAuthorize = WxAuthorize::getTokenInfo($wxAuthInfo->authorizer_appid, false, true);
					if (empty($wxAuthorize)) {
						throw new InvalidDataException('获取token失败');
					}
					$wechat     = \Yii::createObject([
						'class'          => Wechat::className(),
						'appId'          => $wxAuthInfo->authorizer_appid,
						'appSecret'      => $wxAuthorize['config']->appSecret,
						'token'          => $wxAuthorize['config']->token,
						'componentAppId' => $wxAuthorize['config']->appid,
					]);
					$qrCodeData = ['expire_seconds' => 2592000, 'action_name' => 'QR_STR_SCENE', 'action_info' => ['scene' => ['scene_str' => "activity_" . $Activity->id . "_fansId_0_tier_0"]]];
					$result     = $wechat->createQrCode($qrCodeData);
					if (isset($result["errcode"]) && $result["errcode"] == "48001") {
						throw new InvalidParameterException('公众号未认证或未取得接口权限');
					}
					if (isset($result["errcode"])) {
						throw new InvalidParameterException('创建二维码失败');
					}
					$qrCodeUrl              = $wechat->getQrCodeUrl($result['ticket']);
					$imageData              = Material::getImage($qrCodeUrl, 'qrcode/' . $Activity->id . '/wx');
					$Activity->code_url     = $imageData["local_path"];
					$Activity->qr_scene_str = json_encode($qrCodeData);
					$Activity->save();
				}
				//保存回复信息
				foreach ($reply as &$repl) {
					$context = str_replace("\n", "", $repl["context"]);
					if ($repl["is_open"] == 1 && (empty($context) || (empty($repl['template_context']) && $repl['is_template'] == 1))) {
						throw new InvalidDataException("提醒内容不能为空");
					}
					if ($repl["is_template"] == 1 && !empty($repl['template_context'])) {
						$repl['template_old'] = json_encode($repl['template_context'], 288);
						$tempData             = [];
						foreach ($repl['template_context'] as $value) {
							$tmp                     = [];
							$tmp["value"]            = str_replace("\n", "", $value['value']);
							$tmp["color"]            = $value['color'];
							$tempData[$value['key']] = $tmp;
						}
						$repl['template_context'] = json_encode($tempData, 288);
					} else {
						$repl['template_context'] = '';
					}
					$repl['activity_id'] = $Activity->id;
					if (isset($repl["id"])) {
						$ConfigCall          = WorkPublicActivityConfigCall::find()->where(["id" => $repl["id"]])->one();
						$repl['update_time'] = time();
					} else {
						$ConfigCall          = new WorkPublicActivityConfigCall();
						$repl['create_time'] = time();
					}
					unset($repl["id"]);
					$ConfigCall->setAttributes($repl);
					if (!$ConfigCall->validate() || !$ConfigCall->save()) {
						throw new InvalidDataException(SUtils::modelError($ConfigCall));
					}
					$ConfigCall->save();
				}
				$Poster['activity_id'] = $Activity->id;
				//保存头像背景文字数据
				$PosterConfig = WorkPublicActivityPosterConfig::findOne(["activity_id" => $Activity->id]);
				if (empty($PosterConfig)) {
					$PosterConfig = new WorkPublicActivityPosterConfig();
				} else {
					$update = false;
					foreach ($Poster as $key => $item) {
						if ($item != $PosterConfig->$key) {
							$update = true;
						}
					}
					if ($update) {
						WorkPublicActivityFansUser::updateAll(["poster_path" => NULL], ["activity_id" => $Activity->id]);
					}
				}
				$PosterConfig->setAttributes($Poster);
				if (!$PosterConfig->validate() || !$PosterConfig->save()) {
					throw new InvalidDataException(SUtils::modelError($PosterConfig));
				}
				$PosterConfig->save();
				//保存阶段奖励
				foreach ($level as $key => &$item) {
					$item['activity_id']     = $Activity->id;
					$item["num_old"]         = $item["num"];
					$item["money_count_old"] = $item["money_count"];
					if (isset($item["id"])) {
						$ConfigLevel         = WorkPublicActivityConfigLevel::findOne($item["id"]);
						$repl['update_time'] = time();
						if ($item["type"] == 1) {
							$item["num"] = $ConfigLevel->num + ($item["num_old"] - $ConfigLevel->num_old);
						} else {
							$item["money_count"] = $ConfigLevel->money_count + ($item["money_count_old"] - $ConfigLevel->money_count_old);
						}
					} else {
						$ConfigLevel         = new WorkPublicActivityConfigLevel();
						$item['create_time'] = time();
					}
					if (isset($level[$key + 1]) && $item["number"] > $level[$key + 1]["number"]) {
						throw new InvalidDataException("阶段助力人数不合理");
					}
					$ConfigLevel->setAttributes($item);
					if (!$ConfigLevel->validate() || !$ConfigLevel->save()) {
						throw new InvalidDataException(SUtils::modelError($ConfigLevel));
					}
					$ConfigLevel->save();
				}
				$Transaction->commit();
			} catch (\Exception $e) {
				$Transaction->rollBack();

				return [
					'error'     => $e->getCode(),
					'error_msg' => $e->getMessage(),
				];
			}

			return [
				'error' => 0
			];
		}

		/**
		 * 查看当前模板或创建从模板库拉取模板到当前公众号模板列表中
		 * showdoc
		 * @catalog         数据接口/api/work-activity-public/activity-add-template
		 * @title           查看当前模板或创建从模板库拉取模板到当前公众号模板列表中
		 * @description     查看当前模板或创建从模板库拉取模板到当前公众号模板列表中
		 * @method   POST
		 * @url  http://{host_name}/modules/api/work-activity-public/activity-add-template
		 *
		 * @param wxNum 选填 string 微信原始id
		 *
		 * @return          {"error":0,"data":[{"template_id":"qltwAyNbernsmo008WNOSsfbMhI-92cxf4_HarofSh8","title":"成员加入提醒","primary_industry":"IT科技","deputy_industry":"互联网|电子商务","content":"{{first.DATA}}\n姓名：{{keyword1.DATA}}\n时间：{{keyword2.DATA}}\n{{remark.DATA}}","example":"您好，您的xx有新成员加入\r\n姓名：李永强\r\n时间：2015.10.1 8:00\r\n您可以到xx管理后台管理您的源网成员。"},{"template_id":"yfNUJ-rLxEdPsNucugMYdsje-Z8WujgtOsYdjMGPGEQ","title":"助力成功通知","primary_industry":"IT科技","deputy_industry":"互联网|电子商务","content":"{{first.DATA}}\n活动名称：{{keyword1.DATA}}\n当前助力人数：{{keyword2.DATA}}\n{{remark.DATA}}","example":"助力人数已达系统要求\r\n活动名称：同城挑战\r\n当前助力人数：20人\r\n请联系小编，兑换活动资格"},{"msg":"模板库已达到最大上限"}]}
		 *
		 * @return_param    data  array 模板列表
		 *
		 * @remark          Create by PhpStorm. User: sym. Date: 2020/9/14
		 */
		public function actionActivityAddTemplate ()
		{

			$author_id = Yii::$app->request->post("wxNum");
			$type      = Yii::$app->request->post("type");
			$wxInfo    = WxAuthorizeInfo::find()->where(["user_name" => $author_id])->asArray()->one();
			if (empty($wxInfo)) {
				throw new InvalidDataException("公众号id不存在");
			}
			$defaultIT   = [
				//IT
				[
					["shortId" => "OPENTM412340392", "title" => '助力成功通知'],//助力成功通知
					["shortId" => "OPENTM412465645", "title" => '助力失败通知'],//助力失败通知
					["shortId" => "OPENTM412340392", "title" => '助力成功通知'],//助力成功通知
				],
				//教育(模板id没有)
				[
					["shortId" => "OPENTM207685059", "title" => '成员加入提醒'],//成员加入提醒
					["shortId" => "OPENTM412340392", "title" => '助力成功通知'],//助力成功通知
					["shortId" => "OPENTM412465645", "title" => '助力失败通知'],//助力失败通知
				]
			];
			$wxAuthInfo  = WxAuthorize::findOne(['author_id' => $wxInfo["author_id"]]);
			$wxAuthorize = WxAuthorize::getTokenInfo($wxAuthInfo->authorizer_appid, false, true);
			if (empty($wxAuthorize)) {
				\Yii::error("获取token失败", "sym-wx-token");
			}
			$wechat      = \Yii::createObject([
				'class'                 => Wechat::className(),
				'appId'                 => $wxAuthInfo->authorizer_appid,
				'appSecret'             => $wxAuthorize['config']->appSecret,
				'token'                 => $wxAuthorize['config']->token,
				'componentAppId'        => $wxAuthorize['config']->appid,
				'_componentAccessToken' => $wxAuthorize['config']->component_access_token,
			]);
			$defaultInfo = ["IT科技|互联网|电子商务", "教育|培训"];
			$info        = explode("；", $wxInfo['industry']);
			$info        = array_shift($info);
			if (empty($info)) {
				throw new InvalidDataException("未设置所属行业");
			}
			$industryCondition = array_search($info, $defaultInfo);
			if ($industryCondition === false) {
				throw new InvalidDataException("公众号所在行业不在" . implode("；", $defaultInfo) . "中，如需使用,请自行到微信公众号后台添加响应模板");
			}
			$data        = [];
			$templateRes = $wechat->getTemplate();
			foreach ($templateRes as $templateRe) {
				foreach ($defaultIT[$industryCondition] as $key => &$item) {
					if ($templateRe['title'] == $item['title'] && !is_null($item['title'])) {
						if ($industryCondition == 0 && $key == 2) {
							$templateData = WorkPublicActivity::repeatTemplate($templateRe['content'], $templateRe['title'], $templateRe["template_id"], true, $type);
						} else {
							$templateData = WorkPublicActivity::repeatTemplate($templateRe['content'], $templateRe['title'], $templateRe["template_id"], false, $type);
						}

						$data[$key] = $templateData;
						unset($defaultIT[$industryCondition][$key]);
					}
				}

			}
			foreach ($defaultIT[$industryCondition] as $key => $value) {
				$shortTemplate = $wechat->addTemplate($value['shortId']);
				if ($shortTemplate["errcode"] == 48011) {
					$data[$key] = ["msg" => 2];
				}
				if (isset($shortTemplate["errcode"]) && $shortTemplate["errcode"] == 0) {
					$templateRes = $wechat->getTemplate();
					foreach ($templateRes as $templateRe) {
						if ($templateRe['template_id'] == $shortTemplate["template_id"]) {
							$tmp                    = new Template();
							$tmp->author_id         = $wxInfo["author_id"];
							$tmp->template_id_short = $value['shortId'];
							$tmp->template_id       = $shortTemplate["template_id"];
							$tmp->title             = $templateRe['title'];
							$tmp->primary_industry  = $templateRe['primary_industry'];
							$tmp->deputy_industry   = $templateRe['deputy_industry'];
							$tmp->content           = $templateRe['content'];
							$tmp->example           = $templateRe['example'];
							$tmp->create_time       = DateUtil::getCurrentTime();
							$tmp->save();
							$templateData = WorkPublicActivity::repeatTemplate($templateRe['content'], $templateRe['title'], $tmp->template_id, false, $type);
							$data[$key]   = $templateData;
						}
					}
					$data[$key] = ["msg" => $value["title"]];
				} else {
					$data[$key] = ["msg" => 1];
				}
			}

			return $data;

		}

		/**
		 * 任务宝结束活动
		 * showdoc
		 * @catalog         数据接口/api/work-activity-public/activity-stop
		 * @title           任务宝结束活动
		 * @description     任务宝结束活动
		 * @url  http://{host_name}/modules/api/work-activity-public/activity-stop
		 *
		 * @param activity_id 必填 int 活动id
		 *
		 * @remark          Create by PhpStorm. User: sym. Date: 2020-09-11 15:57
		 * @number          0
		 */
		public function actionActivityStop ()
		{
			if (Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不允许");
			}
			$activityId = Yii::$app->request->post("activity_id");
			$status     = Yii::$app->request->post("status");
			$activity   = WorkPublicActivity::findOne($activityId);
			if (empty($activity)) {
				throw new InvalidParameterException("活动不存在");
			}
			if ($activity->config_del == 0) {
				WorkPublicActivityFansUser::DelActivityConfig($activity);
			}
			if ($status == 0) {
				$activity->is_over = 0;
				$activity->save();

				return ["error" => 0, "msg" => "已删除活动"];
			}
			if ($activity->end_time < time() || $activity->is_over == 2) {
				throw new InvalidDataException("活动时间结束，无需结束");

			}
			if ($activity->is_over == 3) {
				throw new InvalidDataException("活动阶段结束，无需结束");
			}
			//强制结束
			$activity->is_over = 4;
			$activity->save();

			return ["error" => 0, "msg" => "设置完成，活动已结束"];

		}

		/**
		 * 获取公众号列表标签
		 *
		 */
		public function actionTagList ()
		{
			if (Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不允许");
			}
			$type      = \Yii::$app->request->post("type");
			$public_id = \Yii::$app->request->post("public_id");
			if ($type == 1) {
				$wxInfo = WxAuthorizeInfo::find()->where(["user_name" => $public_id])->asArray()->one();
				if (empty($wxInfo)) {
					throw new InvalidDataException("公众号不存在");
				}
				$result = Tags::find()->where(['author_id' => $wxInfo['author_id']])->select("tag_id as id,name")->asArray()->all();
			} else {
				$result = WorkTag::find()->where(['corp_id' => $this->corp->id, "is_del" => 0])->select("id,tagname as name")->asArray()->all();
			}

			return $result;
		}

		/**
		 * 创建活动
		 * showdoc
		 * @catalog         数据接口/api/work-activity-public/list
		 * @title           活动列表
		 * @description     活动列表
		 * @url  http://{host_name}/modules/api/work-activity-public/list
		 *
		 * @param start_time 必填 srting 活动开始时间
		 * @param end_time 必填 srting 活动结束时间
		 * @param type 必填 int 0所有1未结束2时间结束3阶段结束
		 * @param page 必填 int 类型
		 * @param page_size 必填 int 类型
		 *
		 * @return_param    error int 状态码
		 * @return_param    data  array
		 * @return_param    channel_user array 引流成员
		 * @return_param    is_over string 状态
		 * @return_param    type string 类型
		 * @return_param    code_url string 活动二维码图片
		 * @return_param    start_time string 开始时间
		 * @return_param    end_time string 结束时间
		 * @return_param    id int 活动id
		 * @return_param    activity_name int 活动名称
		 * @return_param    countFans int 总粉丝
		 * @return_param    newtFans int 新粉丝
		 * @return_param    newUser int 总好友
		 * @return_param    overUser int 流失好友
		 * @return_param    level array 阶段奖励
		 *
		 * @remark          Create by PhpStorm. User: sym. Date: 2020/8/20
		 */
		public function actionList ()
		{
			if (Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不允许");
			}
			$corp_id       = \Yii::$app->request->post("corp_id");
			$public_id     = \Yii::$app->request->post("public_id");
			$activity_name = \Yii::$app->request->post("activity_name");
			$startTime     = \Yii::$app->request->post("start_time");
			$endTime       = \Yii::$app->request->post("end_time");
			$status        = \Yii::$app->request->post("status");
			$page          = \Yii::$app->request->post("page", 1);
			$pageSize      = \Yii::$app->request->post("pageSize", 15);
			$page          = !empty($page) ? $page : 1;
			$pageSize      = !empty($pageSize) ? $pageSize : 15;
			$offset        = ($page - 1) * $pageSize;

			$activitys = WorkPublicActivity::find()->alias("a")
				->leftJoin("{{%work_corp}} as b", "a.corp_id = b.id")
				->leftJoin("{{%work_corp_agent}} as c", "a.corp_agent = c.id")
				->leftJoin("{{%work_suite_config}} as d", "c.suite_id = d.id")
				->where("is_over !=0");
			if (!empty($this->subUser->sub_id)) {
				$subUser = SubUser::findOne(["sub_id"=>$this->subUser->sub_id]);
				if(!empty($subUser)){
					$corpAll = UserCorpRelation::find()->where(["uid"=>$subUser->uid])->asArray()->all();
					$corpAll = array_column($corpAll,"corp_id");
				}

				$corp_ids      = [];
				$wx_ids        = [];
				$notWxIds        = [];
				$auth = SubUserAuthority::find()->where(["and", ["sub_user_id" => $this->subUser->sub_id], ["!=", "type", 3]])->asArray()->all();
				foreach ($auth as $record) {
					if (!empty($record["authority_ids"])) {
						if ($record["type"] == 1) {
							$wx_ids[] = $record["wx_id"];
						} else {
							if(!empty($corpAll) && in_array($record["wx_id"],$corpAll)){
								$corp_ids[] = $record["wx_id"];
							}
						}
					}else{
						if ($record["type"] == 1) {
							$notWxIds[] = $record["wx_id"];
						}
					}
				}
				if (!empty($corp_ids) && !empty($wx_ids)) {
					$wx_ids[] = 0;
					$activitys = $activitys->andWhere(["in", "a.public_id", $wx_ids]);
					$activitys = $activitys->andWhere(["in", "a.corp_id", $corp_ids]);
				}
				if (empty($corp_ids) && !empty($wx_ids)) {
					$activitys = $activitys->andWhere(["a.type"=> 1]);
					$activitys = $activitys->andWhere(["in", "a.public_id", $wx_ids]);
				}
				if (!empty($corp_ids) && empty($wx_ids)) {
					$activitys = $activitys->andWhere(["a.type"=> 2]);
					$activitys = $activitys->andWhere(["in", "a.corp_id", $corp_ids]);
				}
				if(!empty($notWxIds)){
					$notWxIds = implode(",",$notWxIds);
					$activitys = $activitys->andWhere("a.public_id not in ($notWxIds)");
				}
			}
			$activitys = $activitys->limit($pageSize)
				->offset($offset);
			if (!empty($corp_id)) {
				$corp          = WorkCorp::find()->where(["corpid" => $corp_id])->one();
				$delDataConfig = WorkPublicActivity::find()->where(["corp_id" => $this->corp->id, "is_over" => 2, "config_del" => 0])->andWhere("type != 1 and config_id is not null")->all();
				$workApi       = WorkUtils::getWorkApi($this->corp->id, WorkUtils::EXTERNAL_API);
				/** @var WorkPublicActivity $record * */
				foreach ($delDataConfig as $record) {
					WorkPublicActivityFansUser::DelActivityConfig($record);
				}
				$activitys = $activitys->andWhere("a.type != 1")->andWhere(["a.corp_id" => $corp->id]);
			}
			if (!empty($public_id)) {
				$wxInfo    = WxAuthorizeInfo::find()->where(["user_name" => $public_id])->one();
				$activitys = $activitys->andWhere("a.type != 2")->andWhere(["a.public_id" => $wxInfo->author_id]);
			}
			if (!empty($activity_name)) {
				$activitys = $activitys->andWhere("a.activity_name like '%$activity_name%'");
			}
			if (!empty($status)) {
				if ($status == 1) {
					$activitys = $activitys->andWhere(["a.is_over" => 1])->andWhere("a.start_time > UNIX_TIMESTAMP()");
				} elseif ($status == 2) {
					$activitys = $activitys->andWhere(["a.is_over" => 1])->andWhere("a.start_time < UNIX_TIMESTAMP()");
				} else {
					$activitys = $activitys->andWhere(["in", "a.is_over", [2, 3, 4]]);
				}
			}
			if (!empty($startTime) && !empty($endTime)) {
				$activitys = $activitys->andWhere("((a.`start_time` BETWEEN " . strtotime($startTime) . " AND " . (strtotime($endTime) + 86399) . ") OR (a.`end_time` BETWEEN " . strtotime($startTime) . " AND " . (strtotime($endTime) + 86399) . "))");
			}
//			var_dump($activitys->createCommand()->getRawSql());
			$count       = $activitys->count();
			$activitys   = $activitys->orderBy("a.id desc")->select("c.agent_type,d.suite_id,b.corpid,a.corp_agent,a.keyword,a.corp_id,a.channel_user,a.channel_user_id,a.is_over,a.type,a.code_url,a.start_time,a.end_time,a.id,a.activity_name,a.level_end")->asArray()->all();
			$web_url     = \Yii::$app->params['web_url'];
			$activityIds = array_column($activitys, "id");
			foreach ($activitys as &$activity) {
				if ($activity["type"] == 2) {
					$state  = WorkPublicActivity::STATE_NAME . '_' . $activity['id'] . '_0_0_0';
					$H5_URL = WorkPublicActivity::H5_URL;
					//活动结束预览页面
					if ($activity["start_time"] > time() && $activity["is_over"] == 1) {
						$H5_URL = WorkPublicActivity::H5_URL_P;
					}
					if ($activity["agent_type"] == WorkCorpAgent::AUTH_AGENT) {
						$h5Url = $web_url . $H5_URL . '?suite_id=' . $activity["suite_id"] . '&corp_id=' . $activity['corp_id'] . '&corpid=' . $activity["corpid"] . '&agent_id=' . $activity["corp_agent"] . '&assist=' . $state;
					} else {
						$h5Url = $web_url . $H5_URL . '?corp_id=' . $activity['corp_id'] . '&corpid=' . $activity['corpid'] . '&agent_id=' . $activity["corp_agent"] . '&assist=' . $state;
					}
					$activity["code_url"] = $h5Url;
				}
				if ($activity["end_time"] < time() && $activity["is_over"] == 1) {
					$activity["is_over"] = 2;
				}
				if ($activity["start_time"] < time() && $activity["end_time"] > time() && $activity["is_over"] == 1) {
					$activity["is_over"] = 5;
				}
				$activity["newUser"]   = 0;
				$activity["overUser"]  = 0;
				$activity["newtFans"]  = 0;
				$activity["countFans"] = 0;
				if ($activity["type"] == 2) {
					$activity["newtFans"] = '---';
				} else {
					//新增粉丝
					$activity["newtFans"] = Fans::find()->where(["activity_id" => $activity["id"]])->count();
				}
				if ($activity["type"] != 1) {
					//新增客户数
					$activity["newUser"] = WorkExternalContactFollowUser::find()->where(["activity_id" => $activity["id"]])->count();
					//流失好友
					$activity["overUser"] = WorkExternalContactFollowUser::find()->where(["activity_id" => $activity["id"]])->andWhere(["del_type" => 2])->count();
				}
				$activity["countFans"] = WorkPublicActivityFansUser::find()->where(["activity_id" => $activity["id"]])->count();
				if ($activity["type"] == 1) {
					$activity["type"]         = "公众号";
					$activity["channel_user"] = [];
				} elseif ($activity["type"] == 2) {
					$activity["type"]         = "企业微信";
					$activity["channel_user"] = json_decode($activity["channel_user"], true);
				} elseif ($activity["type"] == 3) {
					$activity["type"]         = "企业微信+公众号";
					$activity["channel_user"] = json_decode($activity["channel_user"], true);
				}
				foreach ($activity["channel_user"] as &$value) {
					if (!isset($value['scopedSlots'])) {
						$value['scopedSlots'] = ['title' => 'custom'];
					}
				}
				$activity["start_time"] = date("Y-m-d H:i", $activity["start_time"]);
				$activity["end_time"]   = date("Y-m-d H:i", $activity["end_time"]);
				$activity["level"]      = WorkPublicActivityConfigLevel::find()->where(["activity_id" => $activity['id']])->asArray()->all();
			}

			return [
				"count" => $count,
				"data"  => $activitys
			];
		}

		/**
		 * 参与人数
		 * showdoc
		 * @catalog         数据接口/api/work-activity-public/get-activity-detail
		 * @title           参与人数
		 * @description     参与人数
		 * @url  http://{host_name}/modules/api/work-activity-public/get-activity-detail
		 *
		 * @param nickname 选填 srting 名称
		 * @param success 选填 srting 完成状态0全部1已完成2未完成
		 * @param success_prize 选填 srting 发奖状态0全部1已完成2未完成
		 * @param is_form 选填 srting 发奖状态0全部1已填写2未填写
		 *
		 * @return          {"error":0,"data":{"count":"2","fansCount":2,"prizeThreeCount":0,"prizeTwoCount":0,"prizeOneCount":0,"threeCount":0,"twoCount":0,"oneCount":1,"levelCount":1,"prizeCount":0,"fans":[{"id":"452","nick_name":"小猪的智慧店铺","nickname":"清","headerimg":"https://thirdwx.qlogo.cn/mmopen/C0L6oyjgdTI6P0NdQYM1Krkr6dFInVJcOyucOVed5wZaCusulSUKviaRKH6Wvh0SRRiaZxicEbEGibMZftiaZ57TYMlYrb9Xq0pEl/132","subscribe":"1","activity_num":"1","fans_id":"103795","type":"3","prize":null,"user_id":null,"del_type":null,"fids":null,"fuser_id":null,"status":0,"oldCount":"1"},{"id":"453","nick_name":"小猪的智慧店铺","nickname":"金慧","headerimg":"https://thirdwx.qlogo.cn/mmopen/Q3auHgzwzM4BG3epvBYN7ic6DKXkCUoUHcGdeWCv6OBhgPicVU2icZQIDndjakpRTAGFMZq5GNyqhrdBEtmqiblxOAEK8Yn9NoMib3kq1tkm90TE/132","subscribe":"1","activity_num":"0","fans_id":"103802","type":"3","prize":null,"user_id":"169","del_type":"0","fids":"5796","fuser_id":"169","status":0,"oldCount":"0"}],"fansIds":["452","453"]}}
		 *
		 * @return_param    fansCount int 参与活动人数
		 * @return_param    prizeThreeCount int 奖品3阶段人数
		 * @return_param    prizeTwoCount int 奖品2阶段人数
		 * @return_param    prizeOneCount int 奖品1阶段人数
		 * @return_param    threeCount int 完成3阶段人数
		 * @return_param    twoCount int 完成2阶段人数
		 * @return_param    oneCount int 完成1阶段人数
		 * @return_param    levelCount int 完成阶段总人数
		 * @return_param    prizeCount int 奖品完成人数
		 * @return_param    fans array 参加活动人数
		 * @return_param    fans.nickname string 名称
		 * @return_param    fans.headerimg string 头像
		 * @return_param    fans.subscribe int 是否关注公众号
		 * @return_param    fans.nick_name string 公众号
		 * @return_param    fans.activity_num string 完成人数
		 * @return_param    fans.prize string 奖品id
		 * @return_param    fans.remark string 备注
		 * @return_param    fans.status int 奖品状态
		 * @return_param    fans.del_type int 0：未删除；1：成员删除外部联系人；2：外部联系人删除成员
		 * @return_param    fans.level int 奖品等级
		 * @return_param    fans.oldCount int 历史完成完成人数
		 * @return_param    Count int 总数
		 *
		 * @remark          Create by PhpStorm. User: sym. Date: 2020-09-11 15:57
		 * @number          0
		 */
		public function actionGetActivityDetail ()
		{
			if (Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不允许");
			}
			$activityId    = Yii::$app->request->post("activity_id");
			$page          = Yii::$app->request->post("page", 0);
			$pageSize      = Yii::$app->request->post("pageSize");
			$success       = Yii::$app->request->post("success");
			$success_prize = Yii::$app->request->post("success_prize");
			$status        = Yii::$app->request->post("status",0);
			$is_form       = Yii::$app->request->post("is_form");
			$is_all        = Yii::$app->request->post("is_all");
			$is_export     = Yii::$app->request->post("is_export");
			$tags          = Yii::$app->request->post("tags");
			$page          = !empty($page) ? $page : 1;
			$pageSize      = !empty($pageSize) ? $pageSize : 15;
			$offset        = ($page - 1) * $pageSize;
			$nickname      = Yii::$app->request->post("nickname");
			$activity      = WorkPublicActivity::findOne($activityId);
			$paging        = '';
			if (!$is_all) {
				$paging = " LIMIT $offset,$pageSize";
			}
			$trail = "
						GROUP BY
							a.id 
						ORDER BY
							a.activity_num DESC
						";
			if ($activity["type"] == 2) {
				$field            = " SELECT 
								a.id,
								a.tags,
								a.user_id,
								a.external_userid,
								a.activity_num,
								d.name as nickname,
								d.avatar as headerimg,
								a.fans_id,
								a.is_form,
								b.type,
								b.flow,
								b.channel_user_id,
								'---' as subscribe,
								'---' as nick_name,
								a.prize,
								e.remark,
								e.status,
								e.name,
								e.mobile,
								e.region,
								e.city,
								e.county,
								g.id as fid,
								g.del_type,
								j.`name` as user_name,
								e.detail";
				$sql              = "
						FROM
							{{%work_public_activity_fans_user}} AS a
							LEFT JOIN {{%work_public_activity}} AS b ON a.activity_id = b.id
							LEFT JOIN {{%work_external_contact}} AS d ON a.external_userid = d.id
							LEFT JOIN {{%work_public_activity_prize_user}} AS e ON a.prize = e.id
							LEFT JOIN {{%work_external_contact_follow_user}} as g on ( a.external_userid = g.external_userid and IF(a.user_id is null,FIND_IN_SET(g.user_id,b.channel_user_id),a.user_id = g.user_id))
							LEFT JOIN {{%work_user}} as j on a.user_id = j.id
							WHERE
							a.activity_id = $activityId ";
				if(!empty($status)){
					switch ((int)$status){
						case 3:$sql.=" and g.del_type = 0";break;
						case 4:$sql.=" and g.del_type != 0";break;
					}
				}
				if(!empty($tags)){
					$str = ' and (';
					foreach ($tags as $key => $tag) {
						if (!empty($tag)) {
							$str .= "FIND_IN_SET($tag,a.tags) or ";
						}
					}
					$str = trim($str," or ");
					$str .= ")";
					$sql .= $str;
				}
				$fansCount        = Yii::$app->db->createCommand(
					"select count(DISTINCT a.id) as num " . $sql
				)->queryOne();
				$row['fansCount'] = ($fansCount["num"] != NULL) ? $fansCount["num"] : 0;
				if (!empty($nickname)) {
					$sql .= " and d.name_convert like '%$nickname%'";
				}
				if ($success == 1) {
					$sql .= " and a.prize is not null";
				} else if ($success == 2) {
					$sql .= " and a.prize is null";
				}
				if ($success_prize == 1) {
					$sql .= " and e.status=1";
				} elseif ($success_prize == 2) {
					$sql .= " and e.status=0";
				}
				if ($is_form == 1) {
					$sql .= " and a.is_form=1";
				} elseif ($is_form == 2) {
					$sql .= " and  a.is_form is null";
				}
				$fans         = Yii::$app->db->createCommand(
					$field . $sql . $trail . $paging
				)->queryAll();
				$count        = Yii::$app->db->createCommand(
					"select count(DISTINCT a.id) as num " . $sql
				)->queryOne();
				$row['count'] = ($count["num"] != NULL) ? $count["num"] : 0;
			} else {
				$field            = " SELECT 
							a.id,
							a.tags,
							a.user_id,
							a.external_userid,
							d.nick_name,
							c.nickname,
							c.headerimg,
							c.subscribe,
							a.activity_num,
							a.fans_id,
							b.type,
							b.channel_user_id,
							b.flow,
							a.prize,
							a.is_form,
							a.user_id,
							f.remark,
							f.name,
							f.mobile,
							f.region,
							f.city,
							f.county,
							f.detail,
							g.id as fid,
							g.del_type,
							j.`name` as user_name,
							f.status";
				$sql              = "
						FROM
							{{%work_public_activity_fans_user}} AS a
							LEFT JOIN {{%work_public_activity}} AS b ON a.activity_id = b.id
							LEFT JOIN {{%fans}} AS c ON a.fans_id = c.id
							LEFT JOIN {{%wx_authorize_info}} AS d ON b.public_id = d.author_id
							LEFT JOIN {{%work_public_activity_prize_user}} AS f ON a.prize = f.id
							LEFT JOIN {{%work_external_contact_follow_user}} as g on ( a.external_userid = g.external_userid and IF(a.user_id is null,FIND_IN_SET(g.user_id,b.channel_user_id),a.user_id = g.user_id))
							LEFT JOIN {{%work_user}} as j on a.user_id = j.id
						WHERE
							a.activity_id = $activityId ";
				if(!empty($status)){
					switch ((int)$status){
						case 1:$sql.=" and c.subscribe = 1";break;
						case 2:$sql.=" and c.subscribe = 0";break;
						case 3:$sql.=" and g.del_type = 0";break;
						case 4:$sql.=" and g.del_type != 0";break;
					}
				}
				if(!empty($tags)){
					$str = ' and (';
					foreach ($tags as $key => $tag) {
						if (!empty($tag)) {
							$str .= "FIND_IN_SET($tag,a.tags) or ";
						}
					}
					$str = trim($str," or ");
					$str .= ")";
					$sql .= $str;
				}
				$fansCount        = Yii::$app->db->createCommand(
					"select count(DISTINCT a.id) as num " . $sql
				)->queryOne();
				$row['fansCount'] = ($fansCount["num"] != NULL) ? $fansCount["num"] : 0;
				if (!empty($nickname)) {
					$sql .= " and c.nickname like '%$nickname%'";
				}
				if ($success == 1) {
					$sql .= " and a.prize is not null";
				} elseif ($success == 2) {
					$sql .= " and a.prize is null";
				}
				if ($success_prize == 1) {
					$sql .= " and f.status=1";
				} elseif ($success_prize == 2) {
					$sql .= " and f.status=0";
				}
				if ($is_form == 1) {
					$sql .= " and a.is_form=1";
				} elseif ($is_form == 2) {
					$sql .= " and  a.is_form is null";
				}
				$fans         = Yii::$app->db->createCommand(
					$field . $sql . $trail . $paging
				)->queryAll();
				$count        = Yii::$app->db->createCommand(
					"select count(DISTINCT a.id) as num " . $sql
				)->queryOne();
				$row['count'] = ($count["num"] != NULL) ? $count["num"] : 0;
			}
			$php_time_start     = microtime(true);
			$row["action_type"] = $activity->action_type;
			$row["type"]        = $activity->type;
			$row['levelCount']  = 0;
			$row["oneCount"]    = $row['twoCount'] = $row['threeCount'] = $row["prizeOneCount"] = $row['prizeTwoCount'] = $row["prizeThreeCount"] = NULL;
			$levels             = WorkPublicActivityConfigLevel::find()->where(["activity_id" => $activityId, "is_open" => 1])->asArray()->all();
			$row["oneCount"]    = $row['twoCount'] = $row['threeCount'] = $row["prizeOneCount"] = $row['prizeTwoCount'] = $row["prizeThreeCount"] = 0;
			if ($activity->type != 1) {
				$externalTemp    = array_column($fans, "user_id", "external_userid");
				$external_userid = [];
				foreach ($externalTemp as $key => $item) {
					if (empty($item)) {
						array_push($external_userid, $key);
					}
				}
				$followUser     = WorkExternalContactFollowUser::find()->alias("a")
					->leftJoin("{{%work_user}} as b", "a.user_id = b.id")
					->where(["in", "a.external_userid", $external_userid])
					->andWhere(["in", "a.user_id", explode(",", $activity->channel_user_id)])
					->select("a.del_type ,b.name,a.external_userid")
					->asArray()
					->all();
				$followUserData = [];
				foreach ($followUser as $follow) {
					if (isset($followUserData[$follow["external_userid"]])) {
						if ($follow["del_type"] == 0) {
							$followUserData[$follow["external_userid"]] .= $follow["name"] . "（已添加）\r\n";
						} else {
							$followUserData[$follow["external_userid"]] .= $follow["name"] . "（已删除）\r\n";
						}
					} else {
						if (!empty($follow["name"])) {
							if ($follow["del_type"] == 0) {
								$followUserData[$follow["external_userid"]] = $follow["name"] . "（已添加）\r\n";
							} else {
								$followUserData[$follow["external_userid"]] = $follow["name"] . "（已删除）\r\n";
							}
						}
					}
				}
			}
			foreach ($fans as &$fan) {
				$fan["tags_name"] = [];
				if (!empty($fan["tags"])) {
					$tagsTemp = explode(",", $fan["tags"]);
					if ($fan["type"] == 2 || $fan["type"] == 3) {
						$tags            = WorkTag::find()
							->where(["corp_id" => $activity->corp_id])
							->andWhere(["in", "id", $tagsTemp])->select("tagname")->asArray()->all();
						$fan["tags_name"] = array_column($tags, "tagname");
					} else {
						$tags            = Tags::find()->where(["and", ["author_id" => $activity->public_id], ["in", "tag_id", $tagsTemp]])->select("name")->asArray()->all();
						$fan["tags_name"] = array_column($tags, "name");
					}
				}
				if ($fan['type'] == 2) {
					$fan['nickname'] = urldecode($fan["nickname"]);
				}
				$fan["address"] = $fan["region"] . '-' . $fan["city"] . '-' . $fan["county"] . '-' . $fan["detail"];
				foreach ($levels as $level) {
					if (!empty($fan["prize"])) {
						$fan["activity_num"] = $fan["activity_num"] . "人，还差0人达标";
					} else {
						$fan["activity_num"] = $fan["activity_num"] . "人，还差" . ($level["number"] - $fan["activity_num"]) . "人达标";
					}
				}
				if ($fan["type"] != 1 && !empty($fan["user_id"])) {
					if ($fan["del_type"] == 2) {
						$fan["user_name"] .= "（已删除）";
					} else {
						$fan["user_name"] .= "（已添加）";
					}
				}
				if (empty($fan["user_id"]) && $fan["type"] != 1) {
					if (isset($followUserData[$fan["external_userid"]])) {
						$fan["user_name"] = $followUserData[$fan["external_userid"]];
					} else {
						$fan["user_name"] = "--";
					}
				}
			}
			$row['prizeCount'] = WorkPublicActivityFansUser::find()->alias("a")
				->leftJoin("{{%work_public_activity_prize_user}} as b", "a.prize = b.id")
				->where(["a.activity_id" => $activityId, "b.status" => 1])->andWhere("a.prize is not null")->count();
			$row['levelCount'] = WorkPublicActivityFansUser::find()
				->where(["activity_id" => $activityId])
				->andWhere("prize is not null")->count();
			$row['fans']       = $fans;
			$row['fansIds']    = [];
			$fansPrize         = WorkPublicActivityFansUser::find()->alias("a")
				->leftJoin("{{%work_public_activity_prize_user}} as b", "a.prize = b.id")
				->where(["a.activity_id" => $activityId, "b.status" => 0])
				->select("a.id")->asArray()->all();
			$row["fansIds"]    = array_column($fansPrize, "id");
			if ($is_export == 1) {
				if (empty($fans)) {
					throw new InvalidParameterException('暂无数据，无法导出！');
				}
				$save_dir = \Yii::getAlias('@upload') . '/exportfile/' . date('Ymd') . '/';
				//创建保存目录
				if (!file_exists($save_dir) && !mkdir($save_dir, 0777, true)) {
					return ['error' => 1, 'msg' => '无法创建目录'];
				}
				foreach ($fans as &$fan) {
					if(!empty($fan["tags_name"])){
						$fan["tags_name"] = implode("/", $fan["tags_name"]);
					}else{
						$fan["tags_name"] = '';
					}
					if ($fan["is_form"]) {
						$fan["is_form"] = "已填写";
					} else {
						$fan["is_form"] = "未填写";
					}
					if (!empty($fan["prize"])) {
						$fan["prize"] = "已完成";
					} else {
						$fan["prize"] = "未完成";
					}
					if ($fan["subscribe"]) {
						$fan["subscribe"] = "已关注";
					} else {
						$fan["subscribe"] = "未关注";
					}
					if (is_null($fan["status"])) {
						$fan["status"] = "---";
					} else if ($fan["status"] == 1) {
						$fan["status"] = "已发放";
					} else {
						$fan["status"] = "未发放";
					}
				}
				$headers = [
					'nickname'     => '参与人',
					'subscribe'    => '关注状态',
					'user_name'    => '好友状态',
					'activity_num' => '当前人气',
					'nick_name'    => '所属公众号',
					'prize'        => '完成状况',
					'status'       => '发奖状况',
					'is_form'      => '是否填写表单',
					'tags_name'    => '标签',
				];
				if ($activity->action_type == 2) {
					unset($headers["is_form"]);
				}
				if ($activity->type == 1) {
					unset($headers["user_name"]);
				} elseif ($activity->type == 2) {
					unset($headers["subscribe"], $headers["nick_name"]);
				}

				\Yii::$app->work->push(new ActivityExportJob([
					'result'     => $fans,
					'headers'    => $headers,
					'uid'        => empty($this->user->uid) ? $this->subUser->sub_id : $this->user->uid,
					'corpId'     => $activity->corp_id,
					'remark'     => "裂变参与人",
					'STATE_NAME' => WorkPublicActivity::STATE_NAME,
				]));
				//结整时间
				$php_time_end = microtime(true);
				//相减得到运行时间
				$php_time = $php_time_end - $php_time_start;
				Yii::error($php_time, "sym-time-activity");

				return ['error' => 0];
//				$columns = array_keys($headers);
//
//				$fileName = "activity_detail" . '_' . date("YmdHis", time());
//				Excel::export([
//					'models'       => $fans,//数库
//					'fileName'     => $fileName,//文件名
//					'savePath'     => $save_dir,//下载保存的路径
//					'asAttachment' => true,//是否下载
//					'columns'      => $columns,//要导出的字段
//					'headers'      => $headers
//				]);
//				$url = \Yii::$app->params['site_url'] . str_replace(\Yii::getAlias('@upload'), '/upload', $save_dir) . $fileName . '.xlsx';
//
//				return [
//					'url' => $url,
//				];
			}

			return $row;
		}

		/**
		 * 参与人数
		 * showdoc
		 * @catalog         数据接口/api/work-activity-public/activity-trace
		 * @title           参与者明细
		 * @description     参与者明细
		 * @url  http://{host_name}/modules/api/work-activity-public/activity-trace
		 *
		 * @param fans_id 必填 srting 粉丝id
		 * @param activity_id 必填 srting 活动id
		 *
		 * @return_param    user array 参与活动人数列表
		 * @return_param    user.nickname string 姓名
		 * @return_param    user.headerimg string 头像
		 * @return_param    user.type int null成功1老客户参与，助力无效2因取关，助力无效3因取关+被客户删除/拉黑，助力无效4被客户删除/拉黑，助力无效
		 * @return_param    fansUsers array 层级明细
		 * @return_param    fansUsers.name string 级别
		 * @return_param    fansUsers.value string 值
		 * @return_param    fansUsers.proportion string 占比
		 *
		 * @remark          Create by PhpStorm. User: sym. Date: 2020-09-11 15:57
		 * @number          0
		 */
		public function actionActivityTrace ()
		{
			if (Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不允许");
			}
			$fansId         = Yii::$app->request->post("fans_id");
			$activityId     = Yii::$app->request->post("activity_id");
			$name           = Yii::$app->request->post("name");
			$page           = Yii::$app->request->post("page");
			$pageSize       = Yii::$app->request->post("pageSize");
			$fansUsers      = Yii::$app->db->createCommand("select level,parent_fans from {{%work_public_activity_tier}} where FIND_IN_SET($fansId,parent_fans)")->queryAll();
			$level["name"]  = "其他";
			$level["value"] = 0;
			$data           = [];
			$activity       = WorkPublicActivity::findOne($activityId);
			foreach ($fansUsers as $fansUser) {
				$tmpLevel = explode(",", $fansUser["level"]);
				$tmpFans  = explode(",", $fansUser["parent_fans"]);
				$key      = array_search($fansId, $tmpFans);
				if (count($tmpLevel) > $key) {
					array_push($data, $tmpLevel[$key]);
				}
			}
			$tmpData = $data = array_unique($data);
			sort($data);
			sort($tmpData);
			foreach ($fansUsers as $key => $fansUser) {
				$tmpLevel = explode(",", $fansUser["level"]);
				$tmpFans  = explode(",", $fansUser["parent_fans"]);
				$key      = array_search($fansId, $tmpFans);
				if (count($tmpLevel) > $key) {
					$aKey = array_search($tmpLevel[$key], $tmpData);
					if ($aKey > 14) {
						$level["value"] += 1;
					}
					if (!is_array($data[$aKey])) {
						$tmp               = [];
						$tmp["proportion"] = 1;
						$tmp["name"]       = "等级" . $data[$aKey];
						$data[$aKey]       = $tmp;
					} else {
						$data[$aKey]["proportion"] += 1;
					}
				}
			}
			$fansUserCount = array_sum(array_column($data, "proportion"));
			foreach ($data as &$datum) {
				$datum["value"] = round(($datum["proportion"] / ($fansUserCount != 0 ? $fansUserCount : 1)) * 100, 2);
			}
			$level["proportion"] = $level["value"];
			$level["value"]      = round(($level["value"] / ($fansUserCount != 0 ? $fansUserCount : 1)) * 100, 2);
			if ($level["value"] != 0) {
				array_push($data, $level);
			}
			$offset = ($page - 1) * $pageSize;
			if ($activity->type == 2) {
				$user = WorkPublicActivityFansUserDetail::find()->alias("a")
					->leftJoin("{{%work_user}} as d", "d.id = a.user_id")
					->leftJoin("{{%work_external_contact}} as c", "a.external_userid = c.id")
					->leftJoin("{{%work_external_contact_follow_user}} as f", "(f.user_id = a.user_id and f.external_userid = a.external_userid)")
					->select("d.name as work_user_name,a.user_id,f.del_type,a.create_time,a.type,a.fans_id,a.external_userid,c.name as nickname,c.avatar as headerimg");
			} else {
				$user = WorkPublicActivityFansUserDetail::find()->alias("a")
					->leftJoin("{{%fans}} as c", "a.fans_id = c.id")
					->leftJoin("{{%work_user}} as d", "d.id = a.user_id")
					->leftJoin("{{%work_external_contact_follow_user}} as f", "(f.user_id = a.user_id and f.external_userid = a.external_userid)")
					->select("a.user_id,c.subscribe_time as f_time,c.subscribe,f.del_type,d.name as work_user_name,a.create_time,a.type,a.fans_id,a.external_userid,c.nickname,c.headerimg");
			}
			$user = $user->where(["a.public_parent_id" => $fansId, "a.activity_id" => $activityId]);
			if (!empty($name)) {
				$user = $user->andWhere("c.nickname like '%$name%'");
			}
			$count = $user->count();
			$user  = $user->orderBy("a.create_time desc")->limit($pageSize)->offset($offset)->asArray()->all();
			foreach ($user as &$item) {
				if ($activity->type == WorkPublicActivity::ACTIVITY_TYPE_TWO) {
					$item["nickname"] = urldecode($item['nickname']);
				} else {
					if ($item["subscribe"] == Fans::USER_UNSUBSCRIBE) {
						$item["f_time"] = '---';
					} else {
						$item["f_time"] = date("Y-m-d H:i:s", $item["f_time"]);
					}
				}
				if (!empty($item["user_id"])) {
					if ($item["del_type"] == 0) {
						$item["work_user_name"] = $item["work_user_name"] . "(已添加)\r\n";
					} else {
						$item["work_user_name"] = $item["work_user_name"] . "(已删除)\r\n";
					}
				} else {
					$item["work_user_name"] = '未添加';
					/** @var WorkExternalContactFollowUser $followUser * */
					$followUser = WorkExternalContactFollowUser::find()->alias("a")
						->leftJoin("{{%work_user}} as b", "a.user_id = b.id")
						->where(["external_userid" => $item["external_userid"]])
						->andWhere(["in", "user_id", explode(",", $activity->channel_user_id)])
						->select("a.del_type ,b.name")
						->asArray()
						->all();
					if (empty($followUser) && $item["type"] != 1) {
						$item["work_user_name"] = "--";
					}
					if (!empty($followUser)) {
						$item["work_user_name"] = '';
						foreach ($followUser as $followUse) {
							if ($followUse["del_type"] == 0) {
								$item["work_user_name"] .= $followUse["name"] . "(已添加)\r\n";
							} else {
								$item["work_user_name"] .= $followUse["name"] . "(已删除)\r\n";
							}
						}
					}
				}
				$item["create_time"] = date("Y-m-d H:i:s", $item["create_time"]);
			}

			return ["user" => $user, "fansUsers" => $data, "count" => $count, "type" => $activity->type];
		}

		/**
		 * 活动奖品标签
		 * showdoc
		 * @catalog         数据接口/api/work-activity-public/activity-prize
		 * @title           活动奖品标签
		 * @description     活动奖品标签
		 * @url  http://{host_name}/modules/api/work-activity-public/activity-prize
		 *
		 * @param prize_id 必填 array 奖品id
		 * @param level 必填 array 奖品id
		 *
		 * @remark          Create by PhpStorm. User: sym. Date: 2020-09-11 15:57
		 * @number          0
		 */
		public function actionActivityPrize ()
		{
			if (Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不允许");
			}
			$prizeId     = Yii::$app->request->post("prize_id");
			$activity_id = Yii::$app->request->post("activity_id");
			$level       = Yii::$app->request->post("level");
			$activity    = WorkPublicActivity::findOne($activity_id);
			if (empty($activity)) {
				throw new InvalidDataException("活动不存在");
			}
			$userFans = WorkPublicActivityFansUser::find()->alias("a")
				->leftJoin("{{%work_public_activity_prize_user}} as b", "a.prize = b.id")
				->where(["in", "a.id", $prizeId])
				->andWhere("a.prize is not null")
				->andWhere(["b.level" => $level, "b.status" => 0])
				->select("b.status,b.type,b.id,b.order_sn,b.price,a.is_form")
				->asArray()->all();
			if (empty($userFans)) {
				throw new InvalidDataException("奖品记录不存在");
			}
			$appid = '';
			if ($activity->type != WorkPublicActivity::ACTIVITY_TYPE_TWO) {
				$wxinfo = WxAuthorize::findOne(["author_id" => $activity->public_id]);
				$appid  = $wxinfo->authorizer_appid;
			}
			$successNum = 0;
			$errorNum   = 0;
			$str        = "个标记失败";
			foreach ($userFans as $userFan) {
				if ($userFan["status"] == 0 && $userFan["type"] == 2) {
					$str  = "个红包补发失败";
					$fans = WorkPublicActivityFansUser::findOne(["prize" => $userFan["id"]]);
					if ($activity->type != 2) {
						$user = Fans::findOne($fans->fans_id);
					} else {
						$user = WorkExternalContact::findOne($fans->external_userid);
					}
					$sendData['partner_trade_no'] = $userFan["order_sn"];
					$sendData['openid']           = $user["openid"];
					$sendData['amount']           = $userFan["price"];
					$sendData['desc']             = '完成任务，由于特殊原因，红包发送失败，现补发' . ($userFan["price"] / 100) . '元红包';
					$redPacketPay                 = new RedPacketPay();
					$resData                      = $redPacketPay->RedPacketSend($activity->corp_id, $sendData, $appid);
					if ($resData['return_code'] == 'SUCCESS' && $resData['result_code'] == 'FAIL') {
						throw new InvalidDataException($resData["err_code_des"]);
					}
					if ($resData['return_code'] == 'SUCCESS' && $resData['result_code'] == 'SUCCESS') {
						WorkPublicActivityPrizeUser::updateAll(["status" => 1], ["id" => $userFan["id"]]);
						++$successNum;
						continue;
					} else {
						++$errorNum;
						continue;
					}
				}
				if ($activity->action_type == WorkPublicActivity::ACTION_TYPE_ONE && empty($userFan["is_form"])) {
					++$errorNum;
					$str = "个表单未填写发放失败";
					continue;
				}
				if ($activity->action_type == WorkPublicActivity::ACTION_TYPE_TWO) {
					WorkPublicActivityPrizeUser::updateAll(["status" => 1], ["id" => $userFan["id"]]);
					continue;
				}
				WorkPublicActivityPrizeUser::updateAll(["status" => 1], ["id" => $userFan["id"]]);
			}
			if (!empty($errorNum)) {
				return ["error" => 1, "error_msg" => "发放" . $successNum . "个完成，有" . $errorNum . $str];
			}

			return ["error" => 0];
		}

		/**
		 * 活动统计
		 * showdoc
		 * @catalog         数据接口/api/work-activity-public/activity-statistics
		 * @title           活动统计
		 * @description     活动统计
		 * @url  http://{host_name}/modules/api/work-activity-public/activity-statistics
		 *
		 * @param activity_id int 活动id
		 *
		 * @return_param    now_not_day int 去关
		 * @return_param    last_now_not_day int 昨日去关
		 * @return_param    new_fans int 新增粉丝
		 * @return_param    new_last_fans int 昨日新增
		 * @return_param    new_add int 新增好友
		 * @return_param    last_add int 昨日新增好友
		 * @return_param    lose_fans int 流失好友
		 * @return_param    last_lose_fans int 昨日流失好友
		 * @return_param    success int 完成任务
		 * @return_param    last_success int 昨日完成任务
		 * @return_param    participation int 净增
		 * @return_param    last_participation int 昨日净增
		 * @return_param    keep int 留存率
		 * @return_param    last_keep int 昨日留存率
		 * @return_param    net_fans int 参与
		 * @return_param    net_last_fans int 昨日参与
		 *
		 * @remark          Create by PhpStorm. User: sym. Date: 2020-09-11 15:57
		 * @number          0
		 */
		public function actionActivityStatistics ()
		{
			$activityId = Yii::$app->request->post("activity_id");

			return WorkPublicActivity::ActivityStatisticsAll($activityId);
		}

		/**
		 * 活动统计天月周
		 * showdoc
		 * @catalog         数据接口/api/work-activity-public/activity-statistics-day
		 * @title           活动统计天月周
		 * @description     活动统计天月周
		 * @url  http://{host_name}/modules/api/work-activity-public/activity-statistics-day
		 *
		 * @param activity_id int 活动id
		 * @param type int 1天2周3月
		 * @param start_time string 开始时间
		 * @param end_time string 结束时间
		 *
		 * @return_param    seriesData array
		 * @return_param    xData array
		 * @return_param    wayData array
		 * @return_param    wayData.new_fans int 新粉丝
		 * @return_param    wayData.participation int 净增
		 * @return_param    wayData.now_not_day int 取关粉丝
		 * @return_param    wayData.net_fans int 参与人
		 * @return_param    wayData.success int 完成任务
		 * @return_param    wayData.new_add int 新添加好友
		 * @return_param    wayData.lose_fans int 流失好友
		 * @return_param    wayData.keep int 好友留存率
		 * @remark          Create by PhpStorm. User: sym. Date: 2020-09-11 15:57
		 * @number          0
		 */
		public function actionActivityStatisticsDay ()
		{
			$activityId = Yii::$app->request->post("activity_id");
			$type       = Yii::$app->request->post("type");
			$startTime  = Yii::$app->request->post("start_time");
			$endTime    = Yii::$app->request->post("end_time");
			$is_export  = Yii::$app->request->post("is_export");
			$result     = WorkPublicActivity::ActivityStatisticsAllDay($activityId, $startTime, $endTime, $type);
			$activity   = WorkPublicActivity::findOne($activityId);
			if ($is_export == 1) {
				if (empty($result)) {
					throw new InvalidParameterException('暂无数据，无法导出！');
				}
				$save_dir = \Yii::getAlias('@upload') . '/exportfile/' . date('Ymd') . '/';
				//创建保存目录
				if (!file_exists($save_dir) && !mkdir($save_dir, 0777, true)) {
					return ['error' => 1, 'msg' => '无法创建目录'];
				}
				$headers = [
					'time'          => '时间',
					'new_fans'      => "新增粉丝",
					'participation' => "净增新粉丝",
					'now_not_day'   => "取关新粉丝",
					'net_fans'      => "参与人",
					'success'       => "完成任务",
					'new_add'       => "新添加好友",
					'lose_fans'     => "流失好友",
					'keep'          => "好友留存率%",
				];
				if ($activity->type == WorkPublicActivity::ACTIVITY_TYPE_ONE) {
					unset($headers["new_add"], $headers["lose_fans"], $headers["keep"]);
				}
				if ($activity->type == WorkPublicActivity::ACTIVITY_TYPE_TWO) {
					unset($headers["new_fans"], $headers["participation"], $headers["now_not_day"]);
				}
				$columns = array_keys($headers);

				$fileName = "activity" . '_' . date("YmdHis", time());
				Excel::export([
					'models'       => array_reverse($result['wayData']),//数库
					'fileName'     => $fileName,//文件名
					'savePath'     => $save_dir,//下载保存的路径
					'asAttachment' => true,//是否下载
					'columns'      => $columns,//要导出的字段
					'headers'      => $headers
				]);
				$url = \Yii::$app->params['site_url'] . str_replace(\Yii::getAlias('@upload'), '/upload', $save_dir) . $fileName . '.xlsx';

				return [
					'url' => $url,
				];
			}

			return $result;
		}

		/**
		 * 活动统完成情况统计
		 * showdoc
		 * @catalog         数据接口/api/work-activity-public/activity-statistics-indicator
		 * @title           活动统完成情况统计
		 * @description     活动统完成情况统计
		 * @url  http://{host_name}/modules/api/work-activity-public/activity-statistics-indicator
		 *
		 * @param activity_id int 活动id
		 * @param level int 等级默认1
		 *
		 * @return_param    seriesData array
		 * @return_param    xData array
		 * @remark          Create by PhpStorm. User: sym. Date: 2020-09-11 15:57
		 * @number          0
		 */
		public function actionActivityStatisticsIndicator ()
		{
			if (Yii::$app->request->isGet) {
				throw  new InvalidParameterException("请求方式不正确");
			}
			$activityId = Yii::$app->request->post("activity_id");
			$level      = Yii::$app->request->post("level", 1);
			$startTime  = Yii::$app->request->post("s_date");
			$endTime    = Yii::$app->request->post("e_date");
			$type       = Yii::$app->request->post("type");

			return WorkPublicActivity::ActivityStatisticsIndicator($activityId, $level, $type, $startTime, $endTime);
		}

		/**
		 * 活动统层级
		 * showdoc
		 * @catalog         数据接口/api/work-activity-public/activity-statistics-tier
		 * @title           活动统层级
		 * @description     活动统层级
		 * @url  http://{host_name}/modules/api/work-activity-public/activity-statistics-tier
		 *
		 * @param activity_id int 活动id
		 * @param level int 等级默认1
		 *
		 * @return_param    num int 人数
		 * @return_param    level int 层级
		 *
		 * @remark          Create by PhpStorm. User: sym. Date: 2020-09-11 15:57
		 * @number          0
		 */
		public function actionActivityStatisticsTier ()
		{
			if (Yii::$app->request->isGet) {
				throw  new InvalidParameterException("请求方式不正确");
			}
			$activityId = Yii::$app->request->post("activity_id");
			$startTime  = Yii::$app->request->post("s_date");
			$endTime    = Yii::$app->request->post("e_date");
			$type       = Yii::$app->request->post("type");
			$data       = DateUtil::getDateFromRange($startTime, $endTime);
			switch ((int) $type) {
				case 0:
				case 1:
					$time1     = strtotime($startTime);
					$time2     = strtotime($endTime) + 84600;
					$fansUsers = Yii::$app->db->createCommand(
						"select level,parent_fans from {{%work_public_activity_tier}} where activity_id = $activityId and create_time between $time1 and $time2 "
					)->queryAll();
					break;
				case 2:
				case 3:
					if ($type == 2) {
						//按周
						$data      = DateUtil::getWeekFromRange($data);
						$s_date1   = $data['s_date'];
						$s_date2   = $data['e_date'];
						$firstTime = array_shift($s_date1);
						$firstTime = strtotime($firstTime);
						$lastTime  = array_pop($s_date2);
						$lastTime  = strtotime($lastTime) + 86399;
					} else {
						//按月
						$date      = DateUtil::getLastMonth();
						$firstTime = array_shift($date);
						$firstTime = strtotime($firstTime["firstday"]);
						$lastTime  = array_pop($date);
						$lastTime  = strtotime($lastTime["lastday"]) + 86399;
					}
					$fansUsers = Yii::$app->db->createCommand(
						"select level,parent_fans from {{%work_public_activity_tier}} where  activity_id = $activityId and create_time between $firstTime and $lastTime "
					)->queryAll();
					break;
			}
			$data = [];
			foreach ($fansUsers as $fansUser) {
				$tmpLevel = explode(",", $fansUser["level"]);
				foreach ($tmpLevel as $item) {
					array_push($data, $item);
				}
			}
			$tmpDataA = $tmpData = array_unique($data);
			sort($tmpData);
			sort($tmpDataA);
			foreach ($data as $datum) {
				$key = array_search($datum, $tmpDataA);
				if (!is_array($tmpData[$key])) {
					$tmp           = [];
					$tmp["name"]   = "等级" . $tmpData[$key];
					$tmp["value"]  = 1;
					$tmpData[$key] = $tmp;
				} else {
					$tmpData[$key]["value"] += 1;
				}
			}

			return [
				'seriesData' => array_column($tmpData, "value"),
				'xData'      => array_column($tmpData, "name"),
			];
		}

		/**
		 * 活动完成明细
		 * showdoc
		 * @catalog         数据接口/api/work-activity-public/activity-statistics-detail
		 * @title           活动完成明细
		 * @description     活动完成明细
		 * @url  http://{host_name}/modules/api/work-activity-public/activity-statistics-detail
		 *
		 * @param activity_id int 活动id
		 * @param is_export int 是否导出
		 *
		 * @return_param    cancel int 新粉丝取关率
		 * @return_param    new_cancel int 新粉丝占比
		 * @return_param    userFansIds int 参与未推广
		 * @return_param    userFans int 推广未完成
		 * @return_param    successUserFans int 完成任务
		 * @return_param    accumulated int 累计参与
		 * @return_param    success_people int 任务完成率
		 * @return_param    band_new int 带新系数
		 * @return_param    new_fans int 新关注粉丝
		 * @return_param    participation int 净增粉丝
		 * @return_param    now_not_day int 取关粉丝
		 * @return_param    net_fans int 参与人
		 * @return_param    success int 完成任务
		 * @return_param    new_add int 新添加好友
		 * @return_param    lose_fans int 流失好友
		 * @return_param    keep int 好友留存率
		 *
		 * @remark          Create by PhpStorm. User: sym. Date: 2020-09-11 15:57
		 * @number          0
		 */
		public function actionActivityStatisticsDetail ()
		{
			if (Yii::$app->request->isGet) {
				throw  new InvalidParameterException("请求方式不正确");
			}
			$activityId = Yii::$app->request->post("activity_id");
			$is_export  = Yii::$app->request->post("is_export");
			$startTime  = Yii::$app->request->post("s_date");
			$endTime    = Yii::$app->request->post("e_date");
			$type       = Yii::$app->request->post("type");
			$data       = DateUtil::getDateFromRange($startTime, $endTime);
			$detail     = [];
			$activity   = WorkPublicActivity::findOne($activityId);
			switch ((int) $type) {
				case 0:
					$detail = WorkPublicActivity::ActivityStatisticsHours($activityId, $startTime, $endTime);
					break;
				case 1:
					foreach ($data as $datum) {
						if ($datum == date("Y-m-d", time())) {
							$static = WorkPublicActivity::ActivityStatisticsNow($activityId, $datum . " 00:00", $datum . " 23:59");
						} else {
							$static = WorkPublicActivityStatistic::find()->alias("a")
								->where(["activity_id" => $activityId, "type" => 1, "time" => $datum])
								->asArray()->one();
							if (empty($static)) {
								$static = WorkPublicActivity::ActivityStatisticsNow($activityId, $datum . " 00:00", $datum . " 23:59");
							}
						}
						if ($type != 0) {
							$success = WorkPublicActivity::ActivityStatisticsIndicator($activityId, 1, 1, $datum, $datum, true);
							$static  = array_merge($success, $static);
						}
						$static["time"] = $datum;
						array_push($detail, $static);
					}
					break;
				case 2:
					//周
					$data    = DateUtil::getWeekFromRange($data);
					$s_date1 = $data['s_date'];
					foreach ($s_date1 as $datum) {
						$time2 = strtotime($datum) + 604799;
						if (time() > strtotime($datum) && strtotime($datum) + 604800 > time()) {
							$static = WorkPublicActivity::ActivityStatisticsNow($activityId, $datum, date('Y-m-d', $time2));
						} else {
							$static = WorkPublicActivityStatistic::find()->alias("a")
								->where(["activity_id" => $activityId, "type" => 2, "time" => $datum])
								->asArray()->one();
							if (empty($static)) {
								$static = WorkPublicActivity::ActivityStatisticsNow($activityId, $datum, date('Y-m-d', $time2));
							}
						}
						if ($type != 0) {
							$success = WorkPublicActivity::ActivityStatisticsIndicator($activityId, 1, 1, $datum, date("Y-m-d", strtotime($datum) + 518400), true);
							$static  = array_merge($success, $static);
						}
						$static["time"] = $datum . "-" . date("Y-m-d", strtotime($datum) + 604799) . "(第" . date("W", strtotime($datum)) . "周)";
						array_push($detail, $static);
					}
					break;
				case 3:
					$date = [];
					//按月
					$aStartTime = date("Y-m", $activity->start_time);
					$eEndTime   = date("Y-m", $activity->end_time);
					$i = 0;
					while ($aStartTime) {
						if ($aStartTime > $eEndTime) {
							break;
						}
						$firstday            = $date[$i]["firstday"] = $aStartTime . "-01";
						$lastday             = date('Y-m-d', strtotime("$firstday +1 month -1 day"));
						$date[$i]["lastday"] = $lastday;
						$aStartTime          = date('Y-m', strtotime("$firstday +1 month"));
						$i++;
					}
					foreach ($date as $datum) {
						if ($datum['firstday'] == date("Y-m-01", time())) {
							$static = WorkPublicActivity::ActivityStatisticsNow($activityId, $datum['firstday'], $datum['lastday'] . " 23:59:59");
						} else {
							$static = WorkPublicActivityStatistic::find()
								->where(["activity_id" => $activityId, "type" => 2, "time" => $datum['firstday']])
								->asArray()->one();
							if (empty($static)) {
								$static = WorkPublicActivity::ActivityStatisticsNow($activityId, $datum['firstday'], $datum['lastday'] . " 23:59:59");
							}
						}
						if ($type != 0) {
							$success = WorkPublicActivity::ActivityStatisticsIndicator($activityId, 1, 1, $datum['firstday'], date("Y-m-d", strtotime($datum['lastday']) - 86400), true);
							$static  = array_merge($success, $static);
						}
						$static["time"] = date("Y-m", strtotime($datum['firstday']));
						array_push($detail, $static);

					}
					break;
			}
			foreach ($detail as &$item) {
				$item["accumulated"]     = $item["net_fans"];
				$item["successUserFans"] = $item["success"];
				//任务完成率||带薪系数
				$item["band_new"] = $item["success_people"] = 0;
				if ($item["net_fans"] != 0) {
					$item["band_new"]       = round(($item["new_fans"] / $item["net_fans"]) * 100, 2);
					$item["success_people"] = round(($item["successUserFans"] / $item["accumulated"]) * 100, 2);
				}

				//新粉丝取关率：取关新粉丝/新关注粉丝
				$item["cancel"] = 0;
				if ($item["new_fans"] != 0) {
					$item['cancel'] = round(($item['now_not_day'] / $item["new_fans"]) * 100, 2);
				}
				//新粉丝占比：新关注粉丝/累计参与
				$item["new_cancel"] = 0;
				if ($item["net_fans"] != 0) {
					$item['new_cancel'] = round(($item['new_fans'] / $item["net_fans"]) * 100, 2);
				}
				unset($item['id']);
			}
			if ($is_export == 1) {
				if (empty($detail)) {
					throw new InvalidParameterException('暂无数据，无法导出！');
				}
				$save_dir = \Yii::getAlias('@upload') . '/exportfile/' . date('Ymd') . '/';
				//创建保存目录
				if (!file_exists($save_dir) && !mkdir($save_dir, 0777, true)) {
					return ['error' => 1, 'msg' => '无法创建目录'];
				}
				$headers = [
					'time'            => '时间',
					'userFansCount'   => '参与未推广',
					'userFans'        => "推广未完成",
					'successUserFans' => "完成任务",
					'accumulated'     => "累计参与",
					'success_people'  => "任务完成率%",

				];
				if ($activity->type == 1 || $activity->type == 3) {
					$headers = array_merge($headers, [
						'band_new'      => "带新系数%",
						'new_fans'      => "新关注粉丝",
						'now_not_day'   => "取关新粉丝",
						'participation' => "净增新粉丝",
						'cancel'        => "新粉丝取关率%",
						'new_cancel'    => "新粉丝占比%",]);
				}
				if ($activity->type == WorkPublicActivity::ACTIVITY_TYPE_THREE) {
					$headers = array_merge($headers, ['new_add' => "新添加好友", 'lose_fans' => "流失好友", 'keep' => "好友留存率%",]);
				}
				if ($activity->type == WorkPublicActivity::ACTIVITY_TYPE_TWO) {
					$headers = array_merge($headers, ['new_add' => "新添加好友", 'lose_fans' => "流失好友", 'keep' => "好友留存率%",]);
				}
				$columns = array_keys($headers);

				$fileName = "activity" . '_' . date("YmdHis", time());
				Excel::export([
					'models'       => array_reverse($detail),//数库
					'fileName'     => $fileName,//文件名
					'savePath'     => $save_dir,//下载保存的路径
					'asAttachment' => true,//是否下载
					'columns'      => $columns,//要导出的字段
					'headers'      => $headers
				]);
				$url = \Yii::$app->params['site_url'] . str_replace(\Yii::getAlias('@upload'), '/upload', $save_dir) . $fileName . '.xlsx';

				return [
					'url' => $url,
				];
			}

			return $detail;
		}
	}