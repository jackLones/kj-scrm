<?php
	/**
	 * Title: actionAddGroup
	 * User: sym
	 * Date: 2021/1/18
	 * Time: 16:58
	 */

	namespace app\modules\api\controllers;

	use app\components\InvalidDataException;
	use app\components\InvalidParameterException;
	use app\models\AuthStore;
	use app\models\AuthStoreGroup;
	use app\models\AuthStoreStatus;
	use app\models\AuthStoreUser;
	use app\models\RedPack;
	use app\models\WorkDepartment;
	use app\models\WorkExternalContactFollowUser;
	use app\models\WorkUser;
	use app\modules\api\components\WorkBaseController;
	use app\queue\AuthStoreExeclAddJob;
	use app\queue\AuthStoreReName;
	use app\queue\AuthStoreUserJob;
	use app\util\SUtils;
	use app\util\WorkUtils;
	use moonland\phpexcel\Excel;

	class AuthStoreController extends WorkBaseController
	{
		public function beforeAction ($action)
		{
			return parent::beforeAction($action); // TODO: Change the autogenerated stub
		}

		/**
		 * Title: actionAddGroup
		 * User: sym
		 * Date: 2021/1/18
		 * Time: 17:13
		 *
		 * @return int[]
		 * @throws InvalidDataException
		 * @remark 添加修改门店分组
		 */
		public function actionAddGroup ()
		{
			if (\Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不正确");
			}
			$uid       = \Yii::$app->request->post("uid");
			$id        = \Yii::$app->request->post("id");
			$corpId    = \Yii::$app->request->post("corp_id");
			$status    = \Yii::$app->request->post("status", 1);
			$groupName = \Yii::$app->request->post("group_name");
			$pid       = \Yii::$app->request->post("pid", 0);
			if (!isset($this->corp->id) || empty($uid)) {
				throw new InvalidDataException("参数不完整");
			}
			$groupName   = str_replace(" ", "", $groupName);
			$Transaction = \Yii::$app->db->beginTransaction();
			try {
				/** @var $SORT AuthStoreGroup* */
				$SORT  = AuthStoreGroup::find()->where(["corp_id" => $this->corp->id, "status" => 1])->orderBy(["sort" => SORT_DESC])->one();
				$Group = AuthStoreGroup::CreatNoGroup($uid, $this->corp->id);
				if (!empty($id)) {
					$GroupModel = AuthStoreGroup::findOne($id);
//					if ($status == 0 && !empty($GroupModel) && !empty($Group)) {
//						$GroupListsTemp2 = AuthStoreGroup::GivePidReturnId($uid, $this->corp->id, [$GroupModel->id]);
//						$GroupListsTemp2 = isset($GroupListsTemp2[$GroupModel->id]) ? $GroupListsTemp2[$GroupModel->id] : [];
//						if (!empty($GroupListsTemp2)) {
//							AuthStore::updateAll(["group_id" => $Group->id], ["and", ["corp_id" => $this->corp->id], ["in", "group_id", $GroupListsTemp2]]);
//						}
//					}
					if (!empty($pid) && $pid == $GroupModel->id) {
						throw new InvalidDataException("上级分组id不能是本身");
					}
				} else {
					$GroupModel          = new AuthStoreGroup();
					$GroupModel->corp_id = $this->corp->id;
					$GroupModel->uid     = $uid;
					$GroupModel->sort    = $SORT->sort + 1;
				}
				$AuthGroupName = AuthStoreGroup::findOne(["corp_id" => $this->corp->id, "name" => $groupName, "status" => 1]);
				if (!empty($AuthGroupName) && (empty($id) || (!empty($id) && $GroupModel->name != $groupName))) {
					throw new InvalidDataException("分组已存在");
				}
				if (!empty($status)) {
					$GroupModel->name = $groupName;
				}
				if ($Group->id == $pid) {
					throw new InvalidDataException("不可以在未分组下创建分组");
				}
				if ($Group->id == $id) {
					throw new InvalidDataException("未分组不允许修改");
				}
				$GroupModel->status = $status;
				if ($status == 0) {
					AuthStore::updateAll(["group_id" => $Group->id], ["group_id" => $GroupModel->id]);
				}
				$GroupModel->pid = empty($pid) ? 0 : $pid;
				if (!$GroupModel->validate() || !$GroupModel->save()) {
					throw new InvalidDataException(SUtils::modelError($GroupModel));
				}
				$parent                 = AuthStoreGroup::GiveIdReturnParentId($uid, $this->corp->id, [$GroupModel->id]);
				$parent                 = isset($parent[$GroupModel->id]) ? $parent[$GroupModel->id] : [];
				$GroupModel->parent_ids = implode(",", $parent);
				$GroupModel->save();
				$Transaction->commit();
			} catch (\Exception $e) {
				$Transaction->rollBack();
				throw new InvalidDataException($e->getMessage());
			}

			return ["error" => 0, "id" => $GroupModel->id];

		}

		/**
		 * Title: actionAddStore
		 * User: sym
		 * Date: 2021/1/19
		 * Time: 9:22
		 *
		 * @return int[]
		 * @throws InvalidDataException
		 * @throws InvalidParameterException
		 * @throws \yii\db\Exception
		 * @remark 添加|修改店铺
		 */
		public function actionAddStore ()
		{
			if (\Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不正确");
			}
			$uid      = \Yii::$app->request->post("uid");
			$id       = \Yii::$app->request->post("id");
			$corpId   = \Yii::$app->request->post("corp_id");
			$groupId  = \Yii::$app->request->post("group_id");
			$shopName = \Yii::$app->request->post("shop_name");
			$describe = \Yii::$app->request->post("describe", '');
			$address  = \Yii::$app->request->post("address");
			$province = \Yii::$app->request->post("province");
			$city     = \Yii::$app->request->post("city");
			$district = \Yii::$app->request->post("district");
			$lat      = \Yii::$app->request->post("lat");
			$lng      = \Yii::$app->request->post("lng");
			$subId    = isset($this->subUser->sub_id) ? $this->subUser->sub_id : NULL;
			if (!isset($this->corp->id) || empty($uid) || empty($address) || empty($shopName) || empty($lat) || empty($lng)) {
				throw new InvalidDataException("参数不完整");
			}
			if (mb_strlen($shopName) > 80) {
				throw new InvalidDataException("门店名称超过80个字");
			}
			$rename = 0;
			$shopName      = str_replace(" ", "", $shopName);
			$GroupListsOld = $GroupListsNew = [];
			if (!empty($id)) {
				$StoreModel    = AuthStore::findOne($id);
				$ShopNameModel = AuthStore::findOne(["corp_id" => $this->corp->id, "shop_name" => $shopName, "is_del" => 0, "address" => $address]);
				if (!empty($ShopNameModel) && $StoreModel->id != $ShopNameModel->id) {
					throw new InvalidDataException("门店已存在");
				}
				$StoreModel->update_time = date("Y-m-d H:i:s", time());
				if ($StoreModel->group_id != $groupId) {
					/**门店所有上级旧*/
					$GroupListsOld = AuthStoreGroup::findOne($StoreModel->group_id);
					$GroupListsOld = (!empty($GroupListsOld) && !empty($GroupListsOld->parent_ids)) ? explode(",", $GroupListsOld->parent_ids) : [$StoreModel->group_id];
					/**门店所有上级新*/
					$GroupListsNew = AuthStoreGroup::findOne($groupId);
					$GroupListsNew = (!empty($GroupListsNew) && !empty($GroupListsNew->parent_ids)) ? explode(",", $GroupListsNew->parent_ids) : [$groupId];
				}
				if ($StoreModel->shop_name != $shopName && !empty($StoreModel->qc_url)) {
					$tempPatch = \Yii::$app->basePath . $StoreModel->qc_url;
					$file     = file_get_contents(\Yii::$app->basePath . $StoreModel->qc_url);
					$fileName = $shopName . "-" . rand(1, 10000) . time() . ".jpg";//定义图片名
					$save_dir = \Yii::getAlias('@upload') . '/store/' . date('Ymd') . '/';
					//创建保存目录
					if (!file_exists($save_dir) && !mkdir($save_dir, 0777, true)) {
						throw new InvalidDataException("文件创建失败，权限不足");
					}
					file_put_contents($save_dir . $fileName, $file);
					unlink(\Yii::$app->basePath . $StoreModel->qc_url);
					$StoreModel->qc_url = "/upload/store/" . date('Ymd') . '/' . $fileName;
					$rename = 1;
				}
			} else {
				$StoreModel          = new AuthStore();
				$StoreModel->uid     = $uid;
				$StoreModel->sub_id  = $subId;
				$StoreModel->corp_id = $this->corp->id;
				/**门店所有上级新*/
				$GroupListsNew      = AuthStoreGroup::findOne($groupId);
				$GroupListsNew      = (!empty($GroupListsNew) && !empty($GroupListsNew->parent_ids)) ? explode(",", $GroupListsNew->parent_ids) : [$groupId];
				$StoreModel->status = 1;
				$ShopNameModel      = AuthStore::findOne(["corp_id" => $this->corp->id, "shop_name" => $shopName, "is_del" => 0, "address" => $address]);
				if (!empty($ShopNameModel)) {
					throw new InvalidDataException("门店已存在");
				}
			}
			/**地理位置**/
			$returnAddress = RedPack::getAddress($lat, $lng);
			if (!empty($returnAddress)) {
				$StoreModel->province = $returnAddress["province"];
				$StoreModel->city     = $returnAddress["city"];
				$StoreModel->district = $returnAddress["district"];
			} else {
				throw new InvalidDataException("门店地址获取失败！");
			}
			$StoreModel->lat       = "$lat";
			$StoreModel->lng       = "$lng";
			$StoreModel->address   = $address;
			$StoreModel->group_id  = $groupId;
			$StoreModel->shop_name = $shopName;
			$StoreModel->describe  = $describe;
			$Transaction           = \Yii::$app->db->beginTransaction();
			try {
				if (!$StoreModel->validate() || !$StoreModel->save()) {
					throw new InvalidDataException(SUtils::modelError($StoreModel));
				}
			} catch (\Exception $e) {
				$Transaction->rollBack();
				$rename = 0;
				throw new InvalidDataException($e->getMessage());
			}
			$Transaction->commit();
			if ($rename && !empty($id)) {
				\Yii::$app->work->push(new AuthStoreReName([
					'storeId' => $id,
					'corpId'  => $this->corp->id,
				]));
			}
			return ["error" => 0, "old_pid" => $GroupListsOld, "new_pid" => $GroupListsNew];

		}

		/**
		 * Title: actionExecLAddStore
		 * User: sym
		 * Date: 2021/1/19
		 * Time: 15:59
		 *
		 * @return int[]
		 * @throws InvalidDataException
		 * @remark execl批量添加店铺
		 */
		public function actionExecLAddStore ()
		{
			$uid      = \Yii::$app->request->post("uid");
			$corpId   = \Yii::$app->request->post("corp_id");
			$group_id = \Yii::$app->request->post("group_id");
			if (!isset($this->corp->id)) {
				throw new InvalidDataException("企业微信不存在");
			}
			if (!empty($_FILES['importFile']['name'])) {
				$fileTypes = explode(".", $_FILES['importFile']['name']);
				$fileType  = $fileTypes[count($fileTypes) - 1];
				/*判别是不是.xls .xlsx文件，判别是不是excel文件*/
				if (strtolower($fileType) != "xls" && strtolower($fileType) != "xlsx") {
					throw new InvalidDataException('文件类型不对！');
				}
				$fileTmpPath = $_FILES['importFile']['tmp_name'];
				$importData  = Excel::import($fileTmpPath, [
					'setFirstRecordAsKeys' => false
				]);

				if (!empty($importData[6])) {
					$header = $importData[6];
					if ($header['A'] != '门店名称' || $header['B'] != '门店地址' || $header['C'] != '分组（15个字）') {
						throw new InvalidDataException('导入数据格式不对，请检查标题是否与模版一致！');
					}
				} else {
					throw new InvalidDataException('导入数据格式不对，请检查标题是否与模版一致！');
				}
				if (is_array($importData)) {
					foreach ($importData as $key => $datum) {
						if ($key <= 6) {
							continue;
						}
						if (!isset($datum["A"]) || !isset($datum["B"]) || !isset($datum["C"])) {
							unset($importData[$key]);
						}
						if ($key > 1 && !$datum["A"] && !$datum["B"] && !$datum["C"]) {
							unset($importData[$key]);
						}
					}
				}

				$count = count($importData);
				if ($count < 1) {
					throw new InvalidDataException('请在文件内添加要导入的数据！');
				} else if ($count > 3007) {
					throw new InvalidDataException('文件内行数不能超过5000行！');
				}
				try {
					$import               = [];
					$import['uid']        = $uid;
					$import['corp_id']    = $this->corp->id;
					$import['uid']        = $uid;
					$import['group_id']   = $group_id;
					$import['importData'] = $importData;
					\Yii::$app->work->push(new AuthStoreExeclAddJob([
						'import' => $import,
					]));

					return ['error' => 0];
				} catch (\Exception $e) {
					throw new InvalidDataException($e->getMessage());
				}
			} else {
				throw new InvalidDataException('请上传文件！');
			}
		}

		/**
		 * Title: actionGetGroupList
		 * User: sym
		 * Date: 2021/1/18
		 * Time: 17:18
		 *
		 * @remark 获取门店分组数据
		 */
		public function actionGetGroupList ()
		{
			if (\Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不正确");
			}
			$corpId      = \Yii::$app->request->post("corp_id");
			$uid         = \Yii::$app->request->post("uid");
			$parent_id   = \Yii::$app->request->post("parent_id");
			$store       = \Yii::$app->request->post("store");
			$choose      = \Yii::$app->request->post("choose");
			$StoreStatus = \Yii::$app->request->post("status", 0);

			return AuthStoreGroup::FormattingData($uid, $this->corp->id, $parent_id, $store, $choose, $StoreStatus);
		}

		/**
		 * Title: actionAddStoreUser
		 * User: sym
		 * Date: 2021/1/19
		 * Time: 13:56
		 *
		 * @return int[]
		 * @throws InvalidDataException
		 * @throws InvalidParameterException
		 * @throws \yii\db\Exception
		 * @remark添加门店员工
		 */
		public function actionAddStoreUser ()
		{
			if (\Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不正确");
			}
			$uid      = \Yii::$app->request->post("uid");
			$corpId   = \Yii::$app->request->post("corp_id");
			$store_id = \Yii::$app->request->post("store_id");
			$user_ids = \Yii::$app->request->post("user_ids");
			$ids      = \Yii::$app->request->post("ids");
			$is_del   = \Yii::$app->request->post("is_del");
			$transfer = \Yii::$app->request->post("transfer");
			if (!isset($this->corp->id)) {
				throw new InvalidDataException("企业微信不存在");
			}
			if (empty($store_id) || (empty($user_ids) && empty($ids))) {
				throw new InvalidDataException("参数不完整");
			}
			if (!empty($user_ids)) {
				$Temp     = WorkDepartment::GiveUserIdsReturnDepartmentAndUserIds($user_ids);
				$user_ids = WorkDepartment::GiveDepartmentReturnUserData($this->corp->id, $Temp["department"], $Temp["user"], 1, true);
			}
			$jobIds = [];
			if (!empty($store_id)) {
				$store_idTemp = [];
				foreach ($store_id as $item) {
					$store_idTemp[] = rtrim($item, "-s");
				}
				$store_id = $store_idTemp;
			}
			$storeTemp    = AuthStore::find()->where(["corp_id" => $this->corp->id])->andWhere(["in", "id", $store_id])->asArray()->all();
			$storeTemp    = array_column($storeTemp, "group_id", "id");
			$GroupTemp    = AuthStoreGroup::GiveIdReturnParentId($uid, $this->corp->id, $storeTemp);
			$GroupTempOld = $returnData = [];
			$new          = [];
			$Transaction  = \Yii::$app->db->beginTransaction();
			try {
				if (!empty($ids)) {
					foreach ($store_id as $key => $item) {
						$num      = 0;
						$old      = [];
						$oldStore = '-1';
						$cc       = true;
						if (empty($ids)) {
							$cc = false;
						}
						foreach ($ids as $ii => $id) {
							$AuthStoreUser = AuthStoreUser::findOne(["id" => $id]);
							if (!empty($AuthStoreUser)) {
								$tempStoreId = $AuthStoreUser->store_id;
								if (!empty($transfer)) {
									$AuthStoreUserT = AuthStoreUser::findOne(["store_id" => $item, "user_id" => $AuthStoreUser->user_id, "status" => 1]);
									if (!empty($AuthStoreUserT)) {
										$cc = false;
										continue;
									}
									$AuthStoreUser->store_id = $item;
								}
								if ($is_del != 0) {
									$AuthStoreUser->status = 0;
									$new                   = AuthStore::findOne($item);
									$new                   = empty($new->group->parent_ids) ? [$new->group_id] : explode(",", $new->group->parent_ids);
									$jobIds[]              = $AuthStoreUser->id;
								}
								if (!$AuthStoreUser->validate() || !$AuthStoreUser->save()) {
									throw new InvalidDataException(SUtils::modelError($AuthStoreUser));
								}
								$cc = true;
								++$num;
								if (!empty($transfer) && $tempStoreId != $item) {
									$old      = AuthStore::findOne($tempStoreId);
									$oldStore = $tempStoreId;
									$old      = empty($old->group->parent_ids) ? [$old->group_id] : explode(",", $old->group->parent_ids);
									$new      = AuthStore::findOne($item);
									$new      = empty($new->group->parent_ids) ? [$new->group_id] : explode(",", $new->group->parent_ids);
									\Yii::$app->queue->push(new AuthStoreUserJob([
										'storeId' => $AuthStoreUser->store_id,
										'corpId'  => $this->corp->id,
									]));
									$jobIds[] = $AuthStoreUser->id;
								}
								unset($ids[$ii]);
							}
						}
						if ($cc) {
							$dataTemp                = [];
							$dataTemp["pid_all"]     = $new;
							$dataTemp["old_pid_all"] = [];
							if (!empty($transfer)) {
								$dataTemp["old_pid_all"] = $old;
							}
							$dataTemp["num"]       = $num;
							$dataTemp["store"]     = $item . "-s";
							$dataTemp["store_old"] = $oldStore . "-s";
							$returnData[]          = $dataTemp;
						}
					}
				}
				if (empty($is_del) || $is_del == 0) {
					$TempA = true;
					foreach ($store_id as $key => $store) {
						$AuthStore = AuthStore::findOne($store);
						$num       = 0;
						$storeT    = isset($storeTemp[$store]) ? $storeTemp[$store] : "-1";
						if ($AuthStore->is_del == 1) {
							continue;
						}
						foreach ($user_ids as $id) {
							$authStoreUserModel = AuthStoreUser::findOne(["store_id" => $store, "user_id" => $id, "status" => 1]);
							if (!empty($authStoreUserModel)) {
								$TempA = false;
								continue;
							}
							$TempA                        = true;
							$authStoreUserModel           = new AuthStoreUser();
							$authStoreUserModel->store_id = $store;
							$authStoreUserModel->user_id  = $id;
							$authStoreUserModel->status   = 1;
							if (!$authStoreUserModel->validate() || !$authStoreUserModel->save()) {
								throw new InvalidDataException(SUtils::modelError($authStoreUserModel));
							}
							++$num;
							$jobIds[] = $authStoreUserModel->id;
						}
						if ($TempA) {
							$dataTemp                = [];
							$dataTemp["pid_all"]     = isset($GroupTemp[$storeT]) ? $GroupTemp[$storeT] : [$AuthStore->group_id];
							$dataTemp["old_pid_all"] = [];
							$dataTemp["num"]         = $num;
							$dataTemp["store"]       = $store . "-s";
							$dataTemp["store_old"]   = "";
							$returnData[]            = $dataTemp;
						}
					}
				}
				if (!empty($jobIds)) {
					\Yii::$app->queue->push(new AuthStoreUserJob([
						'authUserId' => $jobIds,
						'corpId'     => $this->corp->id,
					]));
				}
			} catch (\Exception $e) {
				$Transaction->rollBack();
				throw new InvalidDataException($e->getMessage());
			}

			$Transaction->commit();

			return ["error" => 0, "data" => $returnData];
		}

		/**
		 * Title: getStoreStatus
		 * User: sym
		 * Date: 2021/1/27
		 * Time: 17:11
		 *
		 * @return int[]
		 * @throws InvalidDataException
		 * @throws InvalidParameterException
		 * @remark 门店状态
		 */
		public function actionGetStoreStatus ()
		{
			if (\Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不正确");
			}
			$corpId = \Yii::$app->request->post("corp_id");
			$status = \Yii::$app->request->post("status");
			if (!isset($this->corp->id)) {
				throw new InvalidDataException("企业微信不存在");
			}
			$AuthStoreStatus = AuthStoreStatus::findOne(["corp_id" => $this->corp->id]);
			if (empty($AuthStoreStatus)) {
				$AuthStoreStatus          = new AuthStoreStatus();
				$AuthStoreStatus->corp_id = $this->corp->id;
				$AuthStoreStatus->status  = 1;
				$AuthStoreStatus->save();
			}
			if ((!empty($status) || $status == 0) && $status !== '') {
				$AuthStoreStatus->status = $status;
				$AuthStoreStatus->save();
			}

			return ["status" => $AuthStoreStatus->status];
		}

		/**
		 * Title: actionGetGroupUserList
		 * User: sym
		 * Date: 2021/1/18
		 * Time: 18:04
		 *
		 * @remark 获取门店成员列表
		 */
		public function actionGetGroupUserList ()
		{
			if (\Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不正确");
			}
			$corpId      = \Yii::$app->request->post("corp_id");
			$uid         = \Yii::$app->request->post("uid");
			$id          = \Yii::$app->request->post("id");
			$search_name = \Yii::$app->request->post("search_name");
			$page        = \Yii::$app->request->post("page", 1);
			$pageSize    = \Yii::$app->request->post("page_size", 15);
			$offset      = ($page - 1) * $pageSize;
			if (!isset($this->corp->id)) {
				throw new InvalidDataException("企业微信不存在");
			}
			if (!empty($id)) {
				if (strpos($id, 's') !== false) {
					$T       = explode("-", $id);
					$storeId = $T[0];
				} else {
					$groupId = $id;
				}
			}
			$WorkUserLists = AuthStoreUser::find()->alias("a")
				->leftJoin("{{%work_user}} as b", "a.user_id = b.id")
				->leftJoin("{{%auth_store}} as c", "a.store_id = c.id")
				->leftJoin("{{%auth_store_group}} as d", "c.group_id = d.id")
				->where(["b.corp_id" => $this->corp->id, "c.uid" => $uid, "a.status" => 1]);
			if (!empty($storeId)) {
				$WorkUserLists = $WorkUserLists->andWhere(["a.store_id" => $storeId]);
			}
			if (!empty($groupId)) {
				$GroupListsTemp2 = AuthStoreGroup::GivePidReturnId($uid, $this->corp->id, [$groupId]);
				$WorkUserLists   = $WorkUserLists->andWhere(["c.group_id" => $GroupListsTemp2[$groupId]]);
			}
			if (!empty($search_name) || $search_name != '') {
				$WorkUserLists = $WorkUserLists->andWhere(["or", ["like", "b.mobile", $search_name], ["like", "b.name", $search_name]]);
			}
			\Yii::error($WorkUserLists->createCommand()->getRawSql(), '$WorkUserLists');
			$count         = $WorkUserLists->count();
			$WorkUserLists = $WorkUserLists->offset($offset)->limit($pageSize)->select("b.avatar,b.gender,a.*,c.shop_name,d.name as group_name,b.name,b.is_external,b.mobile")->orderBy(["create_time" => SORT_DESC])->asArray()->all();
			$storeUserIds  = array_column($WorkUserLists, "id");

			return ["data" => $WorkUserLists, "count" => $count, "user_ids" => $storeUserIds];
		}

		/**
		 * Title: actionGroupSort
		 * User: sym
		 * Date: 2021/1/20
		 * Time: 14:15
		 *
		 * @throws InvalidParameterException
		 * @remark 分组排序
		 */
		public function actionGroupSort ()
		{
			if (\Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不正确");
			}
			$corpId = \Yii::$app->request->post("corp_id");
			if (\Yii::$app->cache->exists($corpId)) {
				throw new InvalidDataException("正在操作...");
			}
			\Yii::$app->cache->set($corpId, '1', 0.5);
			$uid      = \Yii::$app->request->post("uid");
			$sort     = \Yii::$app->request->post("sort");
			$group_id = \Yii::$app->request->post("group_id");
			$parentId = \Yii::$app->request->post("parent_id");
			if (!isset($this->corp->id)) {
				throw new InvalidDataException("企业微信不存在");
			}
			$Group = AuthStoreGroup::findOne($group_id);
			if (!empty($Group)) {
				if (!empty($parentId)) {
					$child = AuthStoreGroup::GivePidReturnId($uid, $this->corp->id, [$Group->id]);
					/**修改父级**/
					$Group->pid = $parentId;
					$Group->save();
				} else {
					$Group->pid = 0;
					$Group->save();
					$child = AuthStoreGroup::GivePidReturnId($uid, $this->corp->id, [$Group->id]);
				}
				/**排序**/
				foreach ($sort as $k => $id) {
					$group       = AuthStoreGroup::findOne($id);
					$group->sort = $k + 1;
					$group->save();
				}
				$parent       = AuthStoreGroup::GiveIdReturnParentId($uid, $this->corp->id, [$Group->id]);
				$child        = isset($child[$Group->id]) ? $child[$Group->id] : [];
				$GroupListALL = [];
				/**重新更新所有的下级的上级关系**/
				if (!empty($child)) {
					foreach ($child as $item) {
						if ($item != $Group->id) {
							$parentTemp = AuthStoreGroup::GiveIdReturnParentId($uid, $this->corp->id, [$item], $GroupListALL);
							\Yii::error($parentTemp, '$parentTemp');
							$parentTemp = isset($parentTemp[$item]) ? $parentTemp[$item] : [];
							$GroupTemp  = AuthStoreGroup::findOne($item);
							if (!empty($GroupTemp)) {
								$GroupTemp->parent_ids = implode(",", $parentTemp);
								$GroupTemp->save();
							}
						}
					}
				}
				$parent            = isset($parent[$Group->id]) ? $parent[$Group->id] : [];
				$Group->parent_ids = implode(",", $parent);
				$Group->save();
			}
			\Yii::$app->websocket->send([
				'channel' => 'push-message',
				'to'      => $uid,
				'type'    => 'export_store_sort',
				'info'    => [
					'type'     => 'export_store_sort',
					'from'     => $uid,
					'corpid'   => $corpId,
					'parentId' => $parentId,
					'group_id' => $group_id,
					'sort'     => $sort,
				]
			]);

			return ["error" => 0];

		}

		/**
		 * Title: actionGetStoreList
		 * User: sym
		 * Date: 2021/1/19
		 * Time: 10:43
		 *
		 * @remark 获取店铺列表
		 */
		public function actionGetStoreList ()
		{
			if (\Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不正确");
			}
			$uid         = \Yii::$app->request->post("uid");
			$corpId      = \Yii::$app->request->post("corp_id");
			$search_name = \Yii::$app->request->post("search_name");
			$status      = \Yii::$app->request->post("status");
			$group_id    = \Yii::$app->request->post("group_id");
			$page        = \Yii::$app->request->post("page", 1);
			$pageSize    = \Yii::$app->request->post("page_size", 15);
			$offset      = ($page - 1) * $pageSize;
			if (!isset($this->corp->id)) {
				throw new InvalidDataException("企业微信不存在");
			}
			$StoreLists = AuthStore::find()->alias("a")
				->leftJoin("{{%auth_store_group}} as b", "a.group_id = b.id")
				->leftJoin("{{%work_user}} as c", "c.id = a.manger_id")
				->where(["a.corp_id" => $this->corp->id, "a.is_del" => 0, "b.status" => 1]);
			if ((!empty($status) || (int) $status === 0) && $status != '') {
				$StoreLists->andWhere(["a.status" => $status]);
			}
			if (!empty($group_id) && $group_id != '') {
				$GroupListsTemp2 = AuthStoreGroup::GivePidReturnId($uid, $this->corp->id, [$group_id]);
				$StoreLists->andWhere(["a.group_id" => $GroupListsTemp2[$group_id]]);
			}
			if (!empty($search_name)) {
				$StoreLists->andWhere(["or", ["like", "a.shop_name", $search_name], ["like", "a.address", $search_name]]);
			}
			$authGroup      = AuthStoreGroup::findAll(["corp_id" => $this->corp->id, "status" => 1, "pid" => 0]);
			$authGroup      = array_column($authGroup, "name", "id");
			$count          = $StoreLists->count();
			$StoreListsTemp = clone $StoreLists;
			$StoreLists     = $StoreLists->offset($offset)->limit($pageSize)->orderBy(["create_time" => SORT_DESC])->select("a.*,b.name,c.name as manger_name,b.parent_ids")->asArray()->all();
			$StoreListsTemp = $StoreListsTemp->asArray()->all();
			$storeIds       = array_column($StoreListsTemp, "id");
			foreach ($StoreLists as &$storeList) {
				if (empty($storeList["manger_name"])) {
					$storeList["manger_name"] = "--";
				}
				/**门店员工**/
				$user_count               = AuthStoreUser::find()->where(["store_id" => $storeList["id"], "status" => 1])->asArray()->all();
				$storeList["user_count"]  = count($user_count);
				$user_ids                 = array_column($user_count, "user_id");
				$storeList["is_external"] = 1;
				$WorkUser                 = WorkUser::find()->where(["and", ["in", "id", $user_ids], ["corp_id" => $this->corp->id, "is_external" => 1]])->all();
				$parent_ids               = [];
				if (empty($WorkUser)) {
					$storeList["is_external"] = 0;
				}
				if (!empty($storeList["parent_ids"])) {
					$parent_ids = explode(',', $storeList["parent_ids"]);
					if (count($parent_ids) > 1) {
						$id = array_pop($parent_ids);
						if (isset($authGroup[$id])) {
							$storeList["name"] = $authGroup[$id] . "-" . $storeList["name"];
						}
					}
				}
				$storeList["group_name"] = 0;
				/**门店员工增长客户数（所有）**/
				$storeList["user_add_all"] = WorkExternalContactFollowUser::find()
					->where(["store_id" => $storeList["id"]])
					->groupBy(["external_userid"])->count();
				/**门店员工增长客户数（今日）**/
				$storeList["user_add_now"] = WorkExternalContactFollowUser::find()
					->where(["store_id" => $storeList["id"], "del_type" => 0])
					->andFilterWhere(['between', 'createtime', strtotime(date('Y-m-d')), strtotime(date('Y-m-d') . " 23:59:59")])
					->groupBy(["external_userid"])->count();
				/**门店员工删除客户数（所有）**/
				$user_del_all              = WorkExternalContactFollowUser::find()
					->where(["store_id" => $storeList["id"]])
					->andWhere([">", "del_type", 0])
					->andWhere(["in", "user_id", $user_ids])->groupBy(["external_userid"])->all();
				$user_del                  = WorkExternalContactFollowUser::find()
					->where(["store_id" => $storeList["id"], "del_type" => 0])
					->andWhere(["in", "user_id", $user_ids])->groupBy(["external_userid"])->all();
				$user_del_all1             = array_column($user_del, "del_type", "external_userid");
				$user_del_all2             = array_column($user_del_all, "del_type", "external_userid");
				$storeList["user_del_all"] = count(array_diff_key($user_del_all2, $user_del_all1));
				/**门店员工删除客户数（今日）**/
				$user_del_all_now          = WorkExternalContactFollowUser::find()
					->where(["store_id" => $storeList["id"]])
					->andWhere([">", "del_type", 0])
					->andFilterWhere(['between', 'createtime', strtotime(date('Y-m-d')), strtotime(date('Y-m-d') . " 23:59:59")])
					->andWhere(["in", "user_id", $user_ids])->groupBy(["external_userid"])->all();
				$user_del_now              = WorkExternalContactFollowUser::find()
					->where(["store_id" => $storeList["id"], "del_type" => 0])
					->andFilterWhere(['between', 'createtime', strtotime(date('Y-m-d')), strtotime(date('Y-m-d') . " 23:59:59")])
					->andWhere(["in", "user_id", $user_ids])->groupBy(["external_userid"])->all();
				$user_del_all1             = array_column($user_del_now, "del_type", "external_userid");
				$user_del_all2             = array_column($user_del_all_now, "del_type", "external_userid");
				$storeList["user_del_now"] = count(array_diff_key($user_del_all2, $user_del_all1));
			}
			unset($storeList);

			return ["data" => $StoreLists, "count" => $count, "store_ids" => $storeIds];
		}

		/**
		 * Title: actionCloseStore
		 * User: sym
		 * Date: 2021/1/19
		 * Time: 15:32
		 *
		 * @return int[]
		 * @throws InvalidDataException
		 * @remark 批量开启关闭店铺
		 */
		public function actionCloseStore ()
		{
			if (\Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不正确");
			}
			$corpId   = \Yii::$app->request->post("corp_id");
			$store_id = \Yii::$app->request->post("store_id");
			$status   = \Yii::$app->request->post("status");
			if (!isset($this->corp->id)) {
				throw new InvalidDataException("企业微信不存在");
			}
			if (empty($store_id)) {
				throw new InvalidDataException("未选择任何信息");
			}
			foreach ($store_id as $item) {
				AuthStore::updateAll(["status" => $status], ["id" => $item, "corp_id" => $this->corp->id]);
			}

			return ["error" => 0];
		}

		/**
		 * Title: actionStoreDel
		 * User: sym
		 * Date: 2021/1/21
		 * Time: 16:13
		 *
		 * @return int[]
		 * @throws InvalidDataException
		 * @throws InvalidParameterException
		 * @throws \ParameterError
		 * @throws \QyApiError
		 * @throws \yii\base\InvalidConfigException
		 * @remark 删除门店
		 */
		public function actionStoreDel ()
		{
			if (\Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不正确");
			}
			$corpId   = \Yii::$app->request->post("corp_id");
			$uid      = \Yii::$app->request->post("uid");
			$store_id = \Yii::$app->request->post("store_id");
			if (!isset($this->corp->id)) {
				throw new InvalidDataException("企业微信不存在");
			}
			$store = AuthStore::findOne(["id" => $store_id, "corp_id" => $this->corp->id]);
			if (empty($store)) {
				throw new InvalidDataException("门店不存在");
			}
			$GroupListsOld = [];
			if (!empty($store)) {
				$workApi = WorkUtils::getWorkApi($this->corp->id, 1);
				if (!empty($store->config_id)) {
					$workApi->ECDelContactWay($store->config_id);
					$store->config_id = NULL;
					$store->qc_url    = NULL;
				}
				$store->is_del = 1;
				$store->save();
				$storeUser = AuthStoreUser::find()->where(["store_id" => $store_id, "status" => 1]);
				$storeUser = $storeUser->all();
				/**@var $storeUse AuthStoreUser* */
				foreach ($storeUser as $storeUse) {
					if (!empty($storeUse->config_id)) {
						$workApi->ECDelContactWay($storeUse->config_id);
						$storeUse->config_id = NULL;
						$storeUse->qc_url    = NULL;
					}
					$storeUse->status = 0;
					$storeUse->save();
				}
				$GroupListsOld = AuthStoreGroup::GiveIdReturnParentId($uid, $this->corp->id, [$store->group_id]);
				$GroupListsOld = isset($GroupListsOld[$store->group_id]) ? $GroupListsOld[$store->group_id] : [];
			}

			return ["error" => 0, 'old_pid' => $GroupListsOld];

		}

		/**
		 * Title: actionKeyReturnDetail
		 * User: sym
		 * Date: 2021/1/21
		 * Time: 20:29
		 *
		 * @return array|mixed
		 * @throws InvalidDataException
		 * @throws InvalidParameterException
		 * @remark 关键字|Ip定位
		 */
		public function actionKeyOrIpReturnDetail ()
		{
			if (\Yii::$app->request->isGet) {
				throw new InvalidParameterException("请求方式不正确");
			}
			$corpId = \Yii::$app->request->post("corp_id");
			if (!isset($this->corp->id)) {
				throw new InvalidDataException("企业微信不存在");
			}
			$key_word  = \Yii::$app->request->post("key_word");
			$page      = \Yii::$app->request->post("page", 1);
			$page_size = \Yii::$app->request->post("page_size", 10);
			$lat       = \Yii::$app->request->post("lat");
			$lng       = \Yii::$app->request->post("lng");
			$key       = \Yii::$app->params['tx_key'];
			/**经纬度查询详细地址**/
			if (!empty($lng) && !empty($lat)) {
				return RedPack::getAddress($lat, $lng);
			}
			/**关键词查询地址**/
			if (!empty($key_word)) {
				$url    = "https://apis.map.qq.com/ws/place/v1/suggestion/?keyword=$key_word&key=" . $key;
				$result = SUtils::postUrl($url, []);
				if ($result['status'] == 0) {
					return ["data" => $result['data'], "count" => $result['count']];
				} else {
					return [];
				}
			} else {
				/**Ip查询地址**/
				$IP     = \Yii::$app->request->getRemoteIP();
				$url    = "https://apis.map.qq.com/ws/location/v1/ip?ip=$IP&page_index=$page&page_size=$page_size&key=" . $key;
				$result = SUtils::postUrl($url, []);
				if ($result['status'] == 0) {
					return $result["result"];
				} else {
					return [];
				}
			}
		}

	}