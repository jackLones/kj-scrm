<?php

	/**
	 * 登录
	 * User: xcy
	 * Date: 2019-09-11
	 * Time: 09:21
	 */

	namespace app\modules\api\controllers;

	use app\components\InvalidDataException;
	use app\components\InvalidParameterException;
	use app\models\AttachmentGroup;
	use app\models\Package;
	use app\models\SubUser;
	use app\models\User;
	use app\models\UserCorpRelation;
	use app\models\UserProfile;
	use app\models\WorkCorp;
	use app\models\WorkCorpAuth;
	use app\models\WorkProviderConfig;
	use app\models\WorkUser;
	use app\modules\api\components\BaseController;
	use app\util\DateUtil;
	use app\util\SmsUtil;
	use app\util\StringUtil;
	use app\util\SUtils;
	use app\util\WebhookUtil;
	use app\util\WorkUtils;
	use app\util\YouzanUtil;
	use yii\web\ForbiddenHttpException;
	use yii\web\MethodNotAllowedHttpException;

	class LoginController extends BaseController
	{
		public function behaviors ()
		{
			return parent::behaviors(); // TODO: Change the autogenerated stub
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/login/
		 * @title           用户注册
		 * @description     用户注册
		 * @method   post
		 * @url  http://{host_name}/api/login/register
		 *
		 * @param account  必选 string 手机号
		 * @param password 必选 string 密码
		 * @param code     必选 string 手机验证码
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: xingchangyu. Date: 2019/10/11 14:35
		 * @number          0
		 *
		 * @throws InvalidDataException
		 * @throws MethodNotAllowedHttpException
		 * @throws \Throwable
		 * @throws \yii\db\StaleObjectException
		 */
		public function actionRegister ()
		{
			if (\Yii::$app->request->isGet) {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
			$post     = \Yii::$app->request->post();
			$account  = !empty($post['account']) ? $post['account'] : '';
			$password = !empty($post['password']) ? $post['password'] : '';
			$type     = !empty($post['type']) ? $post['type'] : 0;
			$fromType = \Yii::$app->request->post('from_type', '');

			//帐号
			if (empty($account)) {
				throw new InvalidDataException('请输入手机号');
			} elseif (!preg_match("/^((13[0-9])|(14[0-9])|(15([0-9]))|(16([0-9]))|(17([0-9]))|(18[0-9])|(19[0-9]))\d{8}$/", $account)) {
				throw new InvalidDataException('请输入正确的手机号');
			}
			//验证码
			if (empty($fromType) || !in_array($fromType, \Yii::$app->params['safe_from'])) {
				if (empty($post['code'])) {
					throw new InvalidDataException('请输入正确的验证码');
				} else {
					$cache     = \Yii::$app->cache;
					$phoneData = !empty($cache['register_phone'][$account]) ? $cache['register_phone'][$account] : '';
					if (!($phoneData && $phoneData[0] == $post['code'] && (($_SERVER['REQUEST_TIME'] - $phoneData[1]) < 1800))) {
						throw new InvalidDataException('手机验证码不正确');
					}
				}
			}
			//密码
			if (empty($password)) {
				throw new InvalidDataException('请输入密码');
			} else {
				$length = strlen($password);
				if ($length < 6 || $length > 20) {
					throw new InvalidDataException('请输入6-20位密码');
				}
			}
			//保存
			try {
				$userInfo             = User::create($account, $password);
				$data                 = [];
				$userInfo             = User::refreshToken($account);
				$data['uid']          = $userInfo->uid;
				$data['nick_name']    = '';
				$data['avatar']       = '';
				$data['access_token'] = $userInfo->access_token;
				$data['authData']     = [];
				//设置默认分组
				AttachmentGroup::setNotGroup($userInfo->uid);

				WorkUtils::sendOpportunities($userInfo, $type);

				return $data;
			} catch (InvalidDataException $e) {
				return [
					'error'     => $e->getCode(),
					'error_msg' => $e->getMessage(),
				];
			}
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/login/
		 * @title           用户登录
		 * @description     用户登录
		 * @method   post
		 * @url  http://{host_name}/api/login/sign
		 *
		 * @param account  必选 string 手机号
		 * @param password 必选 string 密码
		 * @param autoLogin 可选 bool 三天内自动登录
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: xingchangyu. Date: 2019/10/11 14:37
		 * @number          0
		 *
		 * @throws InvalidDataException
		 * @throws MethodNotAllowedHttpException
		 * @throws \Throwable
		 * @throws \yii\db\StaleObjectException
		 */
		public function actionSign ()
		{
			if (\Yii::$app->request->isGet) {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
			$post    = \Yii::$app->request->post();
			$account = !empty($post['account']) ? $post['account'] : '';
			if (empty($account)) {
				throw new InvalidDataException('请输入手机号');
			}
			if (empty($post['password'])) {
				throw new InvalidDataException('请输入密码');
			}

			$autoLogin = \Yii::$app->request->post('autoLogin', false);

			//检测当前手机号是否在主账户和子账户中存在
			$has_user = User::checkAccount($account);
			if (empty($has_user)) {
				throw new InvalidDataException('无法登录，请检查手机号或密码是否正确');
			}

			$userResult = User::checkAccountPassword($account, $post['password']);
			$checkPwd   = $userResult['check'];

			if ($checkPwd) {
				$new_user     = $userResult['new_user'];
				$new_sub_user = $userResult['new_sub_user'];
				$userInfo     = $new_sub_user;
				$type         = 2;
				if (!empty($new_user)) {
					$userInfo = $new_user;
					$type     = 1;
					$res      = \Yii::$app->user->login($userInfo, 3600 * 24 * 30);
				} else {
					$res = \Yii::$app->subUser->login($userInfo, 3600 * 24 * 30);
				}
				if (!empty($res)) {
					//检查用户套餐
					$package = Package::getUserPackage($userInfo->uid);
					if ($package['error']) {
						throw new InvalidDataException($package['msg']);
					}
					//更新用户套餐
					//UserPackage::setUserPackage($userInfo->uid);
					//设置默认分组
					AttachmentGroup::setNotGroup($userInfo->uid);
					//用户数据
					$data   = [];
					$sub_id = 0;
					if ($type == 1) {
						$userInfo  = User::refreshToken($account, false, $autoLogin);
						$user_type = User::USER_TYPE;
					} else {
						$userInfo  = SubUser::refreshToken($account, $userInfo->uid, 0, $post['password'], false, $autoLogin);
						$user_type = SubUser::USER_TYPE;
						$sub_id    = $userInfo->sub_id;
					}
					$user                  = User::findOne($userInfo->uid);
					$data['masterAccount'] = $user->account;
					$data['type']          = $type;
					$data['sub_id']        = $sub_id;
					$data['uid']           = $userInfo->uid;
					$data['nick_name']     = '';
					$data['avatar']        = '';
					$data['access_token']  = base64_encode($user_type . '-' . $userInfo->access_token);
					$data['num']           = $userResult['num'];
					//获取用户详细信息
					if ($type == 1) {
						$proInfo = User::findIdentityByIdentifier($account, true);
						if (!empty($proInfo->userProfile)) {
							$data['nick_name'] = $proInfo->userProfile->nick_name;
							$data['avatar']    = $proInfo->userProfile->avatar;
						}
					}
					//获取公众号数据
					$authData         = User::getAuthData($userInfo->uid);
					$data['authData'] = $authData;
					$data['prod']     = !$this->develop;

					/*\Yii::$app->websocket->send([
						'channel' => 'push-message',
						'to'      => $userInfo->uid,
						'info'    => [
							'type'    => 'logout',
							'from'    => 'system',
							'message' => '该账号已在其他地点登录！如不是本人操作，请重新登录并修改密码！'
						]
					]);*/

					return $data;
				} else {
					throw new InvalidDataException('登录失败');
				}
			} else {
				throw new InvalidDataException('无法登录，请检查手机号或密码是否正确');
			}
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/login/
		 * @title           主帐号验证密码登录
		 * @description     主帐号验证密码登录
		 * @method   post
		 * @url  http://{host_name}/api/login/check-sign
		 *
		 * @param account  必选 string 手机号
		 * @param password 必选 string 密码
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: fulu. Date: 2019/6/1
		 * @number          0
		 *
		 * @throws InvalidDataException
		 * @throws MethodNotAllowedHttpException
		 * @throws \Throwable
		 * @throws \yii\db\StaleObjectException
		 */
		public function actionCheckSign ()
		{
			if (\Yii::$app->request->isGet) {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
			$post    = \Yii::$app->request->post();
			$account = !empty($post['account']) ? $post['account'] : '';
			if (empty($account)) {
				throw new InvalidDataException('请输入手机号');
			}
			if (empty($post['password'])) {
				throw new InvalidDataException('请输入密码');
			}

			//检测当前手机号是否在主账户
			$user = User::findOne(['account' => $account]);
			if (empty($user)) {
				throw new InvalidDataException('请检查手机号或密码是否正确');
			}

			$userResult = User::checkUserAccountPassword($account, $post['password']);
			$checkPwd   = $userResult['check'];

			if ($checkPwd) {
				$new_user = $userResult['new_user'];
				$type     = 1;
				$res      = '';
				if (!empty($new_user)) {
					$userInfo = $new_user;
					$res      = \Yii::$app->user->login($userInfo, 3600 * 24 * 30);
				}
				if (!empty($res)) {
					//检查用户套餐
					$package = Package::getUserPackage($userInfo->uid);
					if ($package['error']) {
						throw new InvalidDataException($package['msg']);
					}
					//更新用户套餐
					//UserPackage::setUserPackage($userInfo->uid);
					//设置默认分组
					AttachmentGroup::setNotGroup($userInfo->uid);
					//用户数据
					$data                  = [];
					$sub_id                = 0;
					$userInfo              = User::refreshToken($account);
					$user_type             = User::USER_TYPE;
					$user                  = User::findOne($userInfo->uid);
					$data['masterAccount'] = $user->account;
					$data['type']          = $type;
					$data['sub_id']        = $sub_id;
					$data['uid']           = $userInfo->uid;
					$data['nick_name']     = '';
					$data['avatar']        = '';
					$data['access_token']  = base64_encode($user_type . '-' . $userInfo->access_token);
					$data['num']           = $userResult['num'];
					//获取用户详细信息
					$proInfo = User::findIdentityByIdentifier($account, true);
					if (!empty($proInfo->userProfile)) {
						$data['nick_name'] = $proInfo->userProfile->nick_name;
						$data['avatar']    = $proInfo->userProfile->avatar;
					}
					//获取公众号数据
					$authData         = User::getAuthData($userInfo->uid);
					$data['authData'] = $authData;
					$data['prod']     = !$this->develop;

					return $data;
				} else {
					throw new InvalidDataException('登录失败');
				}
			} else {
				throw new InvalidDataException('无法登录，请检查密码是否正确');
			}
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/login/
		 * @title           自动登录
		 * @description     自动登录
		 * @method   post
		 * @url  http://{host_name}/api/login/quick-sign
		 *
		 * @param code 必选 string 随机码
		 *
		 * @return array
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: fulu. Date: 2020/6/22
		 * @number          0
		 *
		 * @throws InvalidDataException
		 * @throws \Throwable
		 * @throws \yii\db\StaleObjectException
		 */
		public function actionQuickSign ()
		{
			if (\Yii::$app->request->isPost) {
				$code = \Yii::$app->request->post('code');
				if (empty($code)) {
					throw new InvalidDataException("参数不正确");
				}

				$cache = \Yii::$app->cache;
				$uid   = !empty($cache[$code]) ? $cache[$code] : '';
				if (empty($uid)) {
					throw new InvalidDataException("数据错误");
				}
				$cache->delete($code);

				$data    = [];
				$user    = User::findOne($uid);
				$account = $user->account;
				if (empty($user->access_token)) {
					$userInfo = User::refreshToken($account);
				} else {
					$user->refreshTokenExpire();
					$userInfo = User::findOne($uid);
				}
				$user_type = User::USER_TYPE;

				$user                  = User::findOne($userInfo->uid);
				$data['type']          = 1;
				$data['sub_id']        = 0;
				$data['uid']           = $userInfo->uid;
				$data['masterAccount'] = $user->account;
				$data['account']       = $account;
				$data['nick_name']     = '';
				$data['avatar']        = '';
				$data['access_token']  = base64_encode($user_type . '-' . $userInfo->access_token);
				$data['num']           = 1;
				//获取用户详细信息
				$proInfo = $userInfo->userProfile;
				if (!empty($proInfo)) {
					$data['nick_name'] = $proInfo->nick_name;
					$data['avatar']    = $proInfo->avatar;
				}
				//获取公众号数据
				$authData         = User::getAuthData($userInfo->uid);
				$data['authData'] = $authData;
				$data['prod']     = !$this->develop;

				return $data;
			} else {
				throw new InvalidDataException("请求方式不正确");
			}
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/login/
		 * @title           获取手机验证码
		 * @description     获取手机验证码
		 * @method   post
		 * @url  http://{host_name}/api/login/get-code
		 *
		 * @param account      必选 string 手机号
		 * @param type         必选 string 获取手机验证码来源类型
		 * @param identifyCode 可选 string 当type=forgetPwd 必选
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: xingchangyu. Date: 2019/10/11 14:38
		 * @number          0
		 *
		 * @throws InvalidDataException
		 * @throws MethodNotAllowedHttpException
		 */
		public function actionGetCode ()
		{
			if (\Yii::$app->request->isGet) {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
			$post   = \Yii::$app->request->post();
			$mobile = !empty($post['account']) ? $post['account'] : '';
			if (empty($mobile)) {
				throw new InvalidDataException('请输入手机号码');
			} elseif (!preg_match("/^((13[0-9])|(14[0-9])|(15([0-9]))|(16([0-9]))|(17([0-9]))|(18[0-9])|(19[0-9]))\d{8}$/", $mobile)) {
				throw new InvalidDataException('请输入正确的手机号码');
			}
			$cache = \Yii::$app->cache;
			$type  = !empty($post['type']) ? $post['type'] : '';
			$time  = $_SERVER['REQUEST_TIME'];
			//图形验证码校验
			if ($type == 'forgetPwd') {
				if (empty($cache['identifyCode_' . $mobile])) {
					throw new InvalidDataException('请先输入图形验证码');
				} else {
					$identifyCode = trim($post['identifyCode']);
					if ($cache['identifyCode_' . $mobile] != strtolower($identifyCode)) {
						throw new InvalidDataException('图形验证码不正确');
					}
				}
			}
			//获取手机验证码时间限制
			if (!empty($cache['get_code_time_' . $mobile])) {
				$getCodeTime = $time - $cache['get_code_time_' . $mobile];
				if ($getCodeTime < 60) {
					throw new InvalidDataException('请' . (60 - $getCodeTime) . '秒之后再试');
				}
			}
			//生成手机验证码
			$string   = '0123456789';
			$count    = strlen($string) - 1;
			$rand_num = '';
			for ($i = 0; $i < 6; $i++) {
				$rand_num .= $string[mt_rand(0, $count)];
			}
			$mobileData   = [$mobile => [$rand_num, $time]];
			$seconds      = 1800;
			$validateTime = '30';
			if ($type == 'mainModifyPassword' || $type == 'subModifyPassword') {
				$seconds      = 7200;
				$validateTime = '120';
			}
			$cache->set($type . '_phone', $mobileData, $seconds);
			\Yii::error($mobileData, 'mobileData');
			$return_status = SmsUtil::sendSms($mobile, '您的验证码是：' . $rand_num . '。 此验证码' . $validateTime . '分钟内有效，请不要把验证码泄露给其他人。如非本人操作，可不用理会！',['code'=>$rand_num]);
			if ($return_status == 0 && strlen($return_status) == 1) {
				$cache->set('get_code_time_' . $mobile, $time, 60);

				return true;
			} elseif ($return_status == NULL) {
				throw new InvalidDataException('没有购买');
			} else {
				throw new InvalidDataException('短信发送失败,请稍后再试' . $return_status);
			}

		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/login/
		 * @title           获取图文验证码
		 * @description     获取图文验证码
		 * @method   post
		 * @url  http://{host_name}/api/login/identify-code
		 *
		 * @param account      必选 string 手机号
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: xingchangyu. Date: 2019/10/11 14:39
		 * @number          0
		 *
		 * @throws InvalidDataException
		 * @throws MethodNotAllowedHttpException
		 */
		public function actionIdentifyCode ()
		{
			if (\Yii::$app->request->isGet) {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
			$post   = \Yii::$app->request->post();
			$mobile = !empty($post['account']) ? $post['account'] : '';
			if (empty($mobile)) {
				throw new InvalidDataException('请输入手机号码');
			} elseif (!preg_match("/^((13[0-9])|(14[0-9])|(15([0-9]))|(16([0-9]))|(17([0-9]))|(18[0-9])|(19[0-9]))\d{8}$/", $mobile)) {
				throw new InvalidDataException('请输入正确的手机号码');
			}
			$image = imagecreatetruecolor(100, 30);//imagecreatetruecolor函数建一个真彩色图像
			//生成彩色像素
			$bgColor   = imagecolorallocate($image, 255, 255, 255);//白色背景
			$textcolor = imagecolorallocate($image, 0, 0, 255);//蓝色文本
			//填充函数，xy确定坐标，color颜色执行区域填充颜色
			imagefill($image, 0, 0, $bgColor);
			$identifyCode = "";//初始空值

			//该循环,循环取数
			for ($i = 0; $i < 4; $i++) {
				$fontSize    = 6;
				$x           = ($i * 25) + rand(5, 10);
				$y           = rand(5, 10);//位置随机
				$data        = 'abcdefghijkmnpqrstuvwxyz3456789';
				$fontContent = substr($data, rand(0, strlen($data) - 1), 1);
				$fontColor   = imagecolorallocate($image, rand(0, 100), rand(0, 100), rand(0, 100));//随机的rgb()值可以自己定
				imagestring($image, $fontSize, $x, $y, $fontContent, $fontColor); //水平地画一行字符串
				$identifyCode .= $fontContent;
			}
			$cache = \Yii::$app->cache;
			$cache->set('identifyCode_' . $mobile, $identifyCode);

			//该循环,循环画背景干扰的点
			for ($m = 0; $m <= 600; $m++) {
				$x2         = rand(1, 99);
				$y2         = rand(1, 99);
				$pointColor = imagecolorallocate($image, rand(0, 255), rand(0, 255), rand(0, 255));
				imagesetpixel($image, $x2, $y2, $pointColor);// 水平地画一串像素点
			}

			//该循环,循环画干扰直线
			for ($i = 0; $i <= 10; $i++) {
				$x1        = rand(0, 99);
				$y1        = rand(0, 99);
				$x2        = rand(0, 99);
				$y2        = rand(0, 99);
				$lineColor = imagecolorallocate($image, rand(0, 255), rand(0, 255), rand(0, 255));
				imageline($image, $x1, $y1, $x2, $y2, $lineColor);//画一条线段
			}
			ob_start();
			imagepng($image);
			$data = ob_get_contents();
			ob_end_clean();
			imagedestroy($image);
			if (!empty($data)) {
				$data = base64_encode($data);
				if ($data !== false) {
					return ["data:image/png;base64,$data"];
				}
			}
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/login/
		 * @title           忘记密码
		 * @description     忘记密码
		 * @method   post
		 * @url  http://{host_name}/api/login/forget-pwd
		 *
		 * @param account       必选 string 手机号
		 * @param identifyCode  必选 string 图形验证码
		 * @param code          必选 string 手机验证码
		 * @param step          必选 string 步骤 共两步 第一步：first
		 * @param password      必选 string 密码
		 * @param password2     必选 string 重复密码
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: xingchangyu. Date: 2019/10/11 14:41
		 * @number          0
		 *
		 * @throws InvalidDataException
		 * @throws MethodNotAllowedHttpException
		 */
		public function actionForgetPwd ()
		{
			if (\Yii::$app->request->isGet) {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
			$post            = \Yii::$app->request->post();
			$account         = !empty($post['account']) ? $post['account'] : '';
			$isMasterAccount = !empty($post['isMasterAccount']) ? $post['isMasterAccount'] : 1;
			$sub_id          = !empty($post['sub_id']) ? $post['sub_id'] : 0;
			if (empty($account)) {
				throw new InvalidDataException('请输入手机号码');
			} elseif (!preg_match("/^((13[0-9])|(14[0-9])|(15([0-9]))|(16([0-9]))|(17([0-9]))|(18[0-9])|(19[0-9]))\d{8}$/", $account)) {
				throw new InvalidDataException('请输入正确的手机号码');
			}
			$cache = \Yii::$app->cache;
			if (empty($post['identifyCode'])) {
				throw new InvalidDataException('请先输入图形验证码');
			} else {
				$identifyCode = trim($post['identifyCode']);
				if ($cache['identifyCode_' . $account] != strtolower($identifyCode)) {
					throw new InvalidDataException('图形验证码不正确');
				}
			}
			if (empty($post['code'])) {
				throw new InvalidDataException('请输入手机验证码');
			} else {
				$phoneData = $cache['forgetPwd_phone'][$account];
				if (!($phoneData && $phoneData[0] == $post['code'] && (($_SERVER['REQUEST_TIME'] - $phoneData[1]) < 1800))) {
					throw new InvalidDataException('手机验证码不正确');
				}
			}
			$step = !empty($post['step']) ? $post['step'] : '';
			if ($step == 'first') {//第一步
				return ['status' => 200, 'message' => 'SUCCESS', 'data' => ''];
			} else {//完成
				//检查是否有此用户
				if (empty($sub_id)) {
					throw new InvalidDataException('参数不正确');
				}
				if ($isMasterAccount == 1) {
					$user = User::findOne($sub_id);
				} else {
					$user = SubUser::findOne($sub_id);
				}
				if (empty($user)) {
					throw new InvalidDataException('请检查手机号或密码是否正确');
				}
				//密码
				$password = !empty($post['password']) ? $post['password'] : '';
				if (empty($password)) {
					throw new InvalidDataException('请输入新的密码');
				} else {
					$length = strlen($password);
					if ($length < 6 || $length > 20) {
						throw new InvalidDataException('请输入6-20位密码');
					}
				}
				$password2 = !empty($post['password2']) ? $post['password2'] : '';
				if ($password != $password2) {
					throw new InvalidDataException('两次输入的密码不一致');
				}
				$user->salt         = StringUtil::randomStr(6, true);
				$user->password     = StringUtil::encodePassword($user->salt, $password);
				$user->update_time  = DateUtil::getCurrentTime();
				$user->access_token = '';
				if ($user->save()) {
					return true;
				} else {
					throw new InvalidDataException(SUtils::modelError($user));
				}
			}
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/login/
		 * @title           点击登录时调用
		 * @description     获取当前手机号的子账号
		 * @method   post
		 * @url  http://{host_name}/api/login/get-account
		 *
		 * @param phone 必选 string 手机号
		 * @param password 必选 string 密码
		 *
		 * @return array|bool
		 *
		 * @return          {"error":0,"data":{"user_info":[{"{"error":0,"data":{"user_info":[{"account":"18712468083","uid":9,"company_name":null,"company_logo":null,"type":1},{"uid":"2","account":"18712468083","company_name":null,"company_logo":null,"type":2}],"count":2}}":"18712468083","uid":9,"company_name":null,"company_logo":null,"type":1},{"uid":"2","account":"18712468083","company_name":null,"company_logo":null,"type":2}],"count":2}}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 * @return_param    account string 手机号
		 * @return_param    uid int uid
		 * @return_param    company_name string 公司名称
		 * @return_param    company_logo string 公司logo
		 * @return_param    type int 1主账户2子账号
		 * @return_param    count int 数量
		 *
		 * @remark          Create by PhpStorm. User: wangpan. Date: 2020/2/23 16:43
		 * @number          0
		 *
		 * @throws InvalidDataException
		 */
		public function actionGetAccount ()
		{
			if (\Yii::$app->request->isPost) {
				$phone    = \Yii::$app->request->post('phone');
				$password = \Yii::$app->request->post('password');
				$password = $this->PassWordDecode($password);
				if (empty($phone) || empty($password)) {
					throw new InvalidDataException('参数不正确');
				}
				$kk       = 1;
				$userInfo = [];
				$user     = User::findOne(['account' => $phone]);
				if (!empty($user) && $user->status == User::NORMAL_USER) {
					$old_pass = $user->password;
					$new_pass = StringUtil::encodePassword($user->salt, $password);
					if ($new_pass === $old_pass) {
						$userPro                     = UserProfile::findOne(['uid' => $user->uid]);
						$userInfo[0]['id']           = strval($user->id);
						$userInfo[0]['account']      = $user->account;
						$userInfo[0]['uid']          = $user->uid;
						$userInfo[0]['company_name'] = $userPro->company_name;
						$userInfo[0]['company_logo'] = $userPro->company_logo;
						$userInfo[0]['type']         = 1;
						$userInfo[0]['key']          = $kk;
						$kk++;
					}
				}
				$subUserInfo = SubUser::find()->andWhere(['account' => $phone, 'status' => 1, 'type' => 0])->all();
				if (!empty($subUserInfo)) {
					$i = 0;
					if (!empty($userInfo)) {
						$i = 1;
					}
					/**
					 * @var int     $key
					 * @var SubUser $info
					 */
					foreach ($subUserInfo as $key => $info) {
						$old_pass = $info['password'];
						$new_pass = StringUtil::encodePassword($info['salt'], $password);
						if ($new_pass === $old_pass && $info->u->status == User::NORMAL_USER) {
							$user                         = UserProfile::findOne(['uid' => $info->uid]);
							$userInfo[$i]['id']           = strval($info->sub_id);
							$userInfo[$i]['uid']          = $info->uid;
							$userInfo[$i]['account']      = $info->account;
							$userInfo[$i]['company_name'] = $user->company_name;
							$userInfo[$i]['company_logo'] = $user->company_logo;
							$userInfo[$i]['type']         = 2;
							$userInfo[$i]['key']          = $kk;
							$i++;
							$kk++;
						}
					}
				}

				return [
					'user_info' => $userInfo,
					'count'     => count($userInfo),
				];
			} else {
				throw new InvalidDataException("请求方式不正确");
			}
		}

		public function PassWordDecode ($password)
		{
			$staticChars = "PXhw7UT1B0a9kQDKZsjIASmOezxYG4CHo5Jyfg2b8FLpEvRr3WtVnlqMidu6cN";
			$decodeChars = "";
			for ($i = 1; $i < strlen($password);) {
				$num0 = strpos($staticChars, $password[$i]);
				if ($num0 !== false) {
					$num1 = ($num0 + 59) % 62;
					$code = $staticChars[$num1];
				} else {
					$code = $password[$i];
				}
				$decodeChars .= $code;
				$i           += 3;
			}

			return $decodeChars;
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/login/
		 * @title           忘记密码时调用获取当前账户
		 * @description     忘记密码时调用获取当前账户
		 * @method   post
		 * @url  http://{host_name}/api/login/get-account-new
		 *
		 * @param phone 必选 int 手机号
		 *
		 * @return array
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: wangpan. Date: 2020/3/12 13:36
		 * @number          0
		 *
		 * @throws InvalidDataException
		 */
		public function actionGetAccountNew ()
		{
			if (\Yii::$app->request->isPost) {
				$phone = \Yii::$app->request->post('phone');
				if (empty($phone)) {
					throw new InvalidDataException('参数不正确');
				}
				$kk       = 1;
				$userInfo = [];
				$user     = User::findOne(['account' => $phone]);
				if (!empty($user)) {
					$userPro                     = UserProfile::findOne(['uid' => $user->uid]);
					$userInfo[0]['id']           = strval($user->id);
					$userInfo[0]['account']      = $user->account;
					$userInfo[0]['uid']          = $user->uid;
					$userInfo[0]['company_name'] = $userPro->company_name;
					$userInfo[0]['company_logo'] = $userPro->company_logo;
					$userInfo[0]['type']         = 1;
					$userInfo[0]['key']          = $kk;
					$kk++;
				}
				$subUserInfo = SubUser::find()->andWhere(['account' => $phone, 'type' => 0, 'status' => 1])->asArray()->all();
				if (!empty($subUserInfo)) {
					$i = 0;
					if (!empty($userInfo)) {
						$i = 1;
					}
					foreach ($subUserInfo as $key => $info) {
						$user                         = UserProfile::findOne(['uid' => $info['uid']]);
						$userInfo[$i]['id']           = strval($info['sub_id']);
						$userInfo[$i]['uid']          = $info['uid'];
						$userInfo[$i]['account']      = $info['account'];
						$userInfo[$i]['company_name'] = $user->company_name;
						$userInfo[$i]['company_logo'] = $user->company_logo;
						$userInfo[$i]['type']         = 2;
						$userInfo[$i]['key']          = $kk;
						$i++;
						$kk++;
					}
				}

				return [
					'user_info' => $userInfo,
					'count'     => count($userInfo),
				];
			} else {
				throw new InvalidDataException("请求方式不正确");
			}
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/login/
		 * @title           选择最后的账户
		 * @description     选择最后的账户
		 * @method   post
		 * @url  http://{host_name}/api/login/get-last-user
		 *
		 * @param id 必选 int 选择的账户id
		 * @param type 必选 int 1主账号2子账号
		 * @param autoLogin 可选 bool 三天内自动登录
		 *
		 * @return array
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: wangpan. Date: 2020/2/27 13:51
		 * @number          0
		 *
		 * @throws InvalidDataException
		 * @throws \Throwable
		 * @throws \yii\db\StaleObjectException
		 */
		public function actionGetLastUser ()
		{
			if (\Yii::$app->request->isPost) {
				$id   = \Yii::$app->request->post('id');
				$type = \Yii::$app->request->post('type');//1主账号2子账号
				if (empty($type) || empty($id)) {
					throw new InvalidDataException("参数不正确");
				}

				$autoLogin = \Yii::$app->request->post('autoLogin', false);

				$data   = [];
				$sub_id = 0;
				if ($type == 1) {
					$user      = User::findOne($id);
					$account   = $user->account;
					$userInfo  = User::refreshToken($account, false, $autoLogin);
					$user_type = User::USER_TYPE;
				} else {
					$sub_user  = SubUser::findOne($id);
					$account   = $sub_user->account;
					$userInfo  = SubUser::refreshToken($id, $sub_user->uid, 1, '', false, $autoLogin);
					$user_type = SubUser::USER_TYPE;
					$sub_id    = $userInfo->sub_id;
				}
				$user                  = User::findOne($userInfo->uid);
				$data['type']          = $type;
				$data['sub_id']        = $sub_id;
				$data['uid']           = $userInfo->uid;
				$data['masterAccount'] = $user->account;
				$data['account']       = $account;
				$data['nick_name']     = '';
				$data['avatar']        = '';
				$data['access_token']  = base64_encode($user_type . '-' . $userInfo->access_token);
				$data['num']           = 1;
				//获取用户详细信息
				if ($type == 1) {
					$proInfo = User::findIdentityByIdentifier($account, true);
					if (!empty($proInfo->userProfile)) {
						$data['nick_name'] = $proInfo->userProfile->nick_name;
						$data['avatar']    = $proInfo->userProfile->avatar;
					}
				}
				//获取公众号数据
				$authData         = User::getAuthData($userInfo->uid);
				$data['authData'] = $authData;
				$data['prod']     = !$this->develop;

				return $data;
			} else {
				throw new InvalidDataException("请求方式不正确");
			}
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/login/
		 * @title           企业微信登录
		 * @description     企业微信登录接口
		 * @method   POST
		 * @url  http://{host_name}/api/login/work-login
		 *
		 * @param auth_code 可选 string 登录返回的授权码
		 * @param provider_id 可选 int 服务商ID（默认1）
		 *
		 * @return          {"error":0,"data":{"masterAccount":"130****0955","phone":"130****0955","type":1,"sub_id":0,"uid":2,"nick_name":"总经理","avatar":null,"access_token":"TWFpblVzZ……ljYmIzZjZjNGY=","num":1,"authData":[{"author_id":"2","config_id":"1","authorizer_appid":"wx64d……cc38","authorizer_access_token":"31_zqalDM……hXrQsjeARWjiQHOOLJgAHDGDB","authorizer_access_token_expires":"1585133691","authorizer_refresh_token":"refreshtoken@@@36EV……BJOvs","func_info":"1,15,4,7,2,3,11,6,23","auth_type":"0","auth_mini_type":"0","authorizer_type":"authorized","authorizer_code":"queryauthcode@@@yYs0mbd0……j24d5UeueWt0g","authorizer_code_expires":"3168311474","pre_auth_code":"preauthcode@@@HrNIT79……Ehz5lBEynOzRRsKl","update_time":"2020-03-25 16:54:52","create_time":"2019-09-24 13:49:49","nick_name":"小猪的智慧店铺","head_img":"https://wx.qlogo.cn/mmopen/Sqqm3oJYw2g05K9phcYJwSwmVyuicyicOL6u5pc1OliaI7PSY7fick27sibqFLLSzGXlArMWMoEzH7xertibY2zic7drlw3DiborrJs0/0","user_name":"gh_a5a2b5c4f175","qrcode_url":"http://mmbiz.qpic.cn/mmbiz_jpg/yNRxJFCKeuABJug5Qqns1VcpD5BXtibr9HtSzKtdwHs3Nia1Qq8vK3TN5rMJNMAbNicAic37BJHvKmhnfnZOOPw8DA/0"}],"prod":false}}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: dovechen. Date: 2020/3/25 16:49
		 * @number          0
		 *
		 * @throws InvalidDataException
		 * @throws InvalidParameterException
		 * @throws \Throwable
		 * @throws \yii\db\StaleObjectException
		 */
		public function actionWorkLogin ()
		{
			if (\Yii::$app->request->isPost) {
				$providerId = \Yii::$app->request->post('provider_id', 1);
				$authCode   = \Yii::$app->request->post('auth_code', '');

				if (empty($authCode)) {
					throw new InvalidDataException("参数不正确");
				}

				try {
					$loginInfo = WorkProviderConfig::getLoginInfo($authCode, $providerId);
				} catch (InvalidDataException $e) {
					if (strpos($e->getMessage(), '"errcode":40029') !== false) {
						throw new InvalidParameterException('authCode 已失效，请重新登录');
					}

					throw new InvalidParameterException('登录失败，请重新登录');
				}

				$corpId   = $loginInfo['corp_info']['corpid'];
				$workCorp = WorkCorp::findOne(['corpid' => $corpId]);
				if (empty($workCorp)) {
					if ($loginInfo['usertype'] == 1) {
						throw new InvalidParameterException('您还没有账号请注册');
					} else {
						throw new InvalidParameterException('您还没有账号请联系贵公司的管理员注册');
					}
				} else {
					$corpAuthInfo = WorkCorpAuth::findOne(['corp_id' => $workCorp->id, 'auth_type' => ['change_auth', 'create_auth']]);
					if (empty($corpAuthInfo)) {
						throw new InvalidDataException('无可用授权关系，请先授权！');
					}
				}

				if (empty($workCorp->userCorpRelations)) {
					$cacheKey = md5($workCorp->corpid);
					\Yii::$app->cache->set($cacheKey, $workCorp->id, 86400);

					return [
						'error'     => 4003,
						'error_msg' => '该企业微信未绑定任何账号',
						'data'      => [
							'corp_id' => $cacheKey,
							'userid'  => $loginInfo['user_info']['userid'],
						],
					];
				}

				if ($loginInfo['usertype'] == 1 || empty($workCorp->workUsers)) {
					$account = $workCorp->userCorpRelations[0]->u->account;
				} else {
					$workUser = WorkUser::findOne(['corp_id' => $workCorp->id, 'userid' => $loginInfo['user_info']['userid']]);
					if (empty($workUser) || empty($workUser->mobile)) {
						throw new InvalidParameterException('账户未启用，无法登录');
					}

					$account = $workUser->mobile;
				}

				$subUser = SubUser::findOne(['uid' => $workCorp->userCorpRelations[0]->uid, 'account' => $account]);

				if (empty($subUser)) {
					throw new InvalidParameterException('该企业微信未绑定任何账号');
				}

				$loginType = SubUser::SUB_USER_SUB;
				if ($subUser->type == SubUser::SUB_USER_MAIN) {
					$loginType = SubUser::SUB_USER_MAIN;
					/** @var User $userInfo */
					$userInfo = $subUser->u;
					if ($userInfo->status != User::NORMAL_USER) {
						throw new InvalidParameterException('账户异常，无法登录');
					}

					$res = \Yii::$app->user->login($userInfo, 3600 * 24 * 30);
				} else {
					if ($subUser->status == SubUser::SUB_USER_CLOSE) {
						throw new InvalidParameterException('账户未启用，无法登录');
					} elseif ($subUser->status == SubUser::SUB_USER_FORBIDDEN) {
						throw new InvalidParameterException('账户已被禁用，无法登录');
					} else {
						/** @var SubUser $userInfo */
						$userInfo = $subUser;
						if ($subUser->status != User::NORMAL_USER) {
							throw new InvalidParameterException('账户异常，无法登录');
						}

						$res = \Yii::$app->subUser->login($userInfo, 3600 * 24 * 30);
					}
				}

				if (empty($res)) {
					throw new InvalidParameterException('登录失败');
				}

				//检查用户套餐
				$package = Package::getUserPackage($userInfo->uid);
				if ($package['error']) {
					throw new InvalidDataException($package['msg']);
				}
				//更新用户套餐
				//UserPackage::setUserPackage($userInfo->uid);
				//设置默认分组
				AttachmentGroup::setNotGroup($userInfo->uid);

				if ($loginType == SubUser::SUB_USER_MAIN) {
					/** @var User $userInfo */
					$userInfo  = User::refreshToken($userInfo->account);
					$user_type = User::USER_TYPE;
				} else {
					/** @var SubUser $userInfo */
					$userInfo  = SubUser::refreshToken($userInfo->account, $userInfo->uid);
					$user_type = SubUser::USER_TYPE;
				}

				//获取公众号数据
				$authData = User::getAuthData($userInfo->uid);

				$data = [
					'masterAccount' => $loginType == SubUser::SUB_USER_MAIN ? $userInfo->account : $userInfo->u->account,
					'phone'         => !empty($workUser) ? $workUser->mobile : $account,
					'type'          => $loginType == SubUser::SUB_USER_MAIN ? 1 : 2,
					'sub_id'        => $loginType == SubUser::SUB_USER_SUB ? $userInfo->sub_id : 0,
					'uid'           => $userInfo->uid,
					'nick_name'     => '',
					'avatar'        => '',
					'access_token'  => base64_encode($user_type . '-' . $userInfo->access_token),
					'num'           => 1,
					'authData'      => $authData,
					'prod'          => !$this->develop,
				];

				//获取用户详细信息
				if ($loginType == SubUser::SUB_USER_MAIN) {
					$proInfo = User::findIdentityByIdentifier($userInfo->account, true);
					if (!empty($proInfo->userProfile)) {
						$data['nick_name'] = $proInfo->userProfile->nick_name;
						$data['avatar']    = $proInfo->userProfile->avatar;
					}
				}

				return $data;
			} else {
				throw new InvalidDataException("请求方式不正确");
			}
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/login/
		 * @title           接口标题
		 * @description     接口描述
		 * @method   绑定帐号
		 * @url  http://{host_name}/api/login/work-bind-sign
		 *
		 * @param cacheKey 必选 string 加密键
		 * @param phone 必选 string 手机号
		 * @param code 必选 string 验证码
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: xingchangyu. Date: 2020-12-14 19:52
		 * @number          0
		 *
		 * @throws InvalidDataException
		 * @throws InvalidParameterException
		 * @throws MethodNotAllowedHttpException
		 * @throws \Throwable
		 * @throws \yii\db\StaleObjectException
		 */
		public function actionWorkBindSign ()
		{
			if (\Yii::$app->request->isGet) {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
			$cacheKey = \Yii::$app->request->post('cacheKey', '');//加密键
			$phone    = \Yii::$app->request->post('phone', '');//手机号
			$code     = \Yii::$app->request->post('code', '');//验证码
			$type     = \Yii::$app->request->post('type', 0);
			if (empty($cacheKey)) {
				throw new InvalidDataException('参数不正确！');
			}
			$bindCorpId = \Yii::$app->cache->get($cacheKey);
			if (empty($bindCorpId)) {
				throw new InvalidDataException('参数不正确！');
			}
			$workCorp = WorkCorp::findOne($bindCorpId);
			if (empty($workCorp)) {
				throw new InvalidDataException('参数不正确！');
			}
			//手机号
			if (empty($phone)) {
				throw new InvalidDataException('请输入手机号');
			} elseif (!preg_match("/^((13[0-9])|(14[0-9])|(15([0-9]))|(16([0-9]))|(17([0-9]))|(18[0-9])|(19[0-9]))\d{8}$/", $phone)) {
				throw new InvalidDataException('请输入正确的手机号');
			}
			//验证码
			if (empty($code)) {
				throw new InvalidDataException('请输入正确的验证码');
			} else {
				$cache     = \Yii::$app->cache;
				$phoneData = !empty($cache['bind_phone'][$phone]) ? $cache['bind_phone'][$phone] : '';
				if (!($phoneData && $phoneData[0] == $code && (($_SERVER['REQUEST_TIME'] - $phoneData[1]) < 1800))) {
					throw new InvalidDataException('手机验证码不正确');
				}
			}

			try {
				$userInfo = User::findIdentityByIdentifier($phone);
				if (!empty($userInfo)) {
					WorkUtils::checkCorpLimit($userInfo->uid, $bindCorpId);
					UserCorpRelation::setRelation($userInfo->uid, $bindCorpId);
					$package = Package::getUserPackage($userInfo->uid);
					if ($package['error']) {
						throw new InvalidDataException($package['msg']);
					}
					$password = !empty($userInfo->password) ? 1 : 0;
				} else {
					$userInfo = User::create($phone, '');
					UserCorpRelation::setRelation($userInfo->uid, $bindCorpId);
					//设置默认分组
					AttachmentGroup::setNotGroup($userInfo->uid);
					$password = 0;
				}
				$userInfo = User::refreshToken($phone);
				\Yii::$app->user->login($userInfo, 3600 * 24 * 30);
				$data                  = [];
				$data['masterAccount'] = $userInfo->account;
				$data['type']          = 1;
				$data['sub_id']        = 0;
				$data['uid']           = $userInfo->uid;
				$data['nick_name']     = '';
				$data['avatar']        = '';
				$data['access_token']  = base64_encode(User::USER_TYPE . '-' . $userInfo->access_token);
				$data['num']           = 1;
				$data['password']      = $password;

				//获取用户详细信息
				$proInfo = User::findIdentityByIdentifier($userInfo->account, true);
				if (!empty($proInfo->userProfile)) {
					$data['nick_name'] = $proInfo->userProfile->nick_name;
					$data['avatar']    = $proInfo->userProfile->avatar;
				}
				//获取公众号数据
				$authData         = User::getAuthData($userInfo->uid);
				$data['authData'] = $authData;

				WorkUtils::sendOpportunities($userInfo, $type);

				return $data;
			} catch (InvalidDataException $e) {
				return [
					'error'     => $e->getCode(),
					'error_msg' => $e->getMessage(),
				];
			}
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/login/
		 * @title           绑定修改密码
		 * @description     绑定修改密码
		 * @method   post
		 * @url  http://{host_name}/api/login/update-pwd
		 *
		 * @param uid 必选 string 帐号id
		 * @param password 必选 string 密码
		 * @param password2 必选 string 确认密码
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: xingchangyu. Date: 2020-12-14 20:04
		 * @number          0
		 *
		 * @throws InvalidDataException
		 * @throws MethodNotAllowedHttpException
		 */
		public function actionUpdatePwd ()
		{
			if (\Yii::$app->request->isGet) {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
			$uid       = \Yii::$app->request->post('uid', '');
			$password  = \Yii::$app->request->post('password');
			$password2 = \Yii::$app->request->post('password2');
			if (empty($uid)) {
				throw new InvalidDataException('参数不正确');
			}
			$user = User::findOne($uid);
			if (empty($user)) {
				throw new InvalidDataException('参数不正确');
			}
			if (empty($password)) {
				throw new InvalidDataException('请输入新的密码');
			} else {
				$length = strlen($password);
				if ($length < 6 || $length > 20) {
					throw new InvalidDataException('请输入6-20位密码');
				}
			}
			if ($password != $password2) {
				throw new InvalidDataException('两次输入的密码不一致');
			}
			$user->salt        = StringUtil::randomStr(6, true);
			$user->password    = StringUtil::encodePassword($user->salt, $password);
			$user->update_time = DateUtil::getCurrentTime();
			if ($user->save()) {
				return true;
			} else {
				throw new InvalidDataException(SUtils::modelError($user));
			}
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/login/
		 * @title           获取有赞店铺绑定状态
		 * @description     获取有赞店铺绑定状态
		 * @method   post
		 * @url  http://{host_name}/api/login/youzan-shop-bind
		 *
		 * @param userToken 必选 string 有赞信息
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 * @return_param    type int 绑定状态1当前店铺已绑定、2当前店铺未绑定
		 * @return_param    account srting 已绑定的帐号（type=1时返回）
		 *
		 * @remark          Create by PhpStorm. User: fulu. Date: 2020/05/28
		 * @number          0
		 *
		 * @throws InvalidDataException
		 */
		public function actionYouzanShopBind ()
		{
			if (\Yii::$app->request->isPost) {
				$useToken = \Yii::$app->request->post('userToken');

				if (empty($useToken)) {
					throw new InvalidDataException('缺少必要参数！');
				}

				$youzan     = new YouzanUtil();
				$youzanInfo = $youzan->getShopByUseToken($useToken);

				if (!isset($youzanInfo['kdtId']) || empty($youzanInfo['kdtId'])) {
					throw new InvalidDataException('userToken数据错误！');
				}

				$info = $youzan->bindYouzanShop($youzanInfo['kdtId'], '');

				return $info;
			} else {
				throw new InvalidDataException('请求方式不允许！');
			}
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/login/
		 * @title           刷新token
		 * @description     刷新token
		 * @method   POST
		 * @url  http://{host_name}/api/login/refresh-token
		 *
		 * @param uid 可选 int 主账户ID（不可和子账户同时为空）
		 * @param sub_id 可选 int 子账户ID（不可和主账户同时为空）
		 *
		 * @return          {"error":0,"data":{"access_token":"fdssaewergwrewr8y79790wfuewewgwerwq"}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 * @return_param    access_token string 用户的accessToken
		 *
		 * @remark          Create by PhpStorm. User: dovechen. Date: 2020/8/17 09:41
		 * @number          0
		 *
		 * @throws ForbiddenHttpException
		 * @throws InvalidParameterException
		 * @throws MethodNotAllowedHttpException
		 * @throws \Throwable
		 * @throws \yii\db\StaleObjectException
		 */
		public function actionRefreshToken ()
		{
			if (\Yii::$app->request->isPost) {
				if (
					strpos(str_replace('http://', 'https://', \Yii::$app->request->getReferrer()), str_replace('http://', 'https://', \Yii::$app->params['web_url'])) !== false
					|| strpos(str_replace('http://', 'https://', \Yii::$app->request->getReferrer()), 'http://hf.pigcms.com') !== false
				) {
					$uid   = \Yii::$app->request->post('uid');
					$subId = \Yii::$app->request->post('sub_id');

					if (empty($uid) && empty($subId)) {
						throw new InvalidParameterException('缺少必要参数');
					}

					$accessToken = '';

					if (!empty($subId)) {
						$subUser = SubUser::findOne($subId);
						if (!empty($subUser)) {
							if (empty($subUser->access_token)) {
								SubUser::refreshToken($subUser->account, $subUser->uid);
							} else {
								$subUser->refreshTokenExpire();
							}

							$accessToken = base64_encode(SubUser::USER_TYPE . '-' . $subUser->access_token);
						}
					} else {
						$user = User::findOne($uid);

						if (!empty($user)) {
							if (empty($user->access_token)) {
								User::refreshToken($user->uid);
							} else {
								$user->refreshTokenExpire();
							}

							$accessToken = base64_encode(User::USER_TYPE . '-' . $user->access_token);
						}
					}

					return ['access_token' => $accessToken];
				} else {
					throw new ForbiddenHttpException('非法的请求');
				}

			} else {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
		}

		public function actionGetLoginUrl ()
		{
			if (\Yii::$app->request->isGet) {
				$authCode = \Yii::$app->request->get('auth_code', '');
				if (empty($authCode)) {
					throw new ForbiddenHttpException('非法的请求');
				}

				$accessTokenData = explode('-', base64_decode($authCode));

				if (count($accessTokenData) > 1) {
					$userType    = $accessTokenData[0];
					$accessToken = $accessTokenData[1];
				} else {
					throw new ForbiddenHttpException('非法的请求1');
				}

				if ($userType == SubUser::USER_TYPE) {
					throw new ForbiddenHttpException('非法的请求2');
				}

				$user = User::findIdentityByAccessToken($accessToken);
				if (empty($user)) {
					throw new InvalidDataException('参数不正确');
				}

				$randNumber = StringUtil::randomStr(10);
				\Yii::$app->cache->set($randNumber, $user->uid, 10);

				return [
					'url' => \Yii::$app->params['scrm_url'] . '/passLogin?code=' . $randNumber,
				];
			} else {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
		}

		public function actionGetAccessToken ()
		{
			if (\Yii::$app->request->isPost) {
				$account  = \Yii::$app->request->post('account', '');
				$password = \Yii::$app->request->post('password', '');
				if (empty($account) || empty($password)) {
					throw new InvalidDataException('参数不正确');
				}

				$userResult = User::checkAccountPassword($account, $password);
				$checkPwd   = $userResult['check'];

				if ($checkPwd) {
					/** @var User $mainUser */
					$mainUser = $userResult['new_user'];
					/** @var SubUser $subUser */
					$subUser = $userResult['new_sub_user'];
					if (!empty($mainUser)) {
						if (empty($mainUser->access_token) || $mainUser->access_token_expire < time()) {
							$mainUser = User::refreshToken($account);
						}

						$result = ['access_token' => base64_encode(User::USER_TYPE . '-' . $mainUser->access_token)];
					} else {
						if (empty($subUser->access_token) || $subUser->access_token_expire < time()) {
							$subUser = SubUser::refreshToken($account, $subUser->uid);
						}
						$result = ['access_token' => base64_encode(SubUser::USER_TYPE . '-' . $subUser->access_token)];
					}

					return $result;
				} else {
					throw new InvalidDataException('无法登录，请检查手机号或密码是否正确');
				}
			} else {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
		}
	}
