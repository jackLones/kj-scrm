<?php
	/**
	 * 参数二维码表
	 * User: xcy
	 * Date: 2019-09-17
	 * Time: 15:21
	 */

	namespace app\modules\api\controllers;

	use app\models\Article;
	use app\models\Attachment;
	use app\models\AttachmentGroup;
	use app\models\FansTimeLine;
	use app\models\SceneStatistic;
	use app\models\SceneUserDetail;
	use app\models\UserAuthorRelation;
	use app\models\WxAuthorizeInfo;
	use app\modules\api\components\AuthBaseController;
	use yii\db\Expression;
	use yii\web\MethodNotAllowedHttpException;
	use app\models\Scene;
	use app\models\Tags;
	use app\models\Fans;
	use app\models\SceneTags;
	use app\models\ReplyInfo;
	use app\models\WxAuthorize;
	use app\models\Material;
	use app\models\Package;
	use app\components\InvalidDataException;
	use app\components\InvalidParameterException;
	use app\util\SUtils;
	use app\util\DateUtil;
	use callmez\wechat\sdk\Wechat;
	use app\util\QRcode;
	use moonland\phpexcel\Excel;

	class SceneController extends AuthBaseController
	{
		public function behaviors ()
		{
			return parent::behaviors(); // TODO: Change the autogenerated stub
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/scene/
		 * @title           参数二维码列表
		 * @description     参数二维码列表
		 * @method   post
		 * @url  http://{host_name}/api/scene/list
		 *
		 * @param wx_id 必选 string 公众号唯一ID
		 * @param page 可选 int 页数 默认为1
		 * @param pageSize 可选 int 每页个数 默认10
		 * @param title 可选 string 二维码名称
		 * @param type 可选 int 二维码类型：0、全部，1、永久，2、临时
		 * @param status 可选 int 二维码状态：1、过期，2、可用
		 *
		 * @return          {"error":0,"data":{"count":"2","scene":[{"id":"8","author_id":"2","title":"测试345","action_name":"QR_SCENE","scene_id":"100003","scene_str":null,"scene_expire":"2592000","ticket":"gQFs8DwAAAAAAAAAAS5odHRwOi8vd2VpeGluLnFxLmNvbS9xLzAyYzVlUU56c1ZmZGwxLVlqUmh0MUcAAgS8Rs5dAwQAjScA","url":"http://weixin.qq.com/q/02c5eQNzsVfdl1-YjRht1G","status":"0","push_type":"1","create_time":"2019-11-15 14:33:32","reply_sort":"","local_path":"/upload/qrcode/20191115/15737996125dce46bc3f23e.jpg","nick_name":"小猪的智慧店铺","head_img":"http://wx.qlogo.cn/mmopen/qbvaL9taELsfibgnbr0jBxaiayVy2GNE3HY0SrusXbQmVeBBpDzFF8VOibSBCshTIu6lPX5O10UBNwZBibGRicqGo6WkWPccHJZaV/0","user_name":"gh_a5a2b5c4f175","qrcode_url":"http://mmbiz.qpic.cn/mmbiz_jpg/yNRxJFCKeuABJug5Qqns1VcpD5BXtibr9HtSzKtdwHs3Nia1Qq8vK3TN5rMJNMAbNicAic37BJHvKmhnfnZOOPw8DA/0","tag_ids":null,"key":0,"is_overdue":0,"expire_time":"2019-12-15","tag_name":[],"scan_times":"19","subscribe":"1","unsubscribe":"3"}]}}
		 *
		 * @return_param    error int 状态码
		 * @return_param    error_msg string 错误信息
		 * @return_param    data array 结果数据
		 * @return_param    count string 总数量
		 * @return_param    scene array 渠道二维码数据
		 * @return_param    id int 场景值ID
		 * @return_param    author_id int 公众号ID
		 * @return_param    title string 二维码标题
		 * @return_param    action_name string 二维码类型，QR_SCENE为临时的整型参数值，QR_STR_SCENE为临时的字符串参数值，QR_LIMIT_SCENE为永久的整型参数值，QR_LIMIT_STR_SCENE为永久的字符串参数值
		 * @return_param    scene_str string 场景值ID（字符串形式的ID），字符串类型，长度限制为1到64
		 * @return_param    scene_expire string 该二维码有效时间
		 * @return_param    ticket string 获取的二维码ticket，凭借此ticket可以在有效时间内换取二维码。
		 * @return_param    url string 二维码图片解析后的地址，开发者可根据该地址自行生成需要的二维码图片
		 * @return_param    status string 是否启用，1：启用、0：不启用
		 * @return_param    push_type string 推送方式，1：随机推送一条、2：全部推送
		 * @return_param    create_time string 创建时间
		 * @return_param    local_path string 二维码图片本地地址
		 * @return_param    nick_name string 授权方昵称
		 * @return_param    head_img string 授权方头像
		 * @return_param    user_name string 授权方公众号的原始ID
		 * @return_param    qrcode_url string 二维码地址
		 * @return_param    tag_ids array 二维码标签ID集合
		 * @return_param    key int 键值
		 * @return_param    is_overdue int 是否过期：0未过期、1已过期
		 * @return_param    expire_time string 到期时间
		 * @return_param    tag_name array 粉丝标签名称
		 * @return_param    id string 标签ID
		 * @return_param    name string 粉丝标签名称
		 * @return_param    scan_times int 扫码次数
		 * @return_param    subscribe int 关注人数
		 * @return_param    unsubscribe int 取关人数
		 *
		 * @remark          Create by PhpStorm. User: xingchangyu. Date: 2019-10-13 17:02
		 * @number          1
		 *
		 * @throws InvalidParameterException
		 * @throws MethodNotAllowedHttpException
		 */
		public function actionList ()
		{
			if (\Yii::$app->request->isGet) {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
			$post      = \Yii::$app->request->post();
			$author_id = $this->wxAuthorInfo->author_id;
			if (empty($author_id)) {
				throw new InvalidParameterException('缺少必要参数！');
			}
			//获取标签数据
			$tagData = Tags::find()->where(['author_id' => $author_id])->all();
			$tagData = array_column($tagData, 'name', 'id');

			//获取参数二维码数据
			$sceneData = Scene::find()->alias('s');
			$sceneData = $sceneData->leftJoin('{{%scene_tags}} st', '`st`.`scene_id` = `s`.`id`');
			$sceneData = $sceneData->select('s.*,group_concat(`st`.`tag_id`) as tag_ids');
			$sceneData = $sceneData->where(['s.author_id' => $author_id]);
			$sceneData = $sceneData->orderBy('s.id desc');
			//二维码名称
			if (!empty($post['title'])) {
				$sceneData = $sceneData->andWhere(['like', 's.title', $post['title']]);
			}
			//二维码类型
			if (!empty($post['type'])) {
				if ($post['type'] == 1) {
					$sceneData = $sceneData->andWhere(['s.scene_expire' => '']);
				} elseif ($post['type'] == 2) {
					$sceneData = $sceneData->andWhere(['>', 's.scene_expire', '0']);
				}
			}
			//二维码状态
			if (!empty($post['status'])) {
				$time    = time() - 2592000;
				$timeStr = date('Y-m-d H:i:s', $time);
				if ($post['status'] == 1) {
					$sceneData = $sceneData->andWhere(['and', ['<', 's.create_time', $timeStr], ['>', 's.scene_expire', 0]]);
				} elseif ($post['status'] == 2) {
					$sceneData = $sceneData->andWhere(['or', ['>', 's.create_time', $timeStr], ['s.scene_expire' => '']]);
				}
			}
			$sceneData = $sceneData->groupBy('s.id');
			//分页
			$page      = \Yii::$app->request->post('page') ?: 1;
			$pageSize  = \Yii::$app->request->post('pageSize') ?: 10;
			$offset    = ($page - 1) * $pageSize;
			$count     = $sceneData->count();
			$sceneData = $sceneData->limit($pageSize)->offset($offset)->asArray()->all();
			$time      = time();
			foreach ($sceneData as $sk => $sv) {
				$sceneData[$sk]['key']        = $sk;
				$sceneData[$sk]['is_overdue'] = 0;
				if (!empty($sv['scene_expire'])) {
					$expire_time                   = strtotime("+30 days " . $sv['create_time']);
					$sceneData[$sk]['expire_time'] = date('Y-m-d H:i:s', $expire_time);
					if ($expire_time < $time) {
						$sceneData[$sk]['expire_time'] .= '（已到期）';
						$sceneData[$sk]['is_overdue']  = 1;
					}
				} else {
					$sceneData[$sk]['expire_time'] = '永久有效';
				}
				//获取标签名
				if (!empty($sv['tag_ids'])) {
					$tagIdArr                  = explode(',', $sv['tag_ids']);
					$sceneData[$sk]['tag_ids'] = $tagIdArr;
					$tagName                   = [];
					foreach ($tagIdArr as $tv) {
						if (!empty($tagData[$tv])) {
							array_push($tagName, [
								'id'   => $tv,
								'name' => $tagData[$tv],
							]);
						}
					}
					$sceneData[$sk]['tag_name'] = $tagName;
				} else {
					$sceneData[$sk]['tag_name'] = [];
				}
				//扫码次数
				$scan_times                   = FansTimeLine::find()->where(['scene_id' => $sv['id'], 'event' => ['subscribe', 'scan']])->andWhere(['>', 'event_time', $sv['create_time']])->count();
				$sceneData[$sk]['scan_times'] = $scan_times;
				//获取关注行为人数
				$subscribe                   = FansTimeLine::find()->where(['scene_id' => $sv['id'], 'event' => 'subscribe'])->andWhere(['>', 'event_time', $sv['create_time']])->groupBy('fans_id')->count();
				$sceneData[$sk]['subscribe'] = $subscribe;
				//取关行为人数
				$unsubscribe                   = FansTimeLine::find()->where(['scene_id' => $sv['id'], 'event' => 'unsubscribe'])->andWhere(['>', 'event_time', $sv['create_time']])->groupBy('fans_id')->count();
				$sceneData[$sk]['unsubscribe'] = $unsubscribe;
			}

			return [
				'count' => $count,
				'scene' => $sceneData,
			];
		}

		/**
		 * showdoc
		 * @catalog          数据接口/api/scene/
		 * @title            参数二维码详情
		 * @description      参数二维码详情
		 * @method   post
		 * @url  http://{host_name}/api/scene/detail
		 *
		 * @param scene_id 必选  string 场景值ID
		 *
		 * @return           {"error":0,"data":{"id":6,"author_id":1,"title":"测试3","action_name":"QR_STR_SCENE","scene_str":"pig_6","scene_expire":"2592000","ticket":"gQG-8DwAAAAAAAAAAS5odHRwOi8vd2VpeGluLnFxLmNvbS9xLzAyZU5NazlqM2ZkYzMxTGdYTU50Y0MAAgTQboldAwQAjScA","url":"http://weixin.qq.com/q/02eNMk9j3fdc31LgXMNtcC","status":1,"push_type":1,"create_time":"2019-09-24 09:18:08","expire_time":"2019-12-24","tagName":["发券"],"replyList":{"5":{"type":0,"mediaID":null,"material_id":null,"url":""}}}}
		 *
		 * @return_param     error int 状态码
		 * @return_param     error_msg string 错误信息
		 * @return_param     data array 结果数据
		 * @return_param     id int 场景值ID
		 * @return_param     author_id int 公众号ID
		 * @return_param     title string 二维码标题
		 * @return_param     action_name string 二维码类型，QR_SCENE为临时的整型参数值，QR_STR_SCENE为临时的字符串参数值，QR_LIMIT_SCENE为永久的整型参数值，QR_LIMIT_STR_SCENE为永久的字符串参数值
		 * @return_param     scene_str string 场景值ID（字符串形式的ID），字符串类型，长度限制为1到64
		 * @return_param     scene_expire string 该二维码有效时间
		 * @return_param     status string 是否启用，1：启用、0：不启用
		 * @return_param     create_time string 创建时间
		 * @return_param     local_path string 二维码图片本地地址
		 * @return_param     expire_time string 到期时间
		 * @return_param     nick_name string 公众号昵称
		 * @return_param     tagName array 粉丝标签名称
		 * @return_param     replyList array 回复数据
		 * @return_param     type int  1：文本（text）、2：图片（img）、3：语音（voice）、4：视频（video）、5：图文（news）
		 * @return_param     title string  标题
		 * @return_param     digest string  摘要
		 * @return_param     content_url string  正文的URL
		 * @return_param     url string  图片地址
		 *
		 *
		 * @remark           Create by PhpStorm. User: xingchangyu. Date: 2019-10-13 17:30
		 * @number           0
		 *
		 * @throws InvalidDataException
		 * @throws InvalidParameterException
		 * @throws MethodNotAllowedHttpException
		 */
		public function actionDetail ()
		{
			if (\Yii::$app->request->isGet) {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
			$scene_id = \Yii::$app->request->post('scene_id');
			if (empty($scene_id)) {
				throw new InvalidParameterException('缺少必要参数！');
			}
			$sceneInfo = Scene::findOne($scene_id);
			if (empty($sceneInfo)) {
				throw new InvalidDataException('参数不正确');
			}
			$data = $sceneInfo->attributes;
			//过期时间
			$time = time();
			if (!empty($data['scene_expire'])) {
				$expire_time = strtotime("+30 days " . $data['create_time']);
				if ($expire_time > $time) {
					$data['expire_time'] = date('Y-m-d H:i:s', $expire_time);
				} else {
					$data['expire_time'] = '已到期';
				}
			} else {
				$data['expire_time'] = '永久有效';
			}
			//公众号名称
			$wxInfo            = WxAuthorizeInfo::find()->where(['author_id' => $data['author_id']])->one();
			$data['nick_name'] = !empty($wxInfo['nick_name']) ? $wxInfo['nick_name'] : '';
			//获取标签数据
			$sceneTags       = SceneTags::find()->alias('s');
			$sceneTags       = $sceneTags->leftJoin('{{%tags}} t', 's.tag_id = t.id');
			$sceneTags       = $sceneTags->where(['s.scene_id' => $scene_id]);
			$sceneTags       = $sceneTags->select('t.*')->asArray()->all();//createCommand()->getRawSql()
			$tagName         = array_column($sceneTags, 'name');
			$data['tagName'] = $tagName;

			//回复内容
			$replyList = [];
			if ($sceneInfo['status'] == 1) {
				if (!empty($sceneInfo->reply_sort)) {
					$replyInfo = ReplyInfo::find()->where('id in(' . $sceneInfo->reply_sort . ')')->orderBy(["FIELD(id," . $sceneInfo->reply_sort . ")" => true])->asArray()->all();
					foreach ($replyInfo as $rv) {
						if ($rv['type'] == 5) {
							if (!isset($tempId)) {
								$tempId                     = $rv['id'];
								$replyList[$tempId]['type'] = $rv['type'];
							}
							if (!empty($rv['material_id']) && empty($rv['title'])) {
								$material = Material::findOne(['id' => $rv['material_id']]);
								$article  = Article::find()->alias('a');
								$article  = $article->leftJoin('{{%material}} m', 'm.id = a.thumb_media_id');
								$article  = $article->where(['a.id' => $material->article_sort])->select('a.title,a.digest,a.content_source_url,m.local_path')->asArray()->one();

								if (strpos($article['local_path'], 'http') === false) {
									$article['local_path'] = \Yii::$app->params['site_url'] . $article['local_path'];
								}

								$replyList[$tempId]['content'][] = ['id' => $rv['id'], 'type' => $rv['type'], 'title' => $article['title'], 'digest' => $article['digest'], 'content_url' => $article['content_source_url'], 'cover_url' => $article['local_path'], 'is_use' => 0];
							} else {
								if (strpos($rv['cover_url'], 'http') === false) {
									$rv['cover_url'] = \Yii::$app->params['site_url'] . $rv['cover_url'];
								}

								$replyList[$tempId]['content'][] = ['id' => $rv['id'], 'type' => $rv['type'], 'title' => $rv['title'], 'digest' => $rv['digest'], 'content_url' => $rv['content_url'], 'cover_url' => $rv['cover_url'], 'is_use' => 1];
							}
						} elseif ($rv['type'] == 1) {
							$replyList[$rv['id']] = ['type' => $rv['type'], 'content' => rawurldecode($rv['content'])];
						} else {
							$temp                 = Attachment::findOne(['id' => $rv['attachment_id']]);
							$cover_url            = !empty($temp->local_path) ? $temp->local_path : '';
							$replyList[$rv['id']] = ['type' => $rv['type'], 'mediaID' => $rv['content'], 'material_id' => $rv['material_id'], 'cover_url' => $cover_url, 'file_name' => $temp->file_name];
						}
					}
				}
			}
			$replyList         = array_values($replyList);
			$data['replyList'] = $replyList;

			return $data;
		}

		/**
		 * showdoc
		 * @catalog              数据接口/api/scene/
		 * @title                参数二维码修改数据
		 * @description          参数二维码修改数据
		 * @method   请求方式
		 * @url  http://{host_name}/api/scene/info
		 *
		 * @param scene_id 必选  string 场景值ID
		 *
		 * @return               {"error":0,"data":{"id":6,"author_id":1,"title":"测试3","action_name":"QR_STR_SCENE","scene_str":"pig_6","scene_expire":"2592000","ticket":"gQG-8DwAAAAAAAAAAS5odHRwOi8vd2VpeGluLnFxLmNvbS9xLzAyZU5NazlqM2ZkYzMxTGdYTU50Y0MAAgTQboldAwQAjScA","url":"http://weixin.qq.com/q/02eNMk9j3fdc31LgXMNtcC","status":1,"push_type":1,"create_time":"2019-09-24 09:18:08","time_type":1,"tagList":[{"id":"1","name":"星标组","is_checked":0},{"id":"2","name":"发券","is_checked":1}],"replyList":{"5":{"type":5,"content":[{"type":5,"title":"123","digest":"111","content_url":null,"mediaID":null,"material_id":null,"url":""},{"type":5,"title":"4566","digest":"23344","content_url":null,"mediaID":null,"material_id":54,"url":""}]}}}}
		 *
		 * @return_param         error int 状态码
		 * @return_param         error_msg string 错误信息
		 * @return_param         data array 结果数据
		 * @return_param         id int 场景值ID
		 * @return_param         author_id int 公众号ID
		 * @return_param         title string 二维码标题
		 * @return_param         action_name string 二维码类型，QR_SCENE为临时的整型参数值，QR_STR_SCENE为临时的字符串参数值，QR_LIMIT_SCENE为永久的整型参数值，QR_LIMIT_STR_SCENE为永久的字符串参数值
		 * @return_param         scene_str string 场景值ID（字符串形式的ID），字符串类型，长度限制为1到64
		 * @return_param         scene_expire string 该二维码有效时间
		 * @return_param         status string 是否启用，1：启用、0：不启用
		 * @return_param         push_type int 1：随机推送一条、2：全部推送
		 * @return_param         time_type int 1：临时、2：永久
		 * @return_param         create_time string 创建时间
		 * @return_param         tagList array 粉丝标签
		 * @return_param         replyList array 回复数据
		 * @return_param         id int 序号
		 * @return_param         typeValue int  1：文本（text）、2：图片（img）、3：语音（voice）、4：视频（video）、5：图文（news）
		 * @return_param         file_name string  素材名称
		 * @return_param         material_id int  素材id
		 * @return_param         local_path array  素材地址
		 * @return_param         img string  图片素材地址
		 * @return_param         audio string  音频、视频素材地址
		 * @return_param         textAreaValueHeader string  文本内容
		 * @return_param         sketchList array  图文数据
		 * @return_param         id int 序号
		 * @return_param         addType int 是否自己设置：0、否，1是
		 * @return_param         inputTitle string 图文标题
		 * @return_param         digest string 图文描述
		 * @return_param         content_source_url string 跳转地址
		 * @return_param         material_id string 素材id
		 * @return_param         local_path array  素材地址
		 * @return_param         img string  图片素材地址
		 * @return_param         audio string  音频、视频素材地址
		 *
		 * @remark               Create by PhpStorm. User: win7. Date: 2019-10-13 17:43
		 * @number               0
		 *
		 * @throws InvalidDataException
		 * @throws InvalidParameterException
		 * @throws MethodNotAllowedHttpException
		 */
		public function actionInfo ()
		{
			if (\Yii::$app->request->isGet) {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
			$scene_id = \Yii::$app->request->post('scene_id');
			if (empty($scene_id)) {
				throw new InvalidParameterException('缺少必要参数！');
			}
			$scene = Scene::findOne($scene_id);
			if (empty($scene)) {
				throw new InvalidDataException('参数不正确');
			}

			$data = $scene->attributes;
			if (!empty($data['scene_expire'])) {
				$data['time_type'] = 1;
			} else {
				$data['time_type'] = 2;
			}
			//获取已选择标签数据
			$tagIds = array_column($scene->sceneTags, 'tag_id');
//			//获取全部标签
//			$tagList = Tags::find()->where(['author_id' => $data['author_id']])->select('id,name')->asArray()->all();
//			foreach ($tagList as $tk => $tv) {
//				if (in_array($tv['id'], $tagIds)) {
//					$tagList[$tk]['is_checked'] = 1;
//				} else {
//					$tagList[$tk]['is_checked'] = 0;
//				}
//			}
			$data['tagIds'] = implode(',', $tagIds);
			$site_url       = \Yii::$app->params['site_url'];
			//消息数据
			$replyList = [];
			if (!empty($scene->reply_sort)) {
				$replyInfo = ReplyInfo::find()->where('id in(' . $scene->reply_sort . ')')->orderBy(["FIELD(id," . $scene->reply_sort . ")" => true])->asArray()->all();
				$typeNum   = 0;
				$sketchId  = 0;
				foreach ($replyInfo as $rv) {
					if ($rv['type'] == 5) {
						if (!isset($tempId)) {
							$tempId                                    = $rv['id'];
							$replyList[$tempId]['id']                  = $typeNum;
							$replyList[$tempId]['typeValue']           = 5;
							$replyList[$tempId]['file_name']           = '';
							$replyList[$tempId]['material_id']         = 0;
							$replyList[$tempId]['local_path']          = ['img' => '', 'audio' => ''];
							$replyList[$tempId]['textAreaValueHeader'] = '';
							$typeNum++;
						}
						if (!empty($rv['material_id']) && empty($rv['title'])) {
							$material = Material::findOne(['id' => $rv['material_id']]);
							$article  = Article::find()->alias('a');
							$article  = $article->leftJoin('{{%material}} m', 'm.id = a.thumb_media_id');
							$article  = $article->where(['a.id' => $material->article_sort])->select('a.title,a.digest,a.content_source_url,m.local_path')->asArray()->one();

							if (strpos($article['local_path'], 'http') === false) {
								$article['local_path'] = \Yii::$app->params['site_url'] . $article['local_path'];
							}

							$replyList[$tempId]['sketchList'][] = ['id' => $sketchId, 'addType' => 0, 'inputTitle' => $article['title'], 'digest' => $article['digest'], 'content_source_url' => $article['content_source_url'], 'material_id' => $rv['attachment_id'], 'local_path' => ['img' => $article['local_path'], 'audio' => '']];
						} else {
							if (strpos($rv['cover_url'], 'http') === false) {
								$rv['cover_url'] = \Yii::$app->params['site_url'] . $rv['cover_url'];
							}
							$material_id                        = !empty($rv['attachment_id']) ? $rv['attachment_id'] : 0;
							$group_id = "";
							$attach_id = "";
							if(empty($rv['is_use'])){
								$addType = 0;
								$is_sync = 0;

							}else{
								$addType = 1;
								$is_sync = (int)$rv['is_sync'];
								if(!empty($is_sync)){
									$attach_id = $rv['attach_id'];
									$attachment = Attachment::findOne($rv['attach_id']);
									$group_id = (string)$attachment->group_id;
								}
							}
							$replyList[$tempId]['sketchList'][] = ['id' => $sketchId, 'addType' => $addType, 'inputTitle' => $rv['title'], 'digest' => $rv['digest'], 'content_source_url' => $rv['content_url'], 'material_id' => $material_id, 'local_path' => ['img' => $rv['cover_url'], 'audio' => ''], 'is_sync' => $is_sync, 'group_id' => $group_id,'attach_id'=>$attach_id];
						}
						$sketchId++;
					} elseif ($rv['type'] == 1) {
						$replyList[$rv['id']] = ['id' => $typeNum, 'typeValue' => (int) $rv['type'], 'file_name' => '', 'material_id' => 0, 'local_path' => ['img' => '', 'audio' => ''], 'sketchList' => [], 'textAreaValueHeader' => rawurldecode($rv['content'])];
						$typeNum++;
					} else {
						if (!empty($rv['attachment_id'])) {
							$temp      = Attachment::findOne(['id' => $rv['attachment_id']]);
							$cover_url = !empty($temp->local_path) ? $temp->local_path : '';
							if (strpos($cover_url, 'http') === false) {
								$cover_url = \Yii::$app->params['site_url'] . $cover_url;
							}
							$file_name = $temp->file_name;
						} else {
							$cover_url = '';
							$file_name = '';
						}

						if ($rv['type'] == 2) {
							$local_path = ['img' => $cover_url, 'audio' => ''];
						} else {
							$local_path = ['img' => '', 'audio' => $cover_url];
						}
						$replyList[$rv['id']] = ['id' => $typeNum, 'typeValue' => (int) $rv['type'], 'file_name' => $file_name, 'material_id' => $rv['attachment_id'], 'local_path' => $local_path, 'sketchList' => [], 'textAreaValueHeader' => ''];
						$typeNum++;
					}
				}
			}
			$replyList         = array_values($replyList);
			$data['replyList'] = $replyList;

			return $data;
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/scene/
		 * @title           参数二维码添加
		 * @description     参数二维码添加
		 * @method   post
		 * @url  http://{host_name}/api/scene/add
		 *
		 * @param wx_id 必选  string 公众号ID
		 * @param title 必选  string 二维码标题
		 * @param time_type 必选  string 有效期:1、30天，2、永久
		 * @param status 必选  string 扫码推送:1、新建扫码推送消息，0、不启用
		 * @param push_type 必选  string 推送方式：1、随机推送一条，2、全部推送
		 * @param tagIds 必选  string 粉丝标签id以逗号隔开
		 * @param msgData 必选  array 发送内容数据
		 * @param type 必选 int  1：文本（text）、2：图片（img）、3：语音（voice）、4：视频（video）、5：图文（news）
		 * @param content 必选/可选 string  type=1时使用
		 * @param material_id 必选 string  素材库id，type=2，3，4时使用
		 * @param newsList 必选/可选 array  图文数据，type=5时使用
		 * @param is_use 可选 string 图文数据，是否使用自己填写，当msg_type=5时传
		 * @param material_id 必选 string  图文数据，附件id，当is_use=0时传
		 * @param title 必选 string  图文数据，图文消息的标题，当is_use=1时传
		 * @param digest 可选 string  图文数据，图文消息的摘要，当is_use=1时传
		 * @param cover_url 必选 string  图文数据，封面图片的URL，当is_use=1时传
		 * @param content_url 可选 string  图文数据，正文的URL，当is_use=1时传
		 * @param is_use 可选 string 图文数据，是否是自定义
		 * @param is_sync 可选 string 图文数据，是否同步文件柜
		 * @param attach_id 可选 string 图文数据，同步文件柜的id
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    error_msg string 错误信息
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: xingchangyu. Date: 2019-10-14 9:43
		 * @number          0
		 *
		 * @throws InvalidDataException
		 * @throws InvalidParameterException
		 * @throws MethodNotAllowedHttpException
		 * @throws \app\components\NotAllowException
		 * @throws \yii\base\InvalidConfigException
		 * @throws \yii\db\Exception
		 */
		public function actionAdd ()
		{
			if (\Yii::$app->request->isGet) {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
			$author_id = $this->wxAuthorInfo->author_id;
			if (empty($author_id)) {
				throw new InvalidParameterException('缺少必要参数！');
			}
			//检查此公众号是否授权
			if($this->wxAuthorInfo->author->authorizer_type == WxAuthorize::AUTH_TYPE_UNAUTH){
				throw new InvalidDataException('此公众号未授权，请先授权');
			}
			$title = \Yii::$app->request->post('title');
			if (empty($title)) {
				throw new InvalidDataException('请输入二维码名称');
			} elseif (mb_strlen($title, 'utf-8') > 20) {
				throw new InvalidDataException('二维码名称最多20个字符！');
			}
			$time_type = \Yii::$app->request->post('time_type');
			if (empty($time_type)) {
				throw new InvalidDataException('请选择有效期');
			}

			//套餐限制数量
			$authorUser = UserAuthorRelation::findOne(['author_id' => $author_id]);
			$packageLimit = Package::packageLimitNum($authorUser->uid, 'scene');
			if ($packageLimit > 0) {
				$codeCount = Scene::find()->alias('w')->leftJoin('{{%user_author_relation}} u', '`w`.`author_id` = `u`.`author_id`')->where(['u.uid' => $authorUser->uid])->count();
				if ($codeCount >= $packageLimit) {
					throw new InvalidParameterException('渠道二维码数量已达套餐限制！');
				}
			}

			if ($time_type == 1) {
				//获取临时二维码scene_id 从100001开始
				$count        = Scene::find()->where(['author_id' => $author_id, 'action_name' => 'QR_SCENE'])->count();
				$scene_id     = $count + 100001;
				$action_name  = 'QR_SCENE';
				$scene_expire = '2592000';
				$qrCodeData   = ['expire_seconds' => 2592000, 'action_name' => 'QR_SCENE', 'action_info' => ['scene' => ['scene_id' => $scene_id]]];
			} else {
				//查询永久二维码总数 从1开始
				$count = Scene::find()->where(['author_id' => $author_id, 'action_name' => 'QR_LIMIT_SCENE'])->count();
				if ($count > 99999) {
					throw new InvalidDataException('永久二维码最多只能创建100000');
				}
				//获取永久二维码scene_id
				$scene_id     = $count + 1;
				$action_name  = 'QR_LIMIT_SCENE';
				$scene_expire = '';
				$qrCodeData   = ['expire_seconds' => '', 'action_name' => 'QR_LIMIT_SCENE', 'action_info' => ['scene' => ['scene_id' => $scene_id]]];
			}
			$status = \Yii::$app->request->post('status');
			if (!in_array($status, [0, 1])) {
				throw new InvalidDataException('请选择扫码推送方式');
			}
			$push_type = \Yii::$app->request->post('push_type', 1);
			$msgData   = \Yii::$app->request->post('msgData');
			$tagIds    = \Yii::$app->request->post('tagIds');
			if (!empty($status)) {
				//检查数据
				$msg = Scene::checkData($msgData);
				if (!empty($msg)) {
					throw new InvalidDataException($msg);
				}
			}
			//获取微信api相关配置
			$wxAuthInfo  = WxAuthorize::findOne(['author_id' => $author_id]);
			$wxAuthorize = WxAuthorize::getTokenInfo($wxAuthInfo->authorizer_appid, false, true);
			if (empty($wxAuthorize)) {
				throw new InvalidDataException('获取token失败');
			}
			$wechat = \Yii::createObject([
				'class'          => Wechat::className(),
				'appId'          => $wxAuthInfo->authorizer_appid,
				'appSecret'      => $wxAuthorize['config']->appSecret,
				'token'          => $wxAuthorize['config']->token,
				'componentAppId' => $wxAuthorize['config']->appid,
			]);

			$transaction = \Yii::$app->db->beginTransaction();
			try {
				//生成二维码数据
				$result = $wechat->createQrCode($qrCodeData);
				if (isset($result["errcode"]) && $result["errcode"] == "48001") {
					throw new InvalidParameterException('公众号未认证或未取得接口权限');
				}
				if (isset($result["errcode"])) {
					throw new InvalidParameterException('创建二维码失败');
				}
				$qrCodeUrl          = $wechat->getQrCodeUrl($result['ticket']);
				$userAuthorRelation = UserAuthorRelation::findOne(['author_id' => $author_id]);
				$uid                = !empty($userAuthorRelation) ? $userAuthorRelation->uid : '';
				$imageData          = Material::getImage($qrCodeUrl, 'qrcode/' . $uid . '/wx');
				//创建参数二维码数据
				$scene               = new Scene();
				$scene->author_id    = $author_id;
				$scene->title        = $title;
				$scene->action_name  = $action_name;
				$scene->scene_id     = $scene_id;
				$scene->scene_expire = $scene_expire;
				$scene->ticket       = $result['ticket'];
				$scene->url          = $result['url'];
				$scene->status       = $status;
				$scene->push_type    = $push_type;
				$scene->create_time  = DateUtil::getCurrentTime();
				$scene->local_path   = $imageData['local_path'];

				if (!$scene->validate() || !$scene->save()) {
					throw new InvalidDataException(SUtils::modelError($scene));
				}

				//创建标签对应数据
				if (!empty($tagIds)) {
					$tagIdArr = explode(',', $tagIds);
					foreach ($tagIdArr as $tv) {
						$sceneTags              = new SceneTags();
						$sceneTags->scene_id    = $scene->id;
						$sceneTags->tag_id      = $tv;
						$sceneTags->create_time = DateUtil::getCurrentTime();
						if (!$sceneTags->validate() || !$sceneTags->save()) {
							throw new InvalidDataException(SUtils::modelError($sceneTags));
						}
					}
				}
				$replyIds = [];
				//添加回复数据
				if (!empty($status) && !empty($msgData)) {
					foreach ($msgData as $mv) {
						if ($mv['type'] == 5) {
							foreach ($mv['newsList'] as $nv) {
								$reply              = new ReplyInfo();
								$reply->scene_id    = $scene->id;
								$reply->type        = $mv['type'];
								$reply->status      = 1;//默认开启
								$reply->create_time = DateUtil::getCurrentTime();
								if (empty($nv['is_use'])) {
									$attachment           = Attachment::findOne($nv['material_id']);
									$reply->attachment_id = $attachment->id;
									if (!empty($status)) {//开启时判断
										if ($attachment->status == 0) {
											throw new InvalidDataException('此素材不存在');
										}
									}
									if (!empty($attachment->material_id) && $attachment->material->author_id == $author_id && !empty($attachment->material->status)) {
										$reply->content     = $attachment->material->media_id;
										$reply->material_id = $attachment->material->id;
									} else {
										//$material = Material::findOne(['author_id' => $author_id, 'attachment_id' => $attachment->id, 'status' => 1]);
										$material = Material::getMaterial(['author_id' => $author_id, 'attachment_id' => $attachment->id, 'file_type' => $attachment->file_type]);
										if (!empty($material)) {
											$reply->content     = $material->media_id;
											$reply->material_id = $material->id;
										} else {
											$reply->title       = $attachment->file_name;
											$reply->digest      = $attachment->content;
											$reply->cover_url   = $attachment->local_path;
											$reply->content_url = $attachment->jump_url;
										}
									}


//									if (!empty($status)) {//开启时判断
//										$material = Material::findOne(['id' => $nv['material_id']]);
//										if (empty($material)) {
//											throw new InvalidDataException('此素材不存在');
//										}
//										$reply->content = $material->media_id;
//									}
//									$reply->material_id = $nv['material_id'];
								} else {
									$reply->title       = $nv['title'];
									$reply->digest      = $nv['digest'];
									$site_url           = \Yii::$app->params['site_url'];
									$cover_url          = str_replace($site_url, '', $nv['cover_url']);
									$reply->cover_url   = $cover_url;
									$reply->content_url = $nv['content_url'];
									//$reply->material_id = !empty($nv['material_id']) ? $nv['material_id'] : '';
									$reply->attachment_id = !empty($nv['material_id']) ? $nv['material_id'] : '';
									$reply->is_use = 1;
									//同步自定义图文
									if(!empty($nv['is_sync'])){
										$reply->is_sync          = 1;
										$userRelation            = UserAuthorRelation::findOne(['author_id' => $author_id]);
										$attachment              = new Attachment();
										$attachment->uid         = $userRelation->uid;
										$attachment->file_type   = 4;
										$attachment->create_time = DateUtil::getCurrentTime();
										$attachment->group_id    = $nv['group_id'];
										$attachment->file_name   = $nv['title'];
										$attachment->content     = $nv['digest'];
										$attachment->local_path  = $cover_url;
										$attachment->jump_url    = $nv['content_url'];
										if (!$attachment->validate() || !$attachment->save()) {
											throw new InvalidDataException(SUtils::modelError($attachment));
										}
										$reply->attach_id = $attachment->id;
									}
								}
								if (!$reply->save()) {
									throw new InvalidDataException(SUtils::modelError($reply));
								}
								array_push($replyIds, $reply->id);
							}
						} else {
							$reply              = new ReplyInfo();
							$reply->scene_id    = $scene->id;
							$reply->type        = $mv['type'];
							$reply->status      = 1;//默认开启
							$reply->create_time = DateUtil::getCurrentTime();
							if ($mv['type'] == 1) {
								$reply->content = rawurlencode(rtrim($mv['content']));
							} elseif ($mv['type'] == 2 || $mv['type'] == 3 || $mv['type'] == 4) {
								$attachment = Attachment::findOne($mv['material_id']);
								$reply->attachment_id = $attachment->id;
								if(!empty($status)){//开启时判断
									if($attachment->status == 0){
										throw new InvalidDataException('此素材不存在');
									}
								}
								if (!empty($attachment->material_id) && $attachment->material->author_id == $author_id && !empty($attachment->material->status)) {
									$reply->content     = $attachment->material->media_id;
									$reply->material_id = $attachment->material->id;
								} else {
									//$material = Material::findOne(['author_id' => $author_id, 'attachment_id' => $attachment->id, 'status' => 1]);
									$material = Material::getMaterial(['author_id' => $author_id, 'attachment_id' => $attachment->id, 'file_type' => $attachment->file_type]);
									if (!empty($material)) {
										$reply->content     = $material->media_id;
										$reply->material_id = $material->id;
									}
								}

//								if (!empty($status)) {//开启时判断
//									$material = Material::findOne(['id' => $mv['material_id']]);
//									if (empty($material)) {
//										throw new InvalidDataException('此素材不存在');
//									}
//									$reply->content = $material->media_id;
//								}
//								$reply->material_id = $mv['material_id'];
							}
							if (!$reply->save()) {
								throw new InvalidDataException(SUtils::modelError($reply));
							}
							array_push($replyIds, $reply->id);
						}
					}
					//消息回复的排序
					$scene->reply_sort = implode(',', $replyIds);
					if (!$scene->validate() || !$scene->save()) {
						throw new InvalidDataException(SUtils::modelError($scene));
					}
				}
				$transaction->commit();

				//添加至内容引擎
				$imageData['uid']       = $uid;
				$imageData['file_name'] = $title;
				Attachment::addChannel($scene->id, $imageData, Attachment::WX_TYPE);
			} catch (InvalidDataException $e) {
				$transaction->rollBack();
				throw new InvalidDataException($e->getMessage());
			}

			return true;
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/scene/
		 * @title           参数二维码修改
		 * @description     参数二维码修改
		 * @method   请求方式
		 * @url  http://{host_name}/api/scene/update
		 *
		 * @param scene_id 必选  int 场景值ID
		 * @param push_type 必选  int 推送方式：1、随机推送一条，2、全部推送
		 * @param status 必选  string 扫码推送：1、新建扫码推送消息，0、不启用
		 * @param msgData 必选  array 粉丝标签id数组
		 * @param id 必选 int  回复消息id，>0：修改数据、=0添加数据
		 * @param type 必选 int  1：文本（text）、2：图片（img）、3：语音（voice）、4：视频（video）、5：图文（news）
		 * @param content 必选/可选 string  type=1时使用
		 * @param material_id 必选 string  附件id，type=2，3，4时使用
		 * @param newsList 必选/可选 array  图文数据，type=5时使用
		 * @param is_use 可选 string 图文数据，是否使用自己填写，当msg_type=5时传
		 * @param material_id 必选 string  图文数据，素材库id，当is_use=0时传
		 * @param title 必选 string  图文数据，图文消息的标题，当is_use=1时传
		 * @param digest 可选 string  图文数据，图文消息的摘要，当is_use=1时传
		 * @param cover_url 必选 string  图文数据，封面图片的URL，当is_use=1时传
		 * @param content_url 可选 string  图文数据，正文的URL，当is_use=1时传
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    error_msg string 错误信息
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: xingchangyu. Date: 2019-10-13 17:56
		 * @number          0
		 *
		 * @throws InvalidDataException
		 * @throws InvalidParameterException
		 * @throws MethodNotAllowedHttpException
		 */
		public function actionUpdate ()
		{
			if (\Yii::$app->request->isGet) {
				throw new MethodNotAllowedHttpException('请求方式不允许！');
			}
			$author_id = $this->wxAuthorInfo->author_id;
			if (empty($author_id)) {
				throw new InvalidParameterException('缺少必要参数！');
			}
			$scene_id = \Yii::$app->request->post('scene_id');
			if (empty($scene_id)) {
				throw new InvalidParameterException('缺少必要参数！');
			}
			$scene = Scene::findOne($scene_id);
			if (empty($scene)) {
				throw new InvalidDataException('参数不正确');
			}
			//检查此公众号是否授权
			if($this->wxAuthorInfo->author->authorizer_type == WxAuthorize::AUTH_TYPE_UNAUTH){
				throw new InvalidDataException('此公众号未授权，请先授权');
			}
			$status = \Yii::$app->request->post('status');
			if (!in_array($status, [0, 1])) {
				throw new InvalidDataException('请选择扫码推送方式');
			}
			$push_type = \Yii::$app->request->post('push_type');
			$msgData   = \Yii::$app->request->post('msgData');
			if (!empty($status)) {
				//检查数据
				$msg = Scene::checkData($msgData);
				if (!empty($msg)) {
					throw new InvalidDataException($msg);
				}
			}
			$transaction = \Yii::$app->db->beginTransaction();
			try {
				//修改数据
				$scene->status    = $status;
				$scene->push_type = $push_type;
				if (!$scene->save()) {
					throw new InvalidDataException(SUtils::modelError($scene));
				}
				$updateIds = [];
				//添加修改消息
				if (!empty($status) && !empty($msgData)) {
					foreach ($msgData as $mv) {
						if ($mv['type'] == 5) {
							foreach ($mv['newsList'] as $nv) {
								if (!empty($nv['id'])) {
									$reply = ReplyInfo::findOne($nv['id']);
								} else {
									$reply              = new ReplyInfo();
									$reply->scene_id    = $scene->id;
									$reply->status      = 1;//默认开启
									$reply->create_time = DateUtil::getCurrentTime();
								}
								$reply->type   = $mv['type'];
								$reply->status = 1;//默认开启
								if (empty($nv['is_use'])) {
									$attachment           = Attachment::findOne($nv['material_id']);
									$reply->attachment_id = $attachment->id;
									if (!empty($status)) {//开启时判断
										if ($attachment->status == 0) {
											throw new InvalidDataException('此素材不存在');
										}
									}
									if (!empty($attachment->material_id) && $attachment->material->author_id == $author_id && !empty($attachment->material->status)) {
										$reply->content     = $attachment->material->media_id;
										$reply->material_id = $attachment->material->id;
									}else{
										//$material = Material::findOne(['author_id'=>$author_id,'attachment_id' => $attachment->id]);
										$material = Material::getMaterial(['author_id'=>$author_id,'attachment_id' => $attachment->id, 'file_type' => $attachment->file_type]);
										if (!empty($material)) {
											$reply->content     = $material->media_id;
											$reply->material_id = $material->id;
										} else {
											$reply->title       = $attachment->file_name;
											$reply->digest      = $attachment->content;
											$reply->cover_url   = $attachment->local_path;
											$reply->content_url = $attachment->jump_url;
										}
									}

//									if (!empty($status)) {//开启时判断
//										$material = Material::findOne(['id' => $nv['material_id']]);
//										if (empty($material)) {
//											throw new InvalidDataException('此素材不存在');
//										}
//										$reply->content = $material->media_id;
//									}
//									$reply->material_id = $nv['material_id'];
								} else {
									$reply->title       = $nv['title'];
									$reply->digest      = $nv['digest'];
									$site_url           = \Yii::$app->params['site_url'];
									$cover_url          = str_replace($site_url, '', $nv['cover_url']);
									$reply->cover_url   = $cover_url;
									$reply->content_url = $nv['content_url'];
									//$reply->material_id = !empty($nv['material_id']) ? $nv['material_id'] : '';
									$reply->attachment_id = !empty($nv['material_id']) ? $nv['material_id'] : '';
									$reply->is_use = 1;
									//同步自定义图文
									if(!empty($nv['is_sync'])){
										$reply->is_sync = 1;
										$userRelation = UserAuthorRelation::findOne(['author_id'=>$author_id]);
										if(!empty($nv['attach_id'])){
											$attachment = Attachment::findOne($nv['attach_id']);
											$attachment->file_name  = $nv['title'];
											$attachment->content    = $nv['digest'];
											$attachment->local_path = $cover_url;
											$attachment->jump_url   = $nv['content_url'];
											if(!empty($attachment->dirtyAttributes)){
												$attachment = new Attachment();
												$attachment->uid = $userRelation->uid;
												$attachment->file_type   = 4;
												$attachment->create_time = DateUtil::getCurrentTime();
											}
											$attachment->group_id   = $nv['group_id'];
										}else{
											$attachment = new Attachment();
											$attachment->uid = $userRelation->uid;
											$attachment->file_type   = 4;
											$attachment->create_time = DateUtil::getCurrentTime();
										}
										$attachment->group_id   = $nv['group_id'];
										$attachment->file_name  = $nv['title'];
										$attachment->content    = $nv['digest'];
										$attachment->local_path = $cover_url;
										$attachment->jump_url   = $nv['content_url'];
										if (!$attachment->validate() || !$attachment->save()) {
											throw new InvalidDataException(SUtils::modelError($attachment));
										}
										$reply->attach_id = $attachment->id;
									}
								}
								if (!$reply->save()) {
									throw new InvalidDataException(SUtils::modelError($reply));
								}
								array_push($updateIds, $reply->id);
							}
						} else {
							if (!empty($mv['id'])) {
								$reply = ReplyInfo::findOne($mv['id']);
							} else {
								$reply              = new ReplyInfo();
								$reply->scene_id    = $scene->id;
								$reply->status      = 1;//默认开启
								$reply->create_time = DateUtil::getCurrentTime();
							}
							$reply->type = $mv['type'];
							if ($mv['type'] == 1) {
								$reply->content = rawurlencode(rtrim($mv['content']));
							} elseif ($mv['type'] == 2 || $mv['type'] == 3 || $mv['type'] == 4) {
								$attachment = Attachment::findOne($mv['material_id']);
								$reply->attachment_id = $attachment->id;
								if(!empty($status)){//开启时判断
									if($attachment->status == 0){
										throw new InvalidDataException('此素材不存在');
									}
								}
								if (!empty($attachment->material_id) && $attachment->material->author_id == $author_id && !empty($attachment->material->status)) {
									$reply->content     = $attachment->material->media_id;
									$reply->material_id = $attachment->material->id;
								} else {
									//$material = Material::findOne(['author_id' => $author_id, 'attachment_id' => $attachment->id]);
									$material = Material::getMaterial(['author_id'=>$author_id,'attachment_id' => $attachment->id, 'file_type' => $attachment->file_type]);
									if (!empty($material)) {
										$reply->content     = $material->media_id;
										$reply->material_id = $material->id;
									}
								}

//								if (!empty($status)) {//开启时判断
//									$material = Material::findOne(['id' => $mv['material_id']]);
//									if (empty($material)) {
//										throw new InvalidDataException('此素材不存在');
//									}
//									$reply->content = $material->media_id;
//								}
//								$reply->material_id = $mv['material_id'];
							}
							if (!$reply->save()) {
								throw new InvalidDataException(SUtils::modelError($reply));
							}
							array_push($updateIds, $reply->id);
						}
					}
				}
				//待删除的消息
				if(!empty($updateIds)){
					ReplyInfo::deleteAll(['and', ['scene_id' => $scene->id], ['not in', 'id', $updateIds]]);
					//消息回复的排序
					$scene->reply_sort = implode(',', $updateIds);
				}
				if (!$scene->validate() || !$scene->save()) {
					throw new InvalidDataException(SUtils::modelError($scene));
				}
				$transaction->commit();
			} catch (InvalidDataException $e) {
				$transaction->rollBack();
				throw new InvalidDataException($e->getMessage());
			}
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/scene/
		 * @title           二维码下载显示
		 * @description     二维码下载显示
		 * @method   post
		 * @url  http://{host_name}/api/scene/down
		 *
		 * @param scene_id 必选  int 场景值ID
		 * @param show 可选  int 是否下载：0、下载，1、查看
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: xingchangyu. Date: 2019-11-11 9:55
		 * @number          0
		 *
		 * @throws InvalidParameterException
		 */
		public function actionDown ()
		{
			//header("Access-Control-Allow-Origin:*");
			$scene_id = \Yii::$app->request->post('scene_id');
			$show     = \Yii::$app->request->post('show', 0);
			if (empty($scene_id)) {
				throw new InvalidParameterException('缺少必要参数！');
			}
			$scene = Scene::findOne($scene_id);
			if (empty($scene)) {
				throw new InvalidParameterException('参数不正确！');
			}
			$url = $scene->url;
			if (empty($show)) {
				$fname = 'Your-scene-code-image-' . $scene->id . date('Y-m-d') . '.png';
				header('Pragma: public'); // required
				header('Expires: 0');
				header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
				header('Content-Type:application/force-download');
				header('Content-type: image/png');
				header('Content-Type:application/download');
				header("Content-Disposition: attachment; filename={$fname}");
				header('Content-Transfer-Encoding: binary');
				QRcode::png($url, false, 'H', 10, 1);
			} else {
				//Header('Content-type: image/jpeg');
				//QRcode::png($url);
				return ['url' => $url];
			}
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/scene/
		 * @title           扫码推送开关
		 * @description     扫码推送开关
		 * @method   post
		 * @url  http://{host_name}/api/scene/update-status
		 *
		 * @param scene_id 必选  int 场景值ID
		 * @param status 必选  int 扫码推送开关：0、关闭，1、开启
		 *
		 * @return          {"error":0,"data":[]}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 *
		 * @remark          Create by PhpStorm. User: xingchangyu. Date: 2019-11-11 9:59
		 * @number          0
		 *
		 */
		public function actionUpdateStatus ()
		{
			$scene_id = \Yii::$app->request->post('scene_id');
			$status   = \Yii::$app->request->post('status');
			if (empty($scene_id) || !isset($status)) {
				throw new InvalidParameterException('缺少必要参数！');
			}
			$scene = Scene::findOne($scene_id);
			if (empty($scene)) {
				throw new InvalidParameterException('参数不正确！');
			}
			$scene->status = $status;
			$scene->update();

			return true;
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/scene/
		 * @title           扫码用户列表
		 * @description     扫码用户列表
		 * @method   post
		 * @url  http://{host_name}/api/scene/user-detail
		 *
		 * @param scene_id 必选  int 场景值ID
		 *
		 * @return          {"error":0,"data":{"count":"2","data":[{"nickname":"一切随缘","is_new":"1","scan_time":"2019-11-19 17:21:22"},{"nickname":"空白","is_new":"0","scan_time":"2019-11-19 17:18:10"}]}}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 * @return_param    count string 数量
		 * @return_param    key string 记录key
		 * @return_param    nickname string 粉丝昵称
		 * @return_param    is_new string 0老粉丝、1新粉丝
		 * @return_param    scan_time string 扫码时间
		 *
		 * @remark          Create by PhpStorm. User: xingchangyu. Date: 2019-11-19 17:26
		 * @number          0
		 *
		 * @throws InvalidParameterException
		 */
		public function actionUserDetail ()
		{
			$scene_id = \Yii::$app->request->post('scene_id');
			if (empty($scene_id)) {
				throw new InvalidParameterException('缺少必要参数！');
			}
			$scene = Scene::findOne($scene_id);
			if (empty($scene)) {
				throw new InvalidParameterException('参数不正确！');
			}
			$sceneUserDetail = SceneUserDetail::find()->alias('sud');
			$sceneUserDetail = $sceneUserDetail->leftJoin('{{%fans}} f', 'sud.fans_id = f.id');
			$sceneUserDetail = $sceneUserDetail->where(['sud.scene_id' => $scene_id, 'f.subscribe' => 1]);
			$sceneUserDetail = $sceneUserDetail->select('f.nickname,sud.id key,sud.is_new,sud.scan_time');
			//分页
			$page            = \Yii::$app->request->post('page') ?: 1;
			$pageSize        = \Yii::$app->request->post('pageSize') ?: 10;
			$offset          = ($page - 1) * $pageSize;
			$count           = $sceneUserDetail->count();
			$sceneUserDetail = $sceneUserDetail->limit($pageSize)->offset($offset)->asArray()->all();

			return [
				'count' => $count,
				'data'  => $sceneUserDetail
			];
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/scene/
		 * @title           统计总数
		 * @description     统计总数
		 * @method   post
		 * @url  http://{host_name}/api/scene/sum
		 *
		 * @param scene_id 必选  int 场景值ID
		 *
		 * @return          {"error":0,"data":{"day":{"scan_times":"0","scan_num":"0","subscribe":"0","unsubscribe":"0","net_increase":0},"sum":{"scan_times":15,"scan_num":8,"subscribe":4,"unsubscribe":3,"net_increase":1}}}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 * @return_param    day array 今日数据
		 * @return_param    sum array 总数据
		 * @return_param    scan_times string 扫码次数
		 * @return_param    scan_num string 扫码人数
		 * @return_param    subscribe string 关注人数
		 * @return_param    unsubscribe string 取关人数
		 * @return_param    net_increase string 净增粉丝数
		 *
		 * @remark          Create by PhpStorm. User: xingchangyu. Date: 2019-11-24 9:01
		 * @number          0
		 *
		 * @throws InvalidParameterException
		 */
		public function actionSum ()
		{
			$scene_id = \Yii::$app->request->post('scene_id');
			if (empty($scene_id)) {
				throw new InvalidParameterException('缺少必要参数！');
			}
			$scene = Scene::findOne($scene_id);
			if (empty($scene)) {
				throw new InvalidParameterException('参数不正确！');
			}
			$start_date = date('Y-m-d');
			//今日扫码次数
			$scan_times = FansTimeLine::find()->where(['scene_id' => $scene_id, 'event' => ['subscribe', 'scan']])->andWhere(['>', 'event_time', $start_date])->count();
			//今日扫码人数
			$scan_num = FansTimeLine::find()->where(['scene_id' => $scene_id, 'event' => ['subscribe', 'scan']])->andWhere(['>', 'event_time', $start_date])->groupBy('fans_id')->count();
			//今日新增粉丝数
			$subscribe = FansTimeLine::find()->where(['scene_id' => $scene_id, 'event' => 'subscribe'])->andWhere(['>', 'event_time', $start_date])->groupBy('fans_id')->count();
			//今日流失粉丝数
			$unsubscribe = FansTimeLine::find()->where(['scene_id' => $scene_id, 'event' => 'unsubscribe'])->andWhere(['>', 'event_time', $start_date])->groupBy('fans_id')->count();
			//今日净增粉丝数
			$net_increase = $subscribe - $unsubscribe;
			$net_increase = (string) $net_increase;

			$start_date = $scene->create_time;
			//累计扫码次数
			$scan_times_sum = FansTimeLine::find()->where(['scene_id' => $scene_id, 'event' => ['subscribe', 'scan']])->andWhere(['>', 'event_time', $start_date])->count();
			//累计扫码人数
			$scan_num_sum = FansTimeLine::find()->where(['scene_id' => $scene_id, 'event' => ['subscribe', 'scan']])->andWhere(['>', 'event_time', $start_date])->groupBy('fans_id')->count();
			//累计新增粉丝数
			$subscribe_sum = FansTimeLine::find()->where(['scene_id' => $scene_id, 'event' => 'subscribe'])->andWhere(['>', 'event_time', $start_date])->groupBy('fans_id')->count();
			//累计流失粉丝数
			$unsubscribe_sum = FansTimeLine::find()->where(['scene_id' => $scene_id, 'event' => 'unsubscribe'])->andWhere(['>', 'event_time', $start_date])->groupBy('fans_id')->count();
			//累计净增粉丝数
			$net_increase_sum = $subscribe_sum - $unsubscribe_sum;
			$net_increase_sum = (string) $net_increase_sum;

			//本月之前的每月统计
//			$select       = 'sum(scan_times) scan_times,sum(scan_num) scan_num,sum(subscribe) subscribe,sum(unsubscribe) unsubscribe,sum(net_increase) net_increase';
//			$sum          = SceneStatistic::find()->where(['scene_id' => $scene_id])->andWhere(['is_month'=>1])->select($select)->asArray()->one();

			return [
				'scan_times'   => ['day' => $scan_times, 'sum' => $scan_times_sum],
				'scan_num'     => ['day' => $scan_num, 'sum' => $scan_num_sum],
				'subscribe'    => ['day' => $subscribe, 'sum' => $subscribe_sum],
				'unsubscribe'  => ['day' => $unsubscribe, 'sum' => $unsubscribe_sum],
				'net_increase' => ['day' => $net_increase, 'sum' => $net_increase_sum]
			];
		}

		/**
		 * showdoc
		 * @catalog         数据接口/api/scene/
		 * @title           统计列表
		 * @description     统计列表
		 * @method   post
		 * @url  http://{host_name}/api/scene/sum-list
		 *
		 * @param scene_id 必选  int 场景值ID
		 * @param time_type 必选  int 时间类型：1、小时，2、天，3、月
		 * @param start_date 可选  string 开始日期
		 * @param end_date 可选  string 结束日期
		 * @param is_export 必选  int 是否导出：0、否，1、是
		 *
		 * @return          {"error":0,"data":{"title":"测试345","perDate":["2018-12","2019-01","2019-02","2019-03","2019-04","2019-05","2019-06","2019-07","2019-08","2019-09","2019-10","2019-11"],"seriesData":[{"name":"扫码次数","data":[0,0,0,0,0,0,0,0,0,0,0,16]},{"name":"扫码人数","data":[0,0,0,0,0,0,0,0,0,0,0,9]},{"name":"关注人数","data":[0,0,0,0,0,0,0,0,0,0,0,4]},{"name":"取关人数","data":[0,0,0,0,0,0,0,0,0,0,0,4]},{"name":"净增粉丝数","data":[0,0,0,0,0,0,0,0,0,0,0,0]}]}}
		 *
		 * @return_param    error int 状态码
		 * @return_param    data array 结果数据
		 * @return_param    title string 渠道二维码标题
		 * @return_param    perDate array 日期
		 * @return_param    seriesData array 曲线图数据列表
		 * @return_param    name string 数据名称
		 * @return_param    data array 曲线图数据
		 * @return_param    is_long string 是否是永久二维码
		 * @return_param    startDate string 临时二维码开始日期
		 * @return_param    endDate string 临时二维码结束日期
		 *
		 * @remark          Create by PhpStorm. User: xingchangyu. Date: 2019-11-24 9:31
		 * @number          0
		 *
		 * @throws InvalidParameterException
		 */
		public function actionSumList ()
		{
			$time_type = \Yii::$app->request->post('time_type', 1);
			$scene_id  = \Yii::$app->request->post('scene_id');
			$is_export = \Yii::$app->request->post('is_export');
			if (empty($scene_id)) {
				throw new InvalidParameterException('缺少必要参数！');
			}
			$scene = Scene::findOne($scene_id);
			if (empty($scene)) {
				throw new InvalidParameterException('参数不正确！');
			}
			$timeArr = [];
			$date    = date('Y-m-d');
			$perDate = [];
			//按小时
			if ($time_type == 1) {
				$hour = date('H');
				for ($i = 0; $i <= $hour; $i++) {
					if ($i < 10) {
						$i = '0' . $i;
					}
					$j = $i + 1;
					if ($j < 10) {
						$j = '0' . $j;
					}
					$key           = $date . ' ' . $i;
					$perKey        = $i . ':00-' . $j . ':00';
					$timeArr[$key] = [
						'key'          => $i,
						'perdate'      => $perKey,
						'scan_times'   => 0,
						'scan_num'     => 0,
						'subscribe'    => 0,
						'unsubscribe'  => 0,
						'net_increase' => 0
					];
					array_push($perDate, $perKey);
				}
				$digit    = 13;
				$hourDate = 'event_time > "' . $date . '"';
			} elseif ($time_type == 2) {//按天
				$start_date = \Yii::$app->request->post('start_date');
				if (empty($start_date)) {
					$start_date = date('Y-m-d', time() - 2592000);
				}
				$end_date = \Yii::$app->request->post('end_date');
				if (empty($end_date)) {
					$end_date = $date;
				}
				$digit    = 10;
				$hourDate = 'event_time > "' . $date . '"';
				if ($end_date < $date) {
					$hourDate = '';
				}
				$i        = 0;
				while (true) {
					$start_time = strtotime(" +" . $i . 'days ' . $start_date);
					$day        = date('Y-m-d', $start_time);
					if ($day > $end_date) {
						break;
					}
					$perKey        = date('m-d', $start_time);
					$timeArr[$day] = [
						'key'          => $i,
						'perdate'      => $perKey,
						'scan_times'   => 0,
						'scan_num'     => 0,
						'subscribe'    => 0,
						'unsubscribe'  => 0,
						'net_increase' => 0
					];
					$i++;
					array_push($perDate, $perKey);
				}
				$statistic = SceneStatistic::find()->where(['scene_id' => $scene_id])->andWhere(['between', 'data_time', $start_date, $end_date])->andWhere(['is_month' => 0])->all();
				foreach ($statistic as $sv) {
					$timeArr[$sv['data_time']]['scan_times']   = intval($sv['scan_times']);
					$timeArr[$sv['data_time']]['scan_num']     = intval($sv['scan_num']);
					$timeArr[$sv['data_time']]['subscribe']    = intval($sv['subscribe']);
					$timeArr[$sv['data_time']]['unsubscribe']  = intval($sv['unsubscribe']);
					$timeArr[$sv['data_time']]['net_increase'] = intval($sv['net_increase']);
				}
			} elseif ($time_type == 3) {//按月
				//默认近12个月
				$beforeMonth = date('Y-m', strtotime('-12 month '));
				$nowMonth    = date('Y-m', strtotime('-1 month '));
				$digit       = 7;
				$hourDate    = 'event_time > "' . $date . '"';
				$i           = 0;
				while (true) {
					$month = date('Y-m', strtotime(" +" . $i . 'month ' . $beforeMonth));
					if ($month > $nowMonth) {
						break;
					}
					$timeArr[$month] = [
						'key'          => $i,
						'perdate'      => $month,
						'scan_times'   => 0,
						'scan_num'     => 0,
						'subscribe'    => 0,
						'unsubscribe'  => 0,
						'net_increase' => 0
					];
					$i++;
					array_push($perDate, $month);
				}
				$select    = new Expression('left(data_time, ' . $digit . ') perdate,sum(scan_times) scan_times,sum(scan_num) scan_num,sum(subscribe) subscribe,sum(unsubscribe) unsubscribe,sum(net_increase) net_increase');
				$statistic = SceneStatistic::find()->where(['scene_id' => $scene_id])->andWhere(['between', 'data_time', $beforeMonth, $nowMonth])->andWhere(['is_month' => 1])->select($select)->groupBy('perdate')->asArray()->all();
				foreach ($statistic as $sv) {
					$timeArr[$sv['perdate']]['scan_times']   = intval($sv['scan_times']);
					$timeArr[$sv['perdate']]['scan_num']     = intval($sv['scan_num']);
					$timeArr[$sv['perdate']]['subscribe']    = intval($sv['subscribe']);
					$timeArr[$sv['perdate']]['unsubscribe']  = intval($sv['unsubscribe']);
					$timeArr[$sv['perdate']]['net_increase'] = intval($sv['net_increase']);
				}
			}
			//排除按月的查询
			if ($time_type != 3 && !empty($hourDate)) {
				//扫描次数
				$timesSelect = new Expression('fans_id,left(event_time, ' . $digit . ') perdate,count(*) scan_times');
				$timeList    = FansTimeLine::find()->where(['scene_id' => $scene_id, 'event' => ['subscribe', 'scan']])->andWhere($hourDate)->select($timesSelect)->groupBy('perdate')->asArray()->all();
				foreach ($timeList as $tv) {
					if (isset($timeArr[$tv['perdate']])) {
						$timeArr[$tv['perdate']]['scan_times'] += $tv['scan_times'];
					}
				}
				//扫码人数
				$numSelect = new Expression('fans_id,left(event_time, ' . $digit . ') perdate,count(DISTINCT fans_id) scan_num');
				$numList   = FansTimeLine::find()->where(['scene_id' => $scene_id, 'event' => ['subscribe', 'scan']])->andWhere($hourDate)->select($numSelect)->groupBy('perdate')->asArray()->all();
				foreach ($numList as $tv) {
					if (isset($timeArr[$tv['perdate']])) {
						$timeArr[$tv['perdate']]['scan_num'] += $tv['scan_num'];
					}
				}
				//关注人数
				$subscribeSelect = new Expression('fans_id,left(event_time, ' . $digit . ') perdate,count(DISTINCT fans_id) subscribe');
				$subscribeList   = FansTimeLine::find()->where(['scene_id' => $scene_id, 'event' => 'subscribe'])->andWhere($hourDate)->select($subscribeSelect)->groupBy('perdate')->asArray()->all();
				foreach ($subscribeList as $tv) {
					if (isset($timeArr[$tv['perdate']])) {
						$timeArr[$tv['perdate']]['subscribe'] += $tv['subscribe'];
					}
				}
				//取关人数
				$unsubscribeSelect = new Expression('fans_id,left(event_time, ' . $digit . ') perdate,count(DISTINCT fans_id) unsubscribe');
				$unsubscribeList   = FansTimeLine::find()->where(['scene_id' => $scene_id, 'event' => 'unsubscribe'])->andWhere($hourDate)->select($unsubscribeSelect)->groupBy('perdate')->asArray()->all();
				foreach ($unsubscribeList as $tv) {
					if (isset($timeArr[$tv['perdate']])) {
						$timeArr[$tv['perdate']]['unsubscribe'] += $tv['unsubscribe'];
					}
				}
				//净增人数
				foreach ($timeArr as $tk => $tv) {
					$net_increase                 = $tv['subscribe'] - $tv['unsubscribe'];
					$timeArr[$tk]['net_increase'] = $net_increase;
				}
			}

			if (empty($is_export)) {
				$timesData       = array_column($timeArr, 'scan_times');
				$numData         = array_column($timeArr, 'scan_num');
				$subscribeData   = array_column($timeArr, 'subscribe');
				$unsubscribeData = array_column($timeArr, 'unsubscribe');
				$increaseData    = array_column($timeArr, 'net_increase');
				$seriesData      = [
					['name' => '扫码次数', 'data' => $timesData],
					['name' => '扫码人数', 'data' => $numData],
					['name' => '关注人数', 'data' => $subscribeData],
					['name' => '取关人数', 'data' => $unsubscribeData],
					['name' => '净增粉丝数', 'data' => $increaseData],
				];

				//是否是永久二维码
				$startDate = '';
				$endDate   = '';
				if(!empty($scene->scene_expire)){
					$is_long     = 0;
					$startDate   = substr($scene->create_time, 0, 10);
					$expire_time = strtotime("+30 days " . $scene->create_time);
					$time        = time();
					if ($expire_time > $time) {
						$expire_time = $time;
					}
					$endDate = date('Y-m-d', $expire_time);
				}else{
					$is_long = 1;
				}
				return ['title' => $scene->title, 'perDate' => $perDate, 'seriesData' => $seriesData, 'timeData' => array_values($timeArr), 'is_long' => $is_long, 'startDate' => $startDate, 'endDate' => $endDate];
			} else {
				$save_dir = \Yii::getAlias('@upload') . '/exportfile/' . date('Ymd') . '/';
				//创建保存目录
				if (!file_exists($save_dir) && !mkdir($save_dir, 0777, true)) {
					return ['error' => 1, 'msg' => '无法创建目录'];
				}
				$columns  = ['perdate', 'scan_times', 'scan_num', 'subscribe', 'unsubscribe', 'net_increase'];
				$headers  = [
					'perdate'      => '时间',
					'scan_times'   => '扫码次数',
					'scan_num'     => '扫码人数',
					'subscribe'    => '关注人数',
					'unsubscribe'  => '取关人数',
					'net_increase' => '净增粉丝数'
				];
				$fileName = 'sceneSum_' . date("YmdHis",time());
				Excel::export([
					'models'       => $timeArr,//数库
					'fileName'     => $fileName,//文件名
					'savePath'     => $save_dir,//下载保存的路径
					'asAttachment' => true,//是否下载
					'columns'      => $columns,//要导出的字段
					'headers'      => $headers
				]);
				$url = \Yii::$app->params['site_url'] . str_replace(\Yii::getAlias('@upload'), '/upload', $save_dir) . $fileName . '.xlsx';

				return [
					'url' => $url,
				];
			}
		}

	}