<?php
	/**
	 * Create by PhpStorm
	 * User: dovechen
	 * Date: 2020/2/29
	 * Time: 14:20
	 */

	namespace app\modules\work\controllers;

	use app\models\Fans;
	use app\models\FansMsg;
	use app\models\WorkCorp;
	use app\models\WorkCorpAgent;
	use app\models\WorkUser;
	use app\models\WorkUserAuthorRelation;
	use app\modules\work\components\BaseController;
	use app\queue\WorkDepartmentJob;
	use app\queue\WorkExternalChatJob;
	use app\queue\WorkExternalContactJob;
	use app\queue\WorkTagJob;
	use app\queue\WorkUserJob;
	use app\util\WorkConstUtil;
	use app\util\WorkUtils;
	use dovechen\yii2\weWork\components\MessageCrypt;

	/**
	 * Class EventController
	 * @package app\modules\work\controllers
	 */
	class EventController extends BaseController
	{
		public $receiveId;
		public $token;
		public $encodingAESKey;
		/** @var WorkCorp */
		public $corpInfo;
		/** @var WorkCorpAgent */
		public $corpAgent;

		/** @var \DOMDocument */
		public $xml;
		public $encryptMsg;
		public $returnEncryptMsg;
		public $decryptCode;
		public $postData;

		public $fromUserName;
		public $toUserName;
		public $createTime;
		public $msgType;
		public $event;
		public $changeType;

		/**
		 * @param \yii\base\Action $action
		 *
		 * @return bool
		 *
		 * @throws \yii\web\BadRequestHttpException
		 */
		public function beforeAction ($action)
		{
			$this->enableCsrfValidation = false;
			$corpId                     = '';
			switch ($action->id) {
				case 'index':
					$corpId = $_GET['id'];

					break;
				case 'agent':
					$workCorpAgent = WorkCorpAgent::findOne($_GET['id']);

					if (!empty($workCorpAgent)) {
						$this->corpAgent = $workCorpAgent;

						$corpId = $this->corpAgent->corp_id;
					}

					break;
				default:
					break;
			}

			if (!empty($corpId)) {
				if (\Yii::$app->request->isPost) {
					$this->encryptMsg = @file_get_contents("php://input");

					\Yii::info($this->encryptMsg, 'encryptMsg');
					if (!empty($this->encryptMsg)) {
						$this->xml = new \DOMDocument();
						$this->xml->loadXML($this->encryptMsg);

						$toUserNameItem = $this->xml->getElementsByTagName("ToUserName");
						$toUserName     = $toUserNameItem->item(0)->nodeValue;

						$this->corpInfo = WorkCorp::findOne($corpId);

						if (!empty($this->corpInfo) && $this->corpInfo->corpid == $toUserName) {
							$this->receiveId      = $this->corpInfo->corpid;
							$this->token          = $this->corpInfo->workCorpBind->token;
							$this->encodingAESKey = $this->corpInfo->workCorpBind->encode_aes_key;

							$xpath = new \DOMXPath($this->xml);
							$tmp   = $xpath->query('Encrypt')->length;
							if ($tmp != 0) {
								$signature         = isset($_GET['msg_signature']) ? $_GET['msg_signature'] : $_GET['signature'];
								$this->decryptCode = $this->encodeData($signature, $_GET['timestamp'], $_GET['nonce']);
							} else {
								$this->postData = $this->encryptMsg;
							}
						} else {
							echo "";
							exit();
						}

						$this->xml = new \DOMDocument();
						$this->xml->loadXML($this->postData);
					}
				}
			}

			return parent::beforeAction($action); // TODO: Change the autogenerated stub
		}

		/**
		 * @param $msgSignTrue
		 * @param $timestamp
		 * @param $nonce
		 *
		 * @return int
		 */
		private function encodeData ($msgSignTrue, $timestamp, $nonce)
		{
			// 对返回的第三方平台安全TICKET进行解密
			$messageCrypt = new MessageCrypt($this->token, $this->encodingAESKey, $this->receiveId);

			return $messageCrypt->DecryptMsg($msgSignTrue, $timestamp, $nonce, $this->encryptMsg, $this->postData);
		}

		/**
		 * @param $replyMsg
		 * @param $timeStamp
		 * @param $nonce
		 *
		 * @return int
		 */
		private function decodeData ($replyMsg, $timeStamp, $nonce)
		{
			// 对返回的第三方平台安全TICKET进行解密
			$messageCrypt = new MessageCrypt($this->token, $this->encodingAESKey, $this->receiveId);

			return $messageCrypt->EncryptMsg($replyMsg, $timeStamp, $nonce, $this->returnEncryptMsg);
		}

		/**
		 * 获取来源、企业微信的唯一ID、事件时间、消息类型、事件类型和变更类型
		 */
		private function getCommonParameters ()
		{
			// 获取来源
			$fromUserNameItem   = $this->xml->getElementsByTagName('FromUserName');
			$this->fromUserName = $fromUserNameItem->item(0)->nodeValue;

			// 企业微信的唯一ID
			$toUserNameItem   = $this->xml->getElementsByTagName("ToUserName");
			$this->toUserName = $toUserNameItem->item(0)->nodeValue;

			// 获取事件时间
			$createTimeItem   = $this->xml->getElementsByTagName('CreateTime');
			$this->createTime = $createTimeItem->item(0)->nodeValue;

			// 获取消息类型
			$msgTypeItem   = $this->xml->getElementsByTagName('MsgType');
			$this->msgType = $msgTypeItem->item(0)->nodeValue;

			// 获取事件类型
			$xpath    = new \DOMXPath($this->xml);
			$tmpEvent = $xpath->query('Event')->length;
			if ($tmpEvent != 0) {
				$eventItem   = $this->xml->getElementsByTagName('Event');
				$this->event = $eventItem->item(0)->nodeValue;
			} else {
				$this->event = '';
			}

			// 获取变更类型
			$tmpChangeType = $xpath->query('ChangeType')->length;
			if ($tmpChangeType != 0) {
				$changeTypeItem   = $this->xml->getElementsByTagName('ChangeType');
				$this->changeType = $changeTypeItem->item(0)->nodeValue;
			} else {
				$this->changeType = '';
			}

			\Yii::error($this->fromUserName, '$this->fromUserName');
			\Yii::error($this->toUserName, '$this->toUserName');
			\Yii::error($this->createTime, '$this->createTime');
			\Yii::error($this->msgType, '$this->msgType');
			\Yii::error($this->event, '$this->event');
			\Yii::error($this->changeType, '$this->changeType');
		}

		private function changeContact ($from = WorkUtils::FROM_BIND)
		{
			switch ($this->changeType) {
				case WorkConstUtil::CREATE_USER:
				case WorkConstUtil::UPDATE_USER:
				case WorkConstUtil::DELETE_USER:
					$jobId = \Yii::$app->p1->push(new WorkUserJob([
						'xml'  => $this->postData,
						'from' => $from,
					]));

					break;
				case WorkConstUtil::CREATE_PARTY:
				case WorkConstUtil::UPDATE_PARTY:
				case WorkConstUtil::DELETE_PARTY:
					$jobId = \Yii::$app->p1->push(new WorkDepartmentJob([
						'xml'  => $this->postData,
						'from' => $from,
					]));

					break;
				case WorkConstUtil::UPDATE_TAG:
					$jobId = \Yii::$app->p1->push(new WorkTagJob([
						'xml'  => $this->postData,
						'from' => $from,
					]));

					break;
			}

			return '';
		}

		private function batchJobResult ()
		{
			return '';
		}

		private function changeExternalContact ($from = WorkUtils::FROM_BIND)
		{
			switch ($this->changeType) {
				case WorkConstUtil::ADD_EXTERNAL_CONTACT:
				case WorkConstUtil::ADD_HALF_EXTERNAL_CONTACT:
				case WorkConstUtil::DEL_EXTERNAL_CONTACT:
				case WorkConstUtil::DEL_FOLLOW_USER:
				case WorkConstUtil::EDIT_EXTERNAL_CONTACT:
				case WorkConstUtil::TRANSFER_FAIL:
					$jobId = \Yii::$app->p1->push(new WorkExternalContactJob([
						'xml'  => $this->postData,
						'from' => $from,
					]));

					break;
			}

			return '';
		}

		private function changeExternalChat ()
		{
			$jobId = \Yii::$app->p3->push(new WorkExternalChatJob([
				'xml' => $this->postData,
			]));

			return '';
		}

		public function actionIndex ($id)
		{
			$sReplayEchoStr = '';
			$workCorp       = WorkCorp::findOne($id);

			if (!empty($workCorp) && !empty($workCorp->workCorpBind->token) && !empty($workCorp->workCorpBind->encode_aes_key)) {
				if (\Yii::$app->request->isGet) {
					if (!empty($_GET['echostr'])) {
						$messageCrypt = new MessageCrypt($workCorp->workCorpBind->token, $workCorp->workCorpBind->encode_aes_key, $workCorp->corpid);

						$decryptCode = $messageCrypt->VerifyURL($_GET['msg_signature'], $_GET['timestamp'], $_GET['nonce'], $_GET['echostr'], $sReplayEchoStr);

						if ($decryptCode == 0) {
							echo $sReplayEchoStr;
						}
					} else {
						echo $sReplayEchoStr;
					}
				} elseif (\Yii::$app->request->isPost) {
					$checkMD5 = md5($this->postData);

					if (empty(\Yii::$app->cache->get($checkMD5))) {
						\Yii::$app->cache->set($checkMD5, time(), 60);

						\Yii::error($this->postData, 'event-index-postData');

						$this->getCommonParameters();

						switch ($this->event) {
							case WorkConstUtil::CHANGE_CONTACT:
								$sReplayEchoStr = $this->changeContact();

								break;
							case WorkConstUtil::BATCH_JOB_RESULT:
								$sReplayEchoStr = $this->batchJobResult();

								break;
							case WorkConstUtil::CHANGE_EXTERNAL_CONTACT:
								$sReplayEchoStr = $this->changeExternalContact();

								break;
							case WorkConstUtil::CHANGE_EXTERNAL_CHAT:
								$sReplayEchoStr = $this->changeExternalChat();

								break;
							default:
								break;
						}
					}

					echo $sReplayEchoStr;
				}
			} else {
				echo $sReplayEchoStr;
			}
		}

		private function sendToQueue ()
		{
			switch ($this->msgType) {
				case WorkConstUtil::AGENT_MSG_EVENT_TYPE:
					return $this->event();

					break;
				case WorkConstUtil::AGENT_MSG_TEXT_TYPE:
					return $this->text();

					break;
				case WorkConstUtil::AGENT_MSG_IMAGE_TYPE:
					return $this->image();

					break;
				case WorkConstUtil::AGENT_MSG_VOICE_TYPE:
					return $this->voice();

					break;
				case WorkConstUtil::AGENT_MSG_VIDEO_TYPE:
					return $this->video();

					break;
				case WorkConstUtil::AGENT_MSG_LOCATION_TYPE:
					return $this->location();

					break;
				case WorkConstUtil::AGENT_MSG_LINK_TYPE:
					return $this->link();

					break;
				default:
					return "";

					break;
			}
		}

		private function event ()
		{
			switch ($this->event) {
				//成员关注及取消关注事件
				case WorkConstUtil::EVENT_SUBSCRIBE:
				case WorkConstUtil::EVENT_UNSUBSCRIBE:
					$agentItem = $this->xml->getElementsByTagName('AgentID');
					$agentId   = $agentItem->item(0)->nodeValue;

					$corp      = WorkCorp::findOne(['corpid' => $this->toUserName]);
					$corpAgent = WorkCorpAgent::findOne(['corp_id' => $corp->id, 'agentid' => $agentId, 'is_del' => 0]);

					if ($corp && $corpAgent) {
						try {
							WorkCorpAgent::getAgent($corp->id, $corpAgent->id, true);
						} catch (\Exception $e) {
							\Yii::error($e->getMessage(), 'work-event-agent-event');
						}

						return '';
					}

					break;

			}

			return '';
		}

		private function text ()
		{
			// 获取消息ID
			$msgIdItem = $this->xml->getElementsByTagName('MsgId');
			$msgId     = $msgIdItem->item(0)->nodeValue;

			// 获取文本信息
			$contentItem = $this->xml->getElementsByTagName('Content');
			$content     = $contentItem->item(0)->nodeValue;

			if (!empty($content)) {
				$firstStr = substr($content, 0, 1);

				if ($firstStr == '@') {
					$contentList = explode(' ', $content);

					if ($contentList > 1) {
						$fansId = substr($contentList[0], 1);
						unset($contentList[0]);
						$content = implode(' ', $contentList);

						$workUser = WorkUser::findOne(['corp_id' => $this->corpInfo->id, 'userid' => $this->fromUserName]);
						$fansInfo = Fans::findOne($fansId);

						if (!empty($workUser) && !empty($fansInfo)) {
							$workUserAuthorRelation = WorkUserAuthorRelation::findOne(['user_id' => $workUser->id, 'author_id' => $fansInfo->author_id, 'agent_id' => $this->corpAgent->id, 'status' => WorkUserAuthorRelation::SEND_OPEN]);

							if (!empty($workUserAuthorRelation)) {
								$sendResult = FansMsg::send($fansInfo->author->authorizer_appid, $fansInfo->id, FansMsg::TEXT_MSG, ['text' => $content], FansMsg::FROM_USER);
							}
						}

					}
				}
			}

			return '';
		}

		private function image ()
		{
			return '';
		}

		private function voice ()
		{
			return '';
		}

		private function video ()
		{
			return '';
		}

		private function location ()
		{
			return '';
		}

		private function link ()
		{
			return '';
		}

		public function actionAgent ($id)
		{
			$sReplayEchoStr = '';
			$workCorpAgent  = WorkCorpAgent::findOne($id);
			$workCorp       = $workCorpAgent->corp;

			if (!empty($workCorp) && !empty($workCorp->workCorpBind->token) && !empty($workCorp->workCorpBind->encode_aes_key)) {
				if (\Yii::$app->request->isGet) {
					if (!empty($_GET['echostr'])) {
						$messageCrypt = new MessageCrypt($workCorp->workCorpBind->token, $workCorp->workCorpBind->encode_aes_key, $workCorp->corpid);

						$decryptCode = $messageCrypt->VerifyURL($_GET['msg_signature'], $_GET['timestamp'], $_GET['nonce'], $_GET['echostr'], $sReplayEchoStr);

						if ($decryptCode == 0) {
							echo $sReplayEchoStr;
						}
					} else {
						echo $sReplayEchoStr;
					}
				} elseif (\Yii::$app->request->isPost) {
					$checkMD5 = md5($this->postData);

					if (empty(\Yii::$app->cache->get($checkMD5))) {
						\Yii::$app->cache->set($checkMD5, time(), 60);

						$this->getCommonParameters();
						\Yii::error($this->postData, 'event-agent-postData');

						if (empty($this->event) || in_array($this->event, [WorkConstUtil::EVENT_SUBSCRIBE, WorkConstUtil::EVENT_UNSUBSCRIBE])) {
							echo $this->sendToQueue();
							exit;
						}

						if (!empty($this->event)) {
							switch ($this->event) {
								case WorkConstUtil::CHANGE_CONTACT:
									$sReplayEchoStr = $this->changeContact(WorkUtils::FROM_AGENT);

									break;
								case WorkConstUtil::BATCH_JOB_RESULT:
									$sReplayEchoStr = $this->batchJobResult();

									break;
								case WorkConstUtil::CHANGE_EXTERNAL_CONTACT:
									$sReplayEchoStr = $this->changeExternalContact(WorkUtils::FROM_AGENT);

									break;
								case WorkConstUtil::CHANGE_EXTERNAL_CHAT:
									$sReplayEchoStr = $this->changeExternalChat();

									break;
								default:
									break;
							}
						}
					}

					echo $sReplayEchoStr;
				}
			} else {
				echo $sReplayEchoStr;
			}
		}
	}