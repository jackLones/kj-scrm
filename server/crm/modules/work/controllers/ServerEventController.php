<?php

	namespace app\modules\work\controllers;

	use app\models\WorkCorp;
	use app\models\WorkSuiteConfig;
	use app\modules\work\components\BaseController;
	use app\queue\RegisterCorpJob;
	use app\util\WorkConstUtil;
	use dovechen\yii2\weWork\components\MessageCrypt;

	/**
	 * Class EventController
	 * @package app\modules\work\controllers
	 */
	class ServerEventController extends BaseController
	{
		public $receiveId;
		public $token;
		public $encodingAESKey;
		public $toUserInfo;

		public $serviceCorpId;
		public $timeStamp;
		public $infoType;
		public $authCorpId;

		/** @var \DOMDocument */
		public $xml;
		public $encryptMsg;
		public $returnEncryptMsg;
		public $decryptCode;
		public $postData;

		public function beforeAction ($action)
		{
			$this->enableCsrfValidation = false;
			$suiteId                    = $_GET['id'];
			if (!empty($suiteId)) {
				if (\Yii::$app->request->isPost) {


					$this->encryptMsg = @file_get_contents("php://input");

					\Yii::info('encryptMsg: ' . $this->encryptMsg);
					if (!empty($this->encryptMsg)) {
						$this->xml = new \DOMDocument();
						$this->xml->loadXML($this->encryptMsg);

						$toUserNameItem = $this->xml->getElementsByTagName("ToUserName");
						$toUserName     = $toUserNameItem->item(0)->nodeValue;

						$agentId  = '';
						$xpath    = new \DOMXPath($this->xml);
						$agentTmp = $xpath->query('AgentID')->length;
						if ($agentTmp != 0) {
							$agentIdItem = $this->xml->getElementsByTagName("AgentID");
							$agentId     = $agentIdItem->item(0)->nodeValue;
						}

						$this->toUserInfo = WorkSuiteConfig::findOne($suiteId);

						if (!empty($this->toUserInfo)) {
							$this->receiveId      = $toUserName;
							$this->token          = $this->toUserInfo->token;
							$this->encodingAESKey = $this->toUserInfo->encode_aes_key;

							$tmp = $xpath->query('Encrypt')->length;
							if ($tmp != 0) {
								$signature         = isset($_GET['msg_signature']) ? $_GET['msg_signature'] : $_GET['signature'];
								$this->decryptCode = $this->encodeData($signature, $_GET['timestamp'], $_GET['nonce']);
							} else {
								$this->postData = $this->encryptMsg;
							}

						} else {
							echo '';
							exit();
						}

						$this->xml = new \DOMDocument();
						$this->xml->loadXML($this->postData);
					}
				}
			}

			return parent::beforeAction($action); // TODO: Change the autogenerated stub
		}

		/**
		 * @param $msgSignTrue
		 * @param $timestamp
		 * @param $nonce
		 *
		 * @return int
		 */
		private function encodeData ($msgSignTrue, $timestamp, $nonce)
		{
			// 对返回的第三方平台安全TICKET进行解密
			$messageCrypt = new MessageCrypt($this->token, $this->encodingAESKey, $this->receiveId);
			$decryptCode  = $messageCrypt->DecryptMsg($msgSignTrue, $timestamp, $nonce, $this->encryptMsg, $this->postData);

			return $decryptCode;
		}

		/**
		 * @param $replyMsg
		 * @param $timeStamp
		 * @param $nonce
		 *
		 * @return int
		 */
		private function decodeData ($replyMsg, $timeStamp, $nonce)
		{
			// 对返回的第三方平台安全TICKET进行解密
			$messageCrypt = new MessageCrypt($this->token, $this->encodingAESKey, $this->receiveId);
			$encryptCode  = $messageCrypt->EncryptMsg($replyMsg, $timeStamp, $nonce, $this->returnEncryptMsg);

			return $encryptCode;
		}

		private function getCommonParameters ()
		{
			// 服务商corpid
			$serviceCorpIdItem   = $this->xml->getElementsByTagName('ServiceCorpId');
			$this->serviceCorpId = $serviceCorpIdItem->item(0)->nodeValue;

			// 事件类型
			$infoTypeItem   = $this->xml->getElementsByTagName("InfoType");
			$this->infoType = $infoTypeItem->item(0)->nodeValue;

			// 回调事件的时间戳
			$timestampItem   = $this->xml->getElementsByTagName('TimeStamp');
			$this->timeStamp = $timestampItem->item(0)->nodeValue;

			// 企业corpid
			$authCorpIdItem   = $this->xml->getElementsByTagName('AuthCorpId');
			$this->authCorpId = $authCorpIdItem->item(0)->nodeValue;

			\Yii::error($this->serviceCorpId, '$this->serviceCorpId');
			\Yii::error($this->infoType, '$this->infoType');
			\Yii::error($this->timeStamp, '$this->timeStamp');
			\Yii::error($this->authCorpId, '$this->authCorpId');
		}

		private function registerCorp ()
		{
			$jobId = \Yii::$app->p2->push(new RegisterCorpJob([
				'xml' => $this->postData
			]));

			return '';
		}

		private function batchJobResult ()
		{
			return '';
		}

		public function actionIndex ($id)
		{
			$sReplayEchoStr = '';
			$workSuiteData  = WorkSuiteConfig::findOne($id);

			if (\Yii::$app->request->isGet) {
				if (!empty($_GET['echostr'])) {
					// 对返回的第三方平台安全TICKET进行解密
					$messageCrypt = new MessageCrypt($workSuiteData->token, $workSuiteData->encode_aes_key, $workSuiteData->provider->provider_corpid);

					$decryptCode = $messageCrypt->VerifyURL($_GET['msg_signature'], $_GET['timestamp'], $_GET['nonce'], $_GET['echostr'], $sReplayEchoStr);

					if ($decryptCode == 0) {
						echo $sReplayEchoStr;
					}
				} else {
					echo $sReplayEchoStr;
				}
			} elseif (\Yii::$app->request->isPost) {
				$checkMD5 = md5($this->postData);

				if (empty(\Yii::$app->cache->get($checkMD5))) {
					\Yii::$app->cache->set($checkMD5, time(), 60);

					\Yii::error($this->postData, 'event-index-postData');

					$this->getCommonParameters();

					switch ($this->infoType) {
						case WorkConstUtil::REGISTER_CORP:
							$sReplayEchoStr = $this->registerCorp();

							break;
						case WorkConstUtil::BATCH_JOB_RESULT:
							$sReplayEchoStr = $this->batchJobResult();

							break;
						default:
							break;
					}
				}

				echo $sReplayEchoStr;
			}
		}
	}
