<?php

	namespace app\models;

	use app\components\InvalidDataException;
	use app\components\InvalidParameterException;
	use app\util\DateUtil;
	use app\util\MsgUtil;
	use app\util\SUtils;
	use Yii;
	use yii\helpers\Json;

	/**
	 * This is the model class for table "{{%mini_msg}}".
	 *
	 * @property int               $id
	 * @property int               $mini_id       小程序用户ID
	 * @property int               $kf_id         客服ID
	 * @property int               $from          发送方，1：小程序用户、2：用户、3：客服
	 * @property int               $to            接收方，1：小程序、2：用户、3：客服
	 * @property string            $content       消息内容
	 * @property int               $isread        是否已读，0：未读、1：已读
	 * @property int               $content_type  消息类型，1：文本（text）、2：图片（img）、3：小程序卡片（miniprogrampage）
	 * @property int               $attachment_id 附件id
	 * @property string            $create_time   创建时间
	 *
	 * @property Attachment        $attachment
	 * @property KfUser            $kf
	 * @property MiniUser          $mini
	 * @property MiniMsgMaterial[] $miniMsgMaterials
	 */
	class MiniMsg extends \yii\db\ActiveRecord
	{
		const FROM_MINI = 1;
		const FROM_USER = 2;
		const FROM_KF = 3;

		const TO_MINI = 1;
		const TO_USER = 2;
		const TO_KF = 3;

		const TEXT_MSG = 1;
		const IMG_MSG = 2;
		const MINI_MSG = 3;

		const MSG_UN_READ = 0;
		const MSG_IS_READ = 1;

		/**
		 * {@inheritdoc}
		 */
		public static function tableName ()
		{
			return '{{%mini_msg}}';
		}

		/**
		 * {@inheritdoc}
		 */
		public function rules ()
		{
			return [
				[['mini_id', 'kf_id', 'from', 'to', 'isread', 'content_type', 'attachment_id'], 'integer'],
				[['content'], 'string'],
				[['create_time'], 'safe'],
				[['attachment_id'], 'exist', 'skipOnError' => true, 'targetClass' => Attachment::className(), 'targetAttribute' => ['attachment_id' => 'id']],
				[['kf_id'], 'exist', 'skipOnError' => true, 'targetClass' => KfUser::className(), 'targetAttribute' => ['kf_id' => 'id']],
				[['mini_id'], 'exist', 'skipOnError' => true, 'targetClass' => MiniUser::className(), 'targetAttribute' => ['mini_id' => 'id']],
			];
		}

		/**
		 * {@inheritdoc}
		 */
		public function attributeLabels ()
		{
			return [
				'id'            => Yii::t('app', 'ID'),
				'mini_id'       => Yii::t('app', '小程序用户ID'),
				'kf_id'         => Yii::t('app', '客服ID'),
				'from'          => Yii::t('app', '发送方，1：小程序用户、2：用户、3：客服'),
				'to'            => Yii::t('app', '接收方，1：小程序、2：用户、3：客服'),
				'content'       => Yii::t('app', '消息内容'),
				'isread'        => Yii::t('app', '是否已读，0：未读、1：已读'),
				'content_type'  => Yii::t('app', '消息类型，1：文本（text）、2：图片（img）、3：小程序卡片（miniprogrampage）'),
				'attachment_id' => Yii::t('app', '附件id'),
				'create_time'   => Yii::t('app', '创建时间'),
			];
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getAttachment ()
		{
			return $this->hasOne(Attachment::className(), ['id' => 'attachment_id']);
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getKf ()
		{
			return $this->hasOne(KfUser::className(), ['id' => 'kf_id']);
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getMini ()
		{
			return $this->hasOne(MiniUser::className(), ['id' => 'mini_id']);
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getMiniMsgMaterials ()
		{
			return $this->hasMany(MiniMsgMaterial::className(), ['msg_id' => 'id']);
		}

		/**
		 * {@inheritDoc}
		 * @return bool
		 */
		public function beforeSave ($insert)
		{
			$this->content = rawurlencode($this->content);

			return parent::beforeSave($insert); // TODO: Change the autogenerated stub
		}

		/**
		 * {@inheritDoc}
		 */
		public function afterFind ()
		{
			if (!empty($this->content)) {
				$this->content = rawurldecode($this->content);
			}

			parent::afterFind();
		}

		/**
		 *
		 * @return array
		 *
		 */
		public function dumpData ()
		{
			$from = [
				'type' => $this->from,
				'data' => [],
			];
			$to   = [
				'type' => $this->to,
				'data' => [],
			];

			switch ($this->from) {
				case self::FROM_MINI:
					$from['data'] = $this->mini->dumpMinData();

					break;
				case self::FROM_USER:
					$from['data'] = $this->mini->author->wxAuthorizeInfo->dumpMinData();

					break;
				case self::FROM_KF:
					$from['data'] = $this->kf->dumpData();

					break;
				default:
					break;
			}

			switch ($this->to) {
				case self::FROM_MINI:
					$to['data'] = $this->mini->dumpMinData();

					break;
				case self::FROM_USER:
					$to['data'] = $this->mini->author->wxAuthorizeInfo->dumpMinData();

					break;
				case self::FROM_KF:
					$to['data'] = $this->kf->dumpData();

					break;
				default:
					break;
			}

			switch ($this->content_type) {
				case self::IMG_MSG:
					if ($this->from == self::FROM_MINI && !empty($this->miniMsgMaterials)) {
						$content = [];
						/** @var MiniMsgMaterial $miniMsgMaterial */
						foreach ($this->miniMsgMaterials as $miniMsgMaterial) {
							array_push($content, $miniMsgMaterial->dumpMiniData());
						}

						$this->content = $content;
					}

					if ($this->from != self::FROM_MINI && !empty($this->attachment)) {
						$this->content = $this->attachment->dumpMsgData();
					}

					break;
				default:
					break;
			}

			return [
				'id'          => $this->id,
				'is_read'     => $this->isread,
				'from'        => $from,
				'to'          => $to,
				'content'     => $this->content,
				'type'        => $this->content_type,
				'create_time' => $this->create_time,
			];
		}

		/**
		 * 创建消息
		 *
		 * @param      $miniId
		 * @param      $msgType
		 * @param      $content
		 * @param int  $from
		 * @param int  $to
		 * @param null $kfId
		 *
		 * @return int
		 *
		 * @throws InvalidDataException
		 * @throws \app\components\InvalidParameterException
		 * @throws \app\components\NotAllowException
		 * @throws \yii\base\Exception
		 * @throws \yii\base\InvalidConfigException
		 */
		public static function create ($miniId, $msgType, $content, $from = self::FROM_MINI, $to = self::TO_USER, $kfId = NULL)
		{
			$miniMsgMaterialType = 0;

			$miniMsg          = new MiniMsg();
			$miniMsg->mini_id = $miniId;

			if (!empty($kfId)) {
				$miniMsg->kf_id = $kfId;
			}

			$miniMsg->from = $from;
			$miniMsg->to   = $to;

			if (!empty($content['attachment_id'])) {
				$miniMsg->attachment_id = $content['attachment_id'];
			}

			switch ($msgType) {
				case static::TEXT_MSG:
					$miniMsg->content = $content;

					break;
				case static::IMG_MSG:
					$miniMsg->content = Json::encode($content, JSON_UNESCAPED_UNICODE);

					$miniMsgMaterialType = MiniMsgMaterial::IMAGE_TYPE;

					break;
				case static::MINI_MSG:
					$miniMsg->content = Json::encode($content['title'], JSON_UNESCAPED_UNICODE);
					break;
				default:
					break;
			}

			if ($miniMsg->from != static::FROM_MINI) {
				$miniMsg->isread = static::MSG_IS_READ;
			} else {
				$miniMsg->isread = static::MSG_UN_READ;
			}

			$miniMsg->content_type = $msgType;
			$miniMsg->create_time  = DateUtil::getCurrentTime();

			if ($miniMsg->validate() && $miniMsg->save()) {
				$miniMsg->mini->last_time = time();
				$miniMsg->mini->save();

				$ignoreData = [static::TEXT_MSG, static::MINI_MSG];

				if ($miniMsg->from == static::FROM_MINI && !in_array($msgType, $ignoreData)) {
					MiniMsgMaterial::create($miniMsg->mini->author_id, $miniMsg->mini_id, $miniMsg->id, $content, $miniMsgMaterialType);
				}

				return $miniMsg->id;
			} else {
				throw new InvalidDataException(SUtils::modelError($miniMsg));
			}
		}

		/**
		 * 获取粉丝消息列表
		 *
		 * @param      $miniId
		 * @param int  $lastId
		 * @param int  $contentSize
		 * @param bool $onlyContent
		 *
		 * @return array
		 *
		 */
		public static function getMsgList ($miniId, $lastId = 0, $contentSize = 10, $onlyContent = false)
		{
			$msgList = [];

			$msgData = static::find()->where(['mini_id' => $miniId]);

			if ($lastId != 0) {
				$msgData = $msgData->andWhere(['<', 'id', $lastId]);
			}

			$unreadMsgData = $msgData;

			$msgCount    = $msgData->count();
			$msgData     = $msgData->limit($contentSize)->orderBy(['create_time' => SORT_DESC, 'id' => SORT_DESC])->all();
			$unReadCount = $unreadMsgData->andWhere(['isread' => static::MSG_UN_READ])->count();
			if (!empty($msgData)) {
				/** @var MiniMsg $msgInfo */
				foreach ($msgData as $msgInfo) {
					$msgData = $msgInfo->dumpData();
					if ($onlyContent) {
						$msgData['unread'] = $unReadCount;
					}
					array_push($msgList, $msgData);
				}
			}

			if ($onlyContent) {
				$result = $msgList;
			} else {
				$result = [
					'unread'   => $unReadCount,
					'mini_id'  => $miniId,
					'total'    => $msgCount,
					'count'    => count($msgList),
					'msg_list' => $msgList,
				];
			}

			return $result;
		}

		/**
		 * 发送客服消息
		 *
		 * @param string $appid      公众号appid
		 * @param int    $miniId     粉丝ID
		 * @param int    $msgType    消息类型
		 * @param array  $msgContent 消息内容
		 * @param int    $from       来源
		 *
		 * @return array|bool|int
		 *
		 * @throws InvalidDataException
		 * @throws \Throwable
		 * @throws \app\components\ForbiddenException
		 * @throws \app\components\InvalidParameterException
		 * @throws \app\components\NotAllowException
		 * @throws \yii\base\Exception
		 * @throws \yii\base\InvalidConfigException
		 * @throws \yii\db\StaleObjectException
		 */
		public static function send ($appid, $miniId, $msgType, $msgContent, $from = self::FROM_USER)
		{
			$miniUserInfo = MiniUser::findOne(['id' => $miniId]);
			if (!empty($miniUserInfo)) {
				$result     = MsgUtil::send($appid, $miniUserInfo->openid, $msgType, $msgContent);
				$sendStatus = isset($result['errmsg']) && $result['errmsg'] == 'ok';
				if ($sendStatus) {
					if ($msgType == static::TEXT_MSG) {
						$content = $msgContent['text'];
					} else {
						$content = $msgContent;
					}
					$miniMsgId = static::create($miniId, $msgType, $content, $from, static::TO_MINI);

					return $miniMsgId;
				}

				return $result;
			}

			return false;
		}

		/**
		 * 根据消息ID，将消息设置为已读状态
		 *
		 * @param int|string|array $msgId
		 *
		 * @return int
		 *
		 * @throws InvalidParameterException
		 */
		public static function readMsgByMsgId ($msgId)
		{
			if (empty($msgId)) {
				throw new InvalidParameterException('缺少必要参数！');
			}

			if (!is_array($msgId) && strpos($msgId, ',') !== false) {
				$msgId = explode(',', $msgId);
			}

			return static::updateAll(['isread' => static::MSG_IS_READ], ['id' => $msgId, 'isread' => static::MSG_UN_READ]);
		}

		/**
		 * 根据粉丝ID，将消息设置为已读状态
		 *
		 * @param int|string $miniId
		 *
		 * @return int
		 *
		 * @throws InvalidParameterException
		 */
		public static function readMsgByMiniId ($miniId)
		{
			if (empty($miniId)) {
				throw new InvalidParameterException('缺少必要参数！');
			}

			$unReadCount = static::find()->where(['mini_id' => $miniId, 'isread' => static::MSG_UN_READ])->count();
			if ($unReadCount > 0) {
				return static::updateAll(['isread' => static::MSG_IS_READ], ['mini_id' => $miniId, 'isread' => static::MSG_UN_READ]);
			}

			return true;
		}
	}
