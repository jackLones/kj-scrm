<?php

	namespace app\models;

	use app\components\InvalidDataException;
	use app\util\DateUtil;
	use app\util\SUtils;
	use app\util\WorkUtils;
	use dovechen\yii2\weWork\src\dataStructure\ExternalContactMsgTemplate;
	use Yii;
	use yii\helpers\ArrayHelper;
	use yii\helpers\Json;
	use app\util\MsgUtil;
	use app\components\InvalidParameterException;

	/**
	 * This is the model class for table "{{%work_welcome}}".
	 *
	 * @property int            $id
	 * @property int            $type                             1：全体成员；2：成员；3：部门
	 * @property int            $source                           来源0 系统 1渠道活码
	 * @property int            $corp_id                          授权的企业ID
	 * @property int            $user_id                          成员ID
	 * @property int            $department_id                    成员ID
	 * @property string         $user_ids                         成员ID
	 * @property string         $time_json                        生效时间
	 * @property int            $status                           是否启用1启用0不启用
	 * @property int            $sync_attachment_id               同步后的素材id
	 * @property int            $work_material_id                 企业微信素材id
	 * @property int            $attachment_id                    内容引擎id
	 * @property int            $groupId                          分组id
	 * @property int            $material_sync                    0不同步到内容库1同步
	 * @property string         $context                          欢迎语内容
	 * @property string         $update_time                      更新时间
	 * @property string         $create_time                      创建时间
	 * @property string         $department                       部门id
	 *
	 * @property WorkCorp       $corp
	 * @property WorkDepartment $department0
	 * @property WorkUser       $user
	 */
	class WorkWelcome extends \yii\db\ActiveRecord
	{
		const SEND_ALL        = 1;
		const SEND_USER       = 2;
		const SEND_DEPARTMENT = 3;

		/**
		 * {@inheritdoc}
		 */
		public static function tableName ()
		{
			return '{{%work_welcome}}';
		}

		/**
		 * {@inheritdoc}
		 */
		public function rules ()
		{
			return [
				[['type', 'corp_id', 'user_id', 'department_id', 'work_material_id', 'sync_attachment_id', 'source', 'attachment_id', 'material_sync', 'groupId', 'status'], 'integer'],
				[['context', 'time_json', 'user_ids'], 'string'],
				[['update_time', 'create_time'], 'safe'],
				[['department'], 'string', 'max' => 255],
				[['corp_id'], 'exist', 'skipOnError' => true, 'targetClass' => WorkCorp::className(), 'targetAttribute' => ['corp_id' => 'id']],
				[['department_id'], 'exist', 'skipOnError' => true, 'targetClass' => WorkDepartment::className(), 'targetAttribute' => ['department_id' => 'id']],
				[['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => WorkUser::className(), 'targetAttribute' => ['user_id' => 'id']],
			];
		}

		/**
		 * {@inheritdoc}
		 */
		public function attributeLabels ()
		{
			return [
				'id'                 => Yii::t('app', 'ID'),
				'type'               => Yii::t('app', '1：全体成员；2：成员；3：部门'),
				'source'             => Yii::t('app', '来源0 系统 1渠道活码'),
				'corp_id'            => Yii::t('app', '授权的企业ID'),
				'user_id'            => Yii::t('app', '成员ID'),
				'department_id'      => Yii::t('app', '成员ID'),
				'user_ids'           => Yii::t('app', '成员ID'),
				'time_json'          => Yii::t('app', '生效时间'),
				'attachment_id'      => Yii::t('app', '内容引擎id'),
				'groupId'            => Yii::t('app', '分组id'),
				'material_sync'      => Yii::t('app', '0不同步到内容库1同步'),
				'status'             => Yii::t('app', '是否启用1启用0不启用'),
				'sync_attachment_id' => Yii::t('app', '同步后的素材id'),
				'work_material_id'   => Yii::t('app', '企业微信素材id'),
				'context'            => Yii::t('app', '欢迎语内容'),
				'update_time'        => Yii::t('app', '更新时间'),
				'create_time'        => Yii::t('app', '创建时间'),
				'department'         => Yii::t('app', '部门id'),
			];
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getCorp ()
		{
			return $this->hasOne(WorkCorp::className(), ['id' => 'corp_id']);
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getDepartment0 ()
		{
			return $this->hasOne(WorkDepartment::className(), ['id' => 'department_id']);
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getUser ()
		{
			return $this->hasOne(WorkUser::className(), ['id' => 'user_id']);
		}

		/**
		 * {@inheritDoc}
		 * @return bool
		 */
		public function beforeSave ($insert)
		{
			$this->context = rawurlencode($this->context);

			return parent::beforeSave($insert); // TODO: Change the autogenerated stub
		}

		/**
		 * {@inheritDoc}
		 */
		public function afterFind ()
		{
			if (!empty($this->context)) {
				$this->context = rawurldecode($this->context);
			}

			parent::afterFind(); // TODO: Change the autogenerated stub
		}

		/**
		 * @param     $corpId
		 * @param     $welcomeCode
		 * @param int $sendType
		 * @param int $sendId
		 * @param int $work_external_contact_id
		 * @param int $follow_user_id
		 *
		 * @return bool
		 *
		 * @throws InvalidDataException
		 * @throws InvalidParameterException
		 * @throws \ParameterError
		 * @throws \QyApiError
		 * @throws \Throwable
		 * @throws \app\components\ForbiddenException
		 * @throws \app\components\NotAllowException
		 * @throws \yii\base\InvalidConfigException
		 * @throws \yii\db\StaleObjectException
		 */
		public static function send ($corpId, $welcomeCode, $sendType = self::SEND_ALL, $sendId = 0, $work_external_contact_id = 0, $follow_user_id = 0, $state = '')
		{
			\Yii::error('begin', '$sendData');
			\Yii::error($corpId, '$sendData');
			\Yii::error($welcomeCode, '$sendData');
			\Yii::error($sendType, '$sendData');
			\Yii::error($sendId, '$sendData');
			\Yii::error($work_external_contact_id, '$sendData');
			\Yii::error($follow_user_id, '$sendData');
			\Yii::error($state, '$sendData');
//			if ($sendType == static::SEND_ALL) {
//				$sendRule = static::findOne(['corp_id' => $corpId, 'type' => static::SEND_ALL]);
//			} else if ($sendType == static::SEND_USER) {
//				$sendRule = static::findOne(['corp_id' => $corpId, 'type' => static::SEND_USER, 'user_id' => $sendId]);
//			} else if ($sendType == static::SEND_DEPARTMENT) {
//				$sendRule = static::findOne(['corp_id' => $corpId, 'type' => static::SEND_USER, 'department_id' => $sendId]);
//			}
			if (Yii::$app->cache->exists("$work_external_contact_id" . "$follow_user_id" . "$corpId")) {
				return false;
			}
			Yii::$app->cache->set("$work_external_contact_id" . "$follow_user_id" . "$corpId", 1, 5);
			//渠道活码欢迎语
			$content          = '';
			$attachment_id    = 0;
			$work_material_id = 0;
			$contactResult    = WorkContactWay::getContactWay($work_external_contact_id, $follow_user_id);
			$from             = 0;
			$radar            = [];
			\Yii::error($contactResult, 'contactResult');

			if (!empty($contactResult['contact_way_id'])) {
				//渠道活码
				$contact_way = WorkContactWay::findOne($contactResult['contact_way_id']);
				if ($contact_way->status == 1) {
					//开启了渠道活码欢迎语
					$content = WorkContactWay::getDateWeekWelcome($contact_way->id);
					if (empty($content)) {
						//单独的活码欢迎语
						$content                     = static::welcomeContent($contact_way->content, $contactResult['external_id']);
						$attachment_id               = $contact_way->attachment_id;
						$work_material_id            = $contact_way->work_material_id;
						$radar['associat_id']        = $contact_way->id;
						$radar['associat_type']      = 1;
						$radar['associat_param']     = NULL;
						$radar['attachment_id']      = $contact_way->attachment_id;
						$radar['sync_attachment_id'] = $contact_way->sync_attachment_id;

					} else {
						//$attachment_id      = isset($content['attachment_id']) ? $content['attachment_id'] : 0;
						$work_material_id   = isset($content['work_material_id']) ? $content['work_material_id'] : 0;
						//$sync_attachment_id = isset($content['sync_attachment_id']) ? $content['sync_attachment_id'] : 0;

						if (isset($content['radar'], $content['radar']['radar_open']) && $content['radar']['radar_open'] > 0) {
							$radar                       = $content['radar'];
							$radar['associat_id']        = $contact_way->id;
							$radar['associat_type']      = 1;
							/*$radar['attachment_id']      = $attachment_id;
							$radar['sync_attachment_id'] = $sync_attachment_id;*/
							unset($content['radar']);
						}

						$content = static::welcomeContent(Json::encode($content), $contactResult['external_id']);
					}
					\Yii::error($content, '$content1');
				}
			} elseif (!empty($contactResult['fission_id'])) {
				//裂变任务
				$fission = Fission::findOne($contactResult['fission_id']);
				if (!empty($fission) && !empty($fission->status)) {
					$external_id = $contactResult['external_id'];
					$stateArr    = explode('_', $contactResult['state']);
					$welcomeArr  = json_decode($fission->welcome, 1);
					$content     = [];
					if (!empty($welcomeArr['text_content'])) {
						$content['text'] = ['content' => static::welcomeContent($welcomeArr['text_content'], $contactResult['external_id'])];
					}
					$state     = $stateArr[0] . '_' . $fission->id . '_' . $external_id;
					$web_url   = \Yii::$app->params['web_url'];
					$workCorp  = WorkCorp::findOne($fission->corp_id);
					$url       = $web_url . Fission::H5_URL . '?corp_id=' . $fission->corp_id . '&corpid=' . $workCorp->corpid . '&agent_id=' . $fission->agent_id . '&assist=' . $state;
					$corpAgent = WorkCorpAgent::findOne($fission->agent_id);
					if ($corpAgent->agent_type == WorkCorpAgent::AUTH_AGENT) {
						$url .= '&suite_id=' . $corpAgent->suite->suite_id;
					}
					$content['link'] = [
						'title'  => $welcomeArr['link_start_title'],
						'picurl' => \Yii::$app->params['site_url'] . $welcomeArr['link_pic_url'],
						'desc'   => $welcomeArr['link_desc'],
						'url'    => $url,
					];
					\Yii::error($content, '$content');
					$content = json_encode($content, JSON_UNESCAPED_UNICODE);
				}
			} elseif (!empty($contactResult['award_id'])) {
				//抽奖任务
				$award = AwardsActivity::findOne($contactResult['award_id']);
				if (!empty($award) && !empty($award->status) && $award->is_del == 0) {
					$external_id = $contactResult['external_id'];
					$stateArr    = explode('_', $contactResult['state']);
					$welcomeArr  = json_decode($award->welcome, 1);
					$content     = [];
					if (!empty($welcomeArr['text_content'])) {
						$content['text'] = ['content' => static::welcomeContent($welcomeArr['text_content'], $contactResult['external_id'])];
					}
					$state     = $stateArr[0] . '_' . $award->id . '_' . $stateArr[2];
					$web_url   = \Yii::$app->params['web_url'];
					$workCorp  = WorkCorp::findOne($award->corp_id);
					$url       = $web_url . AwardsActivity::H5_URL . '?corp_id=' . $award->corp_id . '&corpid=' . $workCorp->corpid . '&agent_id=' . $award->agent_id . '&assist=' . $state;
					$corpAgent = WorkCorpAgent::findOne($award->agent_id);
					if ($corpAgent->agent_type == WorkCorpAgent::AUTH_AGENT) {
						$url .= '&suite_id=' . $corpAgent->suite->suite_id;
					}
					$content['link'] = [
						'title'  => $welcomeArr['link_start_title'],
						'picurl' => \Yii::$app->params['site_url'] . $welcomeArr['link_pic_url'],
						'desc'   => $welcomeArr['link_desc'],
						'url'    => $url,
					];
					\Yii::error($content, '$content_award');
					$content = json_encode($content, JSON_UNESCAPED_UNICODE);
				}
			} elseif (!empty($contactResult['red_pack_id'])) {
				//红包裂变
				$redPack = RedPack::findOne($contactResult['red_pack_id']);
				if (!empty($redPack) && !empty($redPack->status)) {
					$external_id = $contactResult['external_id'];
					$welcomeArr  = json_decode($redPack->welcome, 1);
					$content     = [];
					if (!empty($welcomeArr['text_content'])) {
						$text_content    = static::welcomeContent($welcomeArr['text_content'], $external_id);
						$text_content    = str_replace("【活动名称】", $redPack->title, $text_content);
						$content['text'] = ['content' => $text_content];
					}
					//点击链接是进入自己的页面
					$state     = RedPack::RED_HEAD . '_' . $redPack->id . '_' . $external_id;
					$web_url   = \Yii::$app->params['web_url'];
					$workCorp  = WorkCorp::findOne($redPack->corp_id);
					$url       = $web_url . RedPack::H5_URL . '?corp_id=' . $redPack->corp_id . '&corpid=' . $workCorp->corpid . '&agent_id=' . $redPack->agent_id . '&assist=' . $state;
					$corpAgent = WorkCorpAgent::findOne($redPack->agent_id);
					if ($corpAgent->agent_type == WorkCorpAgent::AUTH_AGENT) {
						$url .= '&suite_id=' . $corpAgent->suite->suite_id;
					}
					$content['link'] = [
						'title'  => $welcomeArr['link_title'],
						'picurl' => \Yii::$app->params['site_url'] . $welcomeArr['link_pic_url'],
						'desc'   => $welcomeArr['link_desc'],
						'url'    => $url,
					];
					\Yii::error($content, 'red_content');
					$content = json_encode($content, JSON_UNESCAPED_UNICODE);
				}
			} elseif (!empty($contactResult['chat_way_id'])) {
				//群活码的欢迎语
				$content  = [];
				$chat_way = WorkChatContactWay::findOne($contactResult['chat_way_id']);
				if (!empty($chat_way)) {
					if (!empty($chat_way->content)) {
						$content['text'] = ['content' => static::welcomeContent($chat_way->content, $contactResult['external_id'])];
					}
					$way_id = $chat_way->id;//当前活码id
					$chat   = WorkChatWayList::findOne(['way_id' => $way_id, 'is_del' => 0, 'status' => 1, 'chat_status' => 1]);
					if (!empty($chat)) {
						if ($chat_way->type == 1) {
							$count = WorkChatInfo::find()->where(['chat_id' => $chat->chat_id, 'status' => 1])->count();
						} else {
							$count = WorkExternalContactUserWayDetail::find()->where(['way_id' => $way_id, 'way_list_id' => $chat->id])->count();
						}
						if ($count >= $chat->limit) {
							$chat->chat_status = 2;
							$chat->save();
							$wayList = WorkChatWayList::getImage($way_id);
							$mediaId = $wayList['mediaId'];
						} else {
							//直接取当前图片发
							$mediaId             = $chat->media_id;
							$wayList['way_list'] = $chat->id;
							$wayList['chat_id']  = $chat->chat_id;

							if ($count + 1 >= $chat->limit) {
								$chat->chat_status = 2;
								$chat->save();
								WorkChatWayList::getImage($way_id);
							}
						}
					} else {
						$wayList = WorkChatWayList::getImage($way_id, 1);
						$mediaId = $wayList['mediaId'];
					}
					if (!empty($mediaId)) {
						$content['image'] = ['media_id' => $mediaId];
					}
					if (!empty($content)) {
						$from = 1;
					}
					\Yii::error($content, 'chat-welcome-content');
					$content = json_encode($content, JSON_UNESCAPED_UNICODE);
					WorkExternalContactUserWayDetail::insertData([
						'way_list_id' => $wayList['way_list'],
						'way_id'      => $way_id,
						'chat_id'     => $wayList['chat_id'],
						'user_id'     => $sendId,
						'external_id' => $work_external_contact_id,
					]);
				}
			} elseif (!empty($contactResult['baidu_way_id'])) {
				//百度联系我配置
				$contact_way = WorkContactWayBaidu::findOne($contactResult['baidu_way_id']);
				if (!empty($contact_way) && empty($contact_way->is_del) && $contact_way->status == 1) {
					$content          = static::welcomeContent($contact_way->content, $contactResult['external_id']);
					$attachment_id    = $contact_way->attachment_id;
					$work_material_id = $contact_way->work_material_id;
				}
			} elseif (!empty($contactResult['way_redpack_id'])) {
				//红包活动活码
				$wayRedpacket = WorkContactWayRedpacket::findOne($contactResult['way_redpack_id']);

				//红包活动是否已到期（每天会定时跑脚本确定活码是否已失效，此处只需确定红包活动是否已到期）
				if ($wayRedpacket->time_type == 2 && $wayRedpacket->redpacket_status == WorkContactWayRedpacket::RED_WAY_ISSUE) {
					$end_time = strtotime($wayRedpacket->end_time);
					if ($end_time <= time()) {
						$wayRedpacket->redpacket_status = WorkContactWayRedpacket::RED_PACKET_DISABLED;//已失效(红包活动)
						$wayRedpacket->save();
					}
				}

				if (!empty($wayRedpacket) && in_array($wayRedpacket->redpacket_status, [WorkContactWayRedpacket::RED_WAY_NOT_ISSUE, WorkContactWayRedpacket::RED_WAY_ISSUE, WorkContactWayRedpacket::RED_PACKET_DISABLED])) {
					$external_id = $contactResult['external_id'];
					if ($wayRedpacket->status == 1) {
						//开启了渠道活码欢迎语
						$content = WorkContactWayRedpacket::getDateWeekWelcome($wayRedpacket->id);
						if (empty($content)) {
							//单独的活码欢迎语
							$content = static::welcomeContent($wayRedpacket->content, $contactResult['external_id']);
						} else {
							$content = static::welcomeContent(Json::encode($content), $contactResult['external_id']);
						}
					}

					//发红包
					$redpacket_send = WorkContactWayRedpacketSend::setData($contactResult['way_redpack_id'], $contactResult['user_id'], $external_id);
					if (isset($redpacket_send['send_id']) && !empty($redpacket_send['send_id'])) {
						$send_id = $redpacket_send['send_id'];
						$redRule = $redpacket_send['red_rule'];

						//点击链接是进入领取红包页面
						$content         = Json::decode($content);
						$assist          = WorkContactWayRedpacket::REDPACKET_WAY . '_' . $wayRedpacket->id . '_' . $send_id . '_' . $external_id;
						$web_url         = \Yii::$app->params['web_url'];
						$workCorp        = WorkCorp::findOne($wayRedpacket->corp_id);
						$url             = $web_url . WorkContactWayRedpacket::H5_URL . '?corpid=' . $workCorp->corpid . '&assist=' . $assist . '&agent_id=' . $wayRedpacket->agent_id;
						$content['link'] = [
							'title'  => $redRule['title'],
							'picurl' => \Yii::$app->params['site_url'] . $redRule['pic_url'],
							'desc'   => $redRule['des'],
							'url'    => $url,
						];
						\Yii::error($content, 'red_content');
						$content = Json::encode($content);
					}
				}
			} elseif (!empty($contactResult['activity_id'])) {
				//任务宝
				$fans = WorkPublicActivityFansUser::corpPublicWelcomeSend($corpId, $sendId, $work_external_contact_id, $state);
				Yii::error($fans, '$fans');
				if (is_array($fans)) {
					$content = json_encode($fans, 288);
				}
			}
			//系统欢迎语
			if (empty($content)) {
				//针对成员的欢迎语
				$welcome_id = 0;
				$sendRule   = '';
				$welcome    = static::find()->andWhere(['status' => 1, 'type' => 2, 'corp_id' => $corpId])->select('id,user_ids')->all();
				if (!empty($welcome)) {
					foreach ($welcome as $wel) {
						$user_keys = json_decode($wel->user_ids, true);
						$user_ids  = array_column($user_keys, 'id');
						if (in_array($sendId, $user_ids)) {
							$welcome_id = $wel->id;
						}
					}
				}
				\Yii::error($welcome_id, '$welcome_id');
				if (!empty($welcome_id)) {
					$sendRule = WorkWelcome::findOne($welcome_id);
				}
				if (empty($sendRule)) {
					$workUser = WorkUser::findOne($sendId);
					Yii::error($sendId, '$sendId');
					Yii::error($workUser, '$workUser');
					if (!empty($workUser) && !empty($workUser->department)) {
						$departments = explode(",", $workUser->department);
						Yii::error($departments, '$departments');
						[$a, $departments] = WorkDepartment::GiveDepartmentReturnChildResult($workUser->corp_id, $departments, []);
						Yii::error($departments, '$departments');
						foreach ($departments as $key => $department) {
							if (!empty($department)) {
								if ($key != 1) {
									foreach ($department as $value) {
										$sendRule = self::find()->where(["corp_id" => $corpId, "status" => 1])->andWhere("FIND_IN_SET($value,department)")->one();
										if (!empty($sendRule)) {
											break 2;
										}
									}
								}
							}
						}
					}
				}
				if (empty($sendRule)) {
					//通用欢迎语
					$sendRule = static::findOne(['corp_id' => $corpId, 'type' => 1, 'status' => 1]);
				}
				if (empty($sendRule)) {
					throw new InvalidDataException('参数不正确。');
				}

				//beenlee 不同步 欢迎语雷达链接
				if ($sendRule['material_sync'] == 0) {
					$radar['associat_id']    = $sendRule['id'];
					$radar['associat_type']  = 2;
					$radar['associat_param'] = '';
				}

				$content          = static::welcomeContent($sendRule->context, $contactResult['external_id']);
				$attachment_id    = empty($sendRule->attachment_id) ? $sendRule->sync_attachment_id : $sendRule->attachment_id;
				$work_material_id = $sendRule->work_material_id;
			}

			if (empty($content)) {
				throw new InvalidDataException('参数不正确。');
			}
			$authCorp = WorkCorp::findOne($corpId);
			if ($authCorp === NULL) {
				throw new InvalidDataException('参数不正确。');
			}

			$workApi = WorkUtils::getWorkApi($corpId, WorkUtils::EXTERNAL_API);

			if (!empty($workApi)) {
				$sendData = Json::decode($content);
				\Yii::error($sendData, '$sendData');
				$sendData = static::returnData($sendData, $attachment_id, $work_material_id, $corpId, $from, $contactResult['user_id'], $contactResult['external_id'], $radar);
				if ($sendData) {
					$sendData['welcome_code'] = $welcomeCode;
//					try {
//						$fans = WorkPublicActivityFansUser::corpPublicWelcomeSend($corpId,$sendId,$work_external_contact_id,"activity_110_366_83");
//						Yii::error($fans,"sym-qiye");
//						if(is_array($fans)){
//							$fans['welcome_code'] = $welcomeCode;
//							$sendData = $fans;
//						}
//					}catch (\Exception $e){
//						Yii::error($e->getMessage(),"sym-qiye");
//					}
					\Yii::error(time(), '$sendData-sym-time');
					\Yii::error($sendData, '$sendData-0');
					try {
						$sendData = ExternalContactMsgTemplate::parseFromArray($sendData);
						$result   = $workApi->ECSendWelcomeMsg($sendData);

						if (isset($result['errcode']) && $result['errcode'] == 0) {
							if (!empty($contactResult['way_redpack_id']) && isset($send_id)) {
								$redpacket_send          = WorkContactWayRedpacketSend::findOne($send_id);
								$redpacket_send->is_send = 1;
								$redpacket_send->save();

								$wayRedpacket->out_amount += $redpacket_send->send_money;
								$wayRedpacket->save();
							}
						}
						\Yii::error($result, 'ECSendWelcomeMsg');
					} catch (\Exception $e) {
						\Yii::error($e->getMessage(), 'ECSendWelcomeMsg_error');
					}
				}

				return true;
			} else {
				return false;
			}
		}

		/**
		 * 返回发送欢迎语的数据
		 *
		 * @param $sendData
		 * @param $attachment_id
		 * @param $work_material_id
		 * @param $corpId
		 * @param $from
		 * @param $external_id
		 * @param $user_id
		 * @param $radar
		 *
		 * @return mixed
		 *
		 * @throws InvalidDataException
		 * @throws InvalidParameterException
		 * @throws \Throwable
		 * @throws \app\components\ForbiddenException
		 * @throws \app\components\NotAllowException
		 * @throws \yii\base\InvalidConfigException
		 * @throws \yii\db\StaleObjectException
		 */
		public static function returnData ($sendData, $attachment_id, $work_material_id, $corpId, $from = 0, $user_id = 0, $external_id = 0, $radar = [])
		{
			\Yii::error($sendData, 'returnData：$sendData');
			$con = array_keys($sendData);
			if (in_array('image', $con)) {
				//beenlee 如果是雷达链接以 link 形式发送，非雷达链接则以 image 形式发送
				$media_id = $sendData['image']['media_id'];
				if ($from == 1) {
					$work_material = WorkMaterial::findOne($media_id);
					MsgUtil::checkWorkNeedReload($work_material);
					$sendData['image']['media_id'] = $work_material->media_id;
				} else {
					\Yii::error($media_id, 'returnData：$media_id');
					$result = static::verifyAttachment($media_id, 0);
					if ($result) {
						//todo beenlee 欢迎语图片不走雷达
						$radarInfo = false;//RadarLink::findOne(['associat_type' => 0, 'associat_id' => $media_id]);
						/*if (!$radarInfo && !empty($radar)) {
							if (isset($radar['associat_param']) && !empty($radar['associat_param'])) {
								$radarInfo = RadarLink::findOne(['associat_type' => $radar['associat_type'], 'associat_id' => $radar['associat_id'], 'associat_param' => $radar['associat_param']]);
							} else {
								$radarInfo = RadarLink::findOne(['associat_type' => $radar['associat_type'], 'associat_id' => $radar['associat_id'], 'associat_param' => NULL]);
							}
						}*/

						/*if ($radarInfo && $radarInfo->status > 0) {
							\Yii::error($radarInfo, 'returnData：$radarInfo');
							$agent = WorkCorpAgent::findOne(["corp_id" => $corpId]);
							if ($agent) {
								//beenlee 如果是雷达链接以 link 形式发送
								$attachment                = Attachment::findOne(['id' => $media_id]);
								$sendData['link']['title'] = $attachment->file_name;
								$sendData['link']['desc']  = '图片';
								$local_path                = $attachment->local_path;
								if (!empty($attachment->qy_local_path)) {
									$local_path = $attachment->qy_local_path;
								}
								$sendData['link']['picurl'] = \Yii::$app->params['site_url'] . $local_path;

								$param_array = [];
								$web_url     = \Yii::$app->params['web_url'];
								$link        = $web_url . '/h5/pages/material/list?uid=' . $attachment->uid . '&ids=' . $media_id . '&file_type=1';
								if (!empty($agent->id)) {
									$param_array[] = 'agent_id=' . $agent->id;
								}

								$aesConfig = \Yii::$app->get('aes');
								if ($aesConfig === NULL) {
									$aesConfig = ['key' => '123456'];
								}

								//分享地址 上下级关联关系
								$attach_data = [
									'uid'          => isset($attachment->uid) ? $attachment->uid : 0,
									'user_id'      => isset($user_id) ? $user_id : 0,
									'work_user_id' => isset($user_id) ? $user_id : 0
								];

								if (isset($radar['associat_type']) && !empty($radar['associat_type'])) {
									$attach_data['associat_type']  = $radar['associat_type'];
									$attach_data['associat_id']    = $radar['associat_id'];
									$attach_data['associat_param'] = $radar['associat_param'];
								}

								$encryptedData = urlencode(urlencode(base64_encode(\Yii::$app->getSecurity()->encryptByPassword(json_encode($attach_data, JSON_UNESCAPED_UNICODE), $aesConfig->key))));
								$param_array[] = 'attach_code=' . $encryptedData;

								if (!empty($param_array) && !empty($link)) {
									$param_array = implode('&', $param_array);
									if (strpos($link, $web_url) !== false) {
										if (strpos($link, '?') !== false) {
											$link .= '&' . $param_array;
										} else {
											$link = '?' . $param_array;
										}
									}
								}

								$sendData['link']['url'] = $link;

								unset($sendData['image']);
							}
						}*/

						if (isset($sendData['image'])) {
							\Yii::error($sendData, 'returnData：$sendData');
							$work_material = WorkMaterial::findOne(['attachment_id' => $media_id, 'corp_id' => $corpId]);
							if ($work_material !== NULL) {
								MsgUtil::checkWorkNeedReload($work_material);
								$sendData['image']['media_id'] = $work_material->media_id;
							}
						}
					}
				}
			}

			if (in_array('link', $con)) {
				$file_type = 4;
				if (!empty($attachment_id)) {
					$result = static::verifyAttachment($attachment_id, 0);
				} elseif (!empty($sendData['link']['picurl'])) {
					$id            = $sendData['link']['picurl'];
					$result        = static::verifyAttachment($id, 0);
					$attachment_id = $id;
				}

				if (isset($result) && $result) {
					\Yii::error($result, 'returnData：$result');
					$attachment = Attachment::findOne(['id' => $attachment_id]);
					\Yii::error($attachment, 'returnData：attachment');
					if ($attachment !== NULL) {
						$file_type = $attachment->file_type;

						if ($attachment->file_type == 2) {
							$local_path = '/static/image/audio.png';
						} elseif ($attachment->file_type == 3) {
							$local_path = '/static/image/video.png';
						} elseif ($attachment->file_type == 5) {
							$extension = Attachment::getExtension($attachment->file_content_type, $attachment->file_name);
							if (!empty($extension)) {
								$local_path = '/static/image/' . $extension . '.png';
							} else {
								$local_path = '/static/image/file.png';
							}
						} else {
							$local_path = $attachment->local_path;
							if (!empty($attachment->qy_local_path)) {
								$local_path = $attachment->qy_local_path;
							}
						}
						$sendData['link']['picurl'] = \Yii::$app->params['site_url'] . $local_path;
					}

					//beenlee 如果是雷达链接 图文中转跳转跳转
					//beenlee 雷达链接状态
					/*\Yii::error($radar, 'returnData：radar');
					if (!empty($radar)) {
						if (isset($radar['associat_param']) && !empty($radar['associat_param'])) {
							$radarInfo = RadarLink::findOne(['associat_type' => $radar['associat_type'], 'associat_id' => $radar['associat_id'], 'associat_param' => $radar['associat_param']]);
						} else {
							$radarInfo = RadarLink::findOne(['associat_type' => $radar['associat_type'], 'associat_id' => $radar['associat_id'], 'associat_param' => NULL]);
						}
						\Yii::error($radarInfo, 'returnData：radarInfo1');

						if (isset($radar['sync_attachment_id']) && !empty($radar['sync_attachment_id'])) {
							$radarInfo     = RadarLink::findOne(['associat_type' => 0, 'associat_id' => $radar['sync_attachment_id']]);
							$attachment_id = $radar['sync_attachment_id'];
							\Yii::error($radarInfo, 'returnData：radarInfo2');
							$attachment = Attachment::findOne(['id' => $attachment_id]);
							if ($attachment !== NULL) {
								$file_type = $attachment->file_type;
							}
						}

						if (isset($radar['attachment_id']) && !empty($radar['attachment_id'])) {
							$radarInfo     = RadarLink::findOne(['associat_type' => 0, 'associat_id' => $radar['attachment_id']]);
							$attachment_id = $radar['attachment_id'];
							\Yii::error($radarInfo, 'returnData：radarInfo3');
							$attachment = Attachment::findOne(['id' => $attachment_id]);
							if ($attachment !== NULL) {
								$file_type = $attachment->file_type;
							}
						}
					}

					if (isset($radarInfo) && $radarInfo->status > 0) {
						if ($radarInfo->associat_type > 0) {
							$attachment_id = 'radar_' . $radarInfo->id;
						}
						$agent = WorkCorpAgent::findOne(["corp_id" => $corpId]);
						if ($agent) {
							$param_array = [];
							$web_url     = \Yii::$app->params['web_url'];
							$link        = $web_url . '/h5/pages/material/list?uid=' . $attachment->uid . '&ids=' . $attachment_id . '&file_type=' . $file_type;
							if (!empty($agent->id)) {
								$param_array[] = 'agent_id=' . $agent->id;
							}

							$aesConfig = \Yii::$app->get('aes');
							if ($aesConfig === NULL) {
								$aesConfig = ['key' => '123456'];
							}

							//分享地址 上下级关联关系
							$attach_data = [
								'uid'          => isset($attachment->uid) ? $attachment->uid : 0,
								'user_id'      => isset($user_id) ? $user_id : 0,
								'work_user_id' => isset($user_id) ? $user_id : 0
							];

							if (isset($radar['associat_type']) && !empty($radar['associat_type'])) {
								$attach_data['associat_type']  = $radar['associat_type'];
								$attach_data['associat_id']    = $radar['associat_id'];
								$attach_data['associat_param'] = $radar['associat_param'];
							}

							$encryptedData = urlencode(urlencode(base64_encode(\Yii::$app->getSecurity()->encryptByPassword(json_encode($attach_data, JSON_UNESCAPED_UNICODE), $aesConfig->key))));
							$param_array[] = 'attach_code=' . $encryptedData;

							if (!empty($param_array) && !empty($link)) {
								$param_array = implode('&', $param_array);
								if (strpos($link, $web_url) !== false) {
									if (strpos($link, '?') !== false) {
										$link .= '&' . $param_array;
									} else {
										$link = '?' . $param_array;
									}
								}
							}

							$sendData['link']['url'] = $link;
						}
					}*/
				}
			}

			if (in_array('miniprogram', $con)) {
				if (!empty($attachment_id)) {
					//导入过来的
					$attachment = Attachment::findOne($attachment_id);
					$result     = static::verifyAttachment($attachment_id);
					if ($result) {
						$work_material = WorkMaterial::findOne($work_material_id);
						if (!empty($work_material) && $work_material->local_path != $attachment->local_path) {
							$materialId = WorkMaterial::getWorkMaterialByPic($corpId, $attachment->local_path);
							\Yii::error($materialId, '$materialId');
							$work_material = WorkMaterial::findOne($materialId['id']);
						}
						MsgUtil::checkWorkNeedReload($work_material);
						$sendData['miniprogram']['pic_media_id'] = $work_material->media_id;
						$sendData['miniprogram']['appid']        = $attachment->appId;
						$sendData['miniprogram']['page']         = $attachment->appPath;
					}
				} else {
					$media_id = $sendData['miniprogram']['pic_media_id'];
					$result   = static::verifyAttachment($media_id);
					if ($result) {
						$work_material = WorkMaterial::findOne(['attachment_id' => $media_id, 'corp_id' => $corpId]);
						MsgUtil::checkWorkNeedReload($work_material);
						$sendData['miniprogram']['pic_media_id'] = $work_material->media_id;
					}

				}
			}

			return $sendData;
		}

		/**
		 * @param $attachment_id
		 *
		 * @return bool
		 *
		 */
		public static function verifyAttachment ($attachment_id, $is_status = 1)
		{
			$attachment = Attachment::findOne($attachment_id);
			if ($is_status > 0 && $attachment !== NULL && empty($attachment->status)) {
				\Yii::error($attachment_id, 'welcome_attachment_id');

				return false;
			}

			return true;
		}

		/**
		 * @param $welcome
		 *
		 * @return array
		 *
		 */
		public static function getData ($welcome)
		{
			$result = [];
			if ($welcome->type == 1) {
				$users = '全体成员';
				$type  = 1;
			} else {
				$id_arr = [];
				$users  = [];
				if (!empty($welcome->user_ids)) {
					$user_ids = json_decode($welcome->user_ids, true);
					foreach ($user_ids as $user_id) {
						array_push($id_arr, $user_id['id']);
						if (is_array($user_id) && isset($user_id["id"]) && strpos($user_id["id"], 'd') !== false) {
							$users[] = $user_id["title"];
						}
					}
				}
				$work_user = WorkUser::find()->andWhere(['in', 'id', $id_arr])->asArray()->all();
				$users     = array_merge($users, array_column($work_user, 'name'));
				$type      = 2;
			}
			$content  = json_decode($welcome->context, true);
			$con      = array_keys($content);
			$wel_type = '';
			if (in_array('text', $con)) {
				$wel_type .= '文本+';
			}
			if (in_array('image', $con)) {
				$wel_type .= '图片+';
			}
			if (in_array('link', $con)) {
				$wel_type .= '链接+';
			}
			if (in_array('miniprogram', $con)) {
				$wel_type .= '小程序+';
			}
			$wel_type           = rtrim($wel_type, '+');
			$result['type']     = $type;
			$result['users']    = $users;
			$result['wel_type'] = $wel_type;

			return $result;
		}

		/**
		 * @param $content
		 *
		 * @return array
		 *
		 */
		public static function getContentData ($content)
		{
			$data        = [];
			$msg_type    = isset($content['msg_type']) ? $content['msg_type'] : 0;
			$text        = isset($content['text']) ? $content['text'] : '';
			$image       = isset($content['image']) ? $content['image'] : '';
			$link        = isset($content['link']) ? $content['link'] : '';
			$miniprogram = isset($content['miniprogram']) ? $content['miniprogram'] : '';
			if (!empty($text)) {
				$data['text_content'] = $content['text']['content'];
			}
			if (!empty($image)) {
				$work_material               = WorkMaterial::findOne(['attachment_id' => $content['image']['media_id']]);
				$attachment                  = Attachment::findOne($content['image']['media_id']);
				$data['image_url']           = $work_material->local_path;
				$data['image_attachment_id'] = $work_material->attachment_id;
				$data['file_name']           = !empty($attachment) ? $attachment->file_name : '';
				$data['add_type']            = 1;
			}
			if (!empty($link)) {
				$data['link_title']         = $content['link']['title'];
				$data['link_pic_url']       = '';
				$data['link_attachment_id'] = 0;
				if (!empty($content['link']['picurl'])) {
					$attachment                 = Attachment::findOne(['id' => $content['link']['picurl']]);
					$data['link_attachment_id'] = $content['link']['picurl'];
					$data['link_pic_url']       = !empty($attachment) ? $attachment->local_path : '';
				}
				if ($msg_type == 5) {
					$data['link_desc'] = $content['link']['description'];
				} else {
					$data['link_desc'] = $content['link']['desc'];
				}
				$data['link_url'] = $content['link']['url'];
				$data['add_type'] = 2;
			}
			if (!empty($miniprogram)) {
				$data['mini_title'] = $content['miniprogram']['title'];
				$work_material      = WorkMaterial::findOne(['attachment_id' => $content['miniprogram']['pic_media_id']]);
				if (!empty($work_material)) {
					$data['mini_pic_url']       = $work_material->local_path;
					$data['mini_attachment_id'] = $work_material->attachment_id;
				}
				$data['mini_appid'] = $content['miniprogram']['appid'];
				$data['mini_page']  = $content['miniprogram']['page'];
				$data['add_type']   = 3;
			}

			return $data;
		}

		/**
		 * 验证数据
		 *
		 * @param     $data
		 * @param int $source
		 *
		 * @return bool
		 *
		 * @throws InvalidParameterException
		 */
		public static function verify ($data, $source = 0)
		{
			$text_content  = isset($data['text_content']) ? $data['text_content'] : '';
			$add_type      = isset($data['add_type']) ? $data['add_type'] : '';
			$attachment_id = isset($data['attachment_id']) ? $data['attachment_id'] : 0;
			if ($source == 0) {
				$type = isset($data['type']) ? $data['type'] : '';
			}
			$users              = isset($data['users']) ? $data['users'] : '';
			$media_id           = isset($data['media_id']) ? $data['media_id'] : '';
			$link_attachment_id = isset($data['link_attachment_id']) ? $data['link_attachment_id'] : 0;
			$link_title         = isset($data['link_title']) ? $data['link_title'] : '';
			$link_url           = isset($data['link_url']) ? $data['link_url'] : '';
			$link_desc          = isset($data['link_desc']) ? $data['link_desc'] : '';
			$mini_title         = isset($data['mini_title']) ? $data['mini_title'] : '';
			$mini_pic_media_id  = isset($data['mini_pic_media_id']) ? $data['mini_pic_media_id'] : '';
			$mini_appid         = isset($data['mini_appid']) ? $data['mini_appid'] : '';
			$mini_page          = isset($data['mini_page']) ? $data['mini_page'] : '';
			if ($source == 0) {
				if (empty($text_content) && empty($add_type)) {
					throw new InvalidParameterException('欢迎语内容不能为空！');
				}
				if (isset($type) && $type == 2 && empty($users)) {
					throw new InvalidParameterException('成员id不能为空！');
				}
			} else {
				$status = isset($data['status']) ? $data['status'] : '';
				if ($status == 1 && empty($add_type) && empty($text_content)) {
					throw new InvalidParameterException('请填写欢迎语内容！');
				}
			}

			if (!empty($text_content) && mb_strlen($text_content, 'utf-8') > 1010) {
				throw new InvalidParameterException('文本内容最多1000个字！');
			}
			if (empty($media_id) && $add_type == 1) {
				throw new InvalidParameterException('图片内容不能为空！');
			}
			if ($add_type == 1) {
				$attachment = Attachment::findOne($media_id);
				if ($attachment->status == 0) {
					throw new InvalidParameterException('图片素材已删除！');
				}
			}
			if ($add_type == 2) {
				if (!empty($attachment_id)) {
					$attachment = Attachment::findOne($attachment_id);
					if ($attachment->status == 0) {
						throw new InvalidParameterException('图文素材已删除！');
					}
				} else {
					if (!empty($link_attachment_id)) {
						$attachment = Attachment::findOne($link_attachment_id);
						if ($attachment->status == 0) {
							throw new InvalidParameterException('图文素材的图片已删除！');
						}
					}
					if (empty($link_title) || empty($link_url)) {
						throw new InvalidParameterException('网页标题和链接不能同时为空！');
					}
					if (!empty($link_title) && mb_strlen($link_title, 'utf-8') > 32) {
						throw new InvalidParameterException('网页标题最多32个字！');
					}
					if (!empty($link_desc) && mb_strlen($link_desc, 'utf-8') > 128) {
						throw new InvalidParameterException('网页描述最多128个字！');
					}
					$url = explode(':', $link_url);
					if (isset($url[0]) && isset($url[1])) {
						$link_url = strtolower($url[0]) . ':' . $url[1];
					}
					$preg = "/^http(s)?:\\/\\/.+/";
					if (!preg_match($preg, $link_url)) {
						throw new InvalidParameterException('网页的链接必须是以http或https开头！');
					}
				}

			}
			if ($add_type == 3) {
				if (!empty($attachment_id)) {
					$attachment = Attachment::findOne($attachment_id);
					if ($attachment->status == 0) {
						throw new InvalidParameterException('小程序素材已删除！');
					}
				} else {
					$attachment = Attachment::findOne($mini_pic_media_id);
					if (!empty($attachment)) {
						if ($attachment->status == 0) {
							throw new InvalidParameterException('小程序封面素材已删除！');
						}
					}
					if (empty($mini_title)) {
						throw new InvalidParameterException('小程序消息标题不能为空！');
					}
					if (!empty($mini_title) && mb_strlen($mini_title, 'utf-8') > 16) {
						throw new InvalidParameterException('小程序标题最多16个字！');
					}
					if (empty($mini_pic_media_id)) {
						throw new InvalidParameterException('小程序封面不能为空！');
					}
					if (empty($mini_appid)) {
						throw new InvalidParameterException('小程序appid不能为空！');
					}
					if (empty($mini_page)) {
						throw new InvalidParameterException('小程序路径不能为空！');
					}
				}

			}

			return true;
		}

		/**
		 * @param $data
		 * @param $type 1、群欢迎语素材，0、其他
		 *
		 * @return array
		 *
		 */
		public static function getContent ($data, $type = 0)
		{
			$content  = [];
			$msg_type = isset($data['msg_type']) ? $data['msg_type'] : 0;
			if (!empty($data['text_content'])) {
				if ($type == 1) {
					$text_content['content'] = str_replace('{nickname}', '%NICKNAME%', $data['text_content']);
				} else {
					$text_content['content'] = $data['text_content'];
				}
				$content['text'] = $text_content;
			}
			if ($data['add_type'] == 1 || $msg_type == 2) {
				$image['media_id'] = $data['media_id'];
				$content['image']  = $image;
			}
			if ($data['add_type'] == 2 || $msg_type == 5) {
				$link['title']  = $data['link_title'];
				$link['picurl'] = (isset($data['attachment_id']) && !empty($data['attachment_id'])) ? $data['attachment_id'] : $data['link_attachment_id'];
				if ($msg_type == 5) {
					$link['description'] = $data['link_desc'];
				} else {
					$link['desc'] = $data['link_desc'];
				}
				$link['url']     = $data['link_url'];
				$content['link'] = $link;
			}
			if ($data['add_type'] == 3 || $msg_type == 6) {
				$miniprogram['title']        = $data['mini_title'];
				$miniprogram['pic_media_id'] = $data['mini_pic_media_id'];
				$miniprogram['appid']        = $data['mini_appid'];
				$miniprogram['page']         = $data['mini_page'];
				$content['miniprogram']      = $miniprogram;
			}
			if ($msg_type == 3) {
				$voice['media_id'] = $data['voice_media_id'];
				$content['voice']  = $voice;
			}
			if ($msg_type == 4) {
				$attachment        = Attachment::findOne($data['video_media_id']);
				$video['media_id'] = $data['video_media_id'];
				$video['title']    = $attachment->file_name;
				$content['video']  = $video;
			}
			if ($msg_type == 7) {
				$file['media_id'] = $data['voice_media_id'];
				$content['file']  = $file;
			}

			return $content;
		}

		/**
		 * 同步图文
		 *
		 * @param $data
		 *
		 * @return int
		 *
		 * @throws InvalidDataException
		 */
		public static function syncNews ($data)
		{
			\Yii::error($data, 'syncNews:data');
			if (empty($data['sync_attachment_id'])) {
				$attachment = new Attachment();
			} else {
				$attachment = Attachment::findOne($data['sync_attachment_id']);
			}
			$attachment->uid         = $data['uid'];
			$attachment->file_type   = 4;
			$attachment->create_time = DateUtil::getCurrentTime();
			$attach                  = Attachment::findOne(['id' => $data['link_attachment_id']]);
			$local_path              = $attach->local_path;
			$attachment->group_id    = $data['group_id'];
			$attachment->file_name   = $data['link_title'];
			$attachment->content     = $data['link_desc'];
			$attachment->local_path  = $local_path;
			$attachment->jump_url    = $data['link_url'];
			$attachment->attach_id   = isset($data['link_attachment_id']) ? $data['link_attachment_id'] : 0;

			if (!$attachment->validate() || !$attachment->save()) {
				throw new InvalidDataException(SUtils::modelError($attachment));
			}
			//beenlee 关联雷达链接

			if (isset($data['dynamic_notification'])) {
				$data['radar_dynamic_notification'] = $data['dynamic_notification'];
			}
			if (!isset($data['dynamic_notification']) && isset($data['tag_ids'])) {
				$data['radar_dynamic_notification'] = $data['dynamic_notification'];
			}
			\Yii::error($data, 'addRadarLink:data');
			if (isset($data['radar_open'], $data['radar_dynamic_notification'], $data['radar_tag_open'], $data['radar_tag_ids']) && $data['radar_open'] >= 0) {
				RadarLink::addRadarLink(0, $attachment->id, $data['radar_dynamic_notification'], $data['radar_tag_open'], $data['radar_tag_ids'], $data['radar_open'], $attachment->file_name);
				\Yii::error($attachment->id, 'addRadarLink:attachment_id');
			}

			return $attachment->id;
		}

		/**
		 * 同步小程序
		 *
		 * @param $data
		 *
		 * @return int
		 *
		 * @throws InvalidDataException
		 */
		public static function syncMini ($data)
		{
			if (empty($data['sync_attachment_id'])) {
				$attachment = new Attachment();
			} else {
				$attachment = Attachment::findOne($data['sync_attachment_id']);
			}
			$attachment->uid         = $data['uid'];
			$attachment->file_type   = 7;
			$attachment->create_time = DateUtil::getCurrentTime();
			$attachment->group_id    = $data['group_id'];
			$mini_pic_media_id       = $data['mini_pic_media_id'];
			$attach                  = Attachment::findOne($mini_pic_media_id);
			$local_path              = $attach->local_path;
			$attachment->file_name   = $data['mini_title'];
			$attachment->local_path  = $local_path;
			$attachment->appId       = $data['mini_appid'];
			$attachment->appPath     = $data['mini_page'];
			$attachment->attach_id   = isset($data['mini_pic_media_id']) ? $data['mini_pic_media_id'] : 0;
			if (!$attachment->validate() || !$attachment->save()) {
				throw new InvalidDataException(SUtils::modelError($attachment));
			}

			return $attachment->id;
		}

		/**
		 * @param $data
		 * @param $type
		 *
		 * @return int
		 *
		 * @throws InvalidDataException
		 * @throws InvalidParameterException
		 */
		public static function syncData ($data, $type = 0)
		{
			$sync_attachment_id = 0;
			$msg_type           = isset($data['msg_type']) ? $data['msg_type'] : 0;
			$groupId            = isset($data['group_id']) ? $data['group_id'] : 0;
			if ($type == 1) {
				$groupId          = $data['groupId'];
				$data['group_id'] = $groupId;
			}
			if (empty($groupId)) {
				throw new InvalidParameterException('分组id不能为空！');
			}
			if ($data['add_type'] == 2 || $msg_type == 5) {
				$sync_attachment_id = static::syncNews($data);
			} elseif ($data['add_type'] == 3 || $msg_type == 6) {
				$sync_attachment_id = static::syncMini($data);
			}

			return $sync_attachment_id;
		}

		/**
		 * @param $data
		 * @param $content
		 * @param $contentData
		 * @param $associat_type
		 *
		 * @return mixed
		 *
		 */
		public static function getWelcomeData ($data, $content, $contentData, $associat_type = -1)
		{
			$msg_type    = isset($content['msg_type']) ? $content['msg_type'] : 0;
			$text        = isset($content['text']) ? $content['text'] : '';
			$image       = isset($content['image']) ? $content['image'] : '';
			$link        = isset($content['link']) ? $content['link'] : '';
			$miniprogram = isset($content['miniprogram']) ? $content['miniprogram'] : '';
			if (!empty($text)) {
				$data['text_content'] = $contentData['text_content'];
			}
			if (!empty($image)) {
				$data['image_url']           = $contentData['image_url'];
				$data['file_name']           = $contentData['file_name'];
				$data['image_attachment_id'] = $contentData['image_attachment_id'];
				$data['add_type']            = $contentData['add_type'];
			}

			if (!empty($link)) {
				if (!empty($data['attachment_id'])) {
					$attachment = Attachment::findOne($data['attachment_id']);
					if ($attachment->file_type == 1) {
						$link_pic_url = '/static/image/image.png';
					} elseif ($attachment->file_type == 2) {
						$link_pic_url = '/static/image/audio.png';
					} elseif ($attachment->file_type == 3) {
						$link_pic_url = '/static/image/video.png';
					} elseif ($attachment->file_type == 5) {
						$extension = Attachment::getExtension($attachment->file_content_type, $attachment->file_name);
						if (!empty($extension)) {
							$link_pic_url = '/static/image/' . $extension . '.png';
						} else {
							$link_pic_url = '/static/image/file.png';
						}
					} else {
						$link_pic_url = $attachment->local_path;
					}
					//$link_pic_url = $attachment->local_path;
				} else {
					$link_pic_url = $contentData['link_pic_url'];
				}
				$data['link_title']         = $contentData['link_title'];
				$data['link_pic_url']       = $link_pic_url;
				$data['link_attachment_id'] = $contentData['link_attachment_id'];
				$data['link_desc']          = $contentData['link_desc'];
				$data['link_url']           = $contentData['link_url'];
				$data['add_type']           = $contentData['add_type'];

				if (isset($data['material_sync'])) {
					//beenlee 雷达链接状态
					if ($data['material_sync'] > 0 && isset($data['sync_attachment_id'])) {
						$radarInfo = RadarLink::findOne(['status' => 1, 'associat_type' => 0, 'associat_id' => $data['sync_attachment_id']]);
					} elseif ($associat_type >= 0 && isset($data['id'])) {
						if (isset($data['associat_param']) && !empty($data['associat_param'])) {
							$radarInfo = RadarLink::findOne(['status' => 1, 'associat_type' => $associat_type, 'associat_id' => $data['id'], 'associat_param' => $data['associat_param']]);
						} else {
							$radarInfo = RadarLink::findOne(['status' => 1, 'associat_type' => $associat_type, 'associat_id' => $data['id'], 'associat_param' => NULL]);
						}
					}

					if (isset($radarInfo) && $radarInfo) {
						$data['radar_id']             = $radarInfo->id;
						$data['radar_status']         = $radarInfo->status;
						$data['dynamic_notification'] = $radarInfo->dynamic_notification;
						$data['radar_tag_open']       = $radarInfo->radar_tag_open;
						$tag_ids                      = $radarInfo->tag_ids;
						if (!empty($radarInfo->tag_ids)) {
							$tag_ids = explode(',', $tag_ids);
							sort($tag_ids);
							$tag_ids = implode(',', $tag_ids);
						}
						$data['radar_tag_ids']      = $tag_ids;
						$data['radar_tag_ids_name'] = $tags_name = [];
						if (!empty($radarInfo->tag_ids)) {
							$tags = WorkTag::find()->select('id,tagname')->where(['in', 'id', explode(',', $radarInfo->tag_ids)])->andWhere(['is_del' => 0])->all();
							if ($tags) {
								$tags_name = array_values(ArrayHelper::map($tags, 'id', 'tagname'));
							}
						}
						if (isset($tags_name) && !empty($tags_name)) {
							$data['radar_tag_ids_name'] = $tags_name;
						}
					}
				}
			}

			if (!isset($data['radar_id']) || empty($data['radar_id'])) {
				$data['radar_id']             = 0;
				$data['radar_status']         = 0;
				$data['dynamic_notification'] = 0;
				$data['radar_tag_open']       = 0;
				$data['radar_tag_ids']        = '';
				$data['radar_tag_ids_name']   = [];
			}

			if (!empty($miniprogram)) {
				if (!empty($data['attachment_id'])) {
					$attachment         = Attachment::findOne($data['attachment_id']);
					$mini_pic_url       = $attachment->local_path;
					$mini_appid         = $attachment->appId;
					$mini_page          = $attachment->appPath;
					$mini_title         = $attachment->file_name;
					$mini_attachment_id = '';
				} else {
					$mini_pic_url       = $contentData['mini_pic_url'];
					$mini_appid         = $contentData['mini_appid'];
					$mini_page          = $contentData['mini_page'];
					$mini_title         = $contentData['mini_title'];
					$mini_attachment_id = $contentData['mini_attachment_id'];
				}
				$data['mini_title']         = $mini_title;
				$data['mini_pic_url']       = $mini_pic_url;
				$data['mini_appid']         = $mini_appid;
				$data['mini_page']          = $mini_page;
				$data['mini_attachment_id'] = $mini_attachment_id;
				$data['add_type']           = $contentData['add_type'];
			}

			if ($msg_type == 3) {
				$data['voice_media_id'] = $content['voice']['media_id'];
				$attachment             = Attachment::findOne($content['voice']['media_id']);
				$data['file_name']      = $attachment->file_name;
			}
			if ($msg_type == 4) {
				$data['video_media_id'] = $content['video']['media_id'];
				$attachment             = Attachment::findOne($content['video']['media_id']);
				$data['file_name']      = $attachment->file_name;
			}
			if ($msg_type == 7) {
				$data['file_media_id'] = $content['file']['media_id'];
				$attachment            = Attachment::findOne($content['file']['media_id']);
				$data['file_name']     = $attachment->file_name;
			}

			return $data;
		}

		/**
		 * @param $data
		 *
		 * @return int|mixed
		 *
		 * @throws InvalidDataException
		 */
		public static function getMaterialId ($data)
		{
			$work_material_id = 0;
			if (!empty($data['attachment_id'])) {
				$attachment       = Attachment::findOne($data['attachment_id']);
				$work_material    = WorkMaterial::getWorkMaterialByPic($data['corp_id'], $attachment->local_path);
				$work_material_id = $work_material['id'];
			}

			return $work_material_id;
		}

		/**
		 * @param $data
		 *
		 * @return bool
		 * @throws InvalidDataException
		 * @throws InvalidParameterException
		 */
		public static function add ($data)
		{
			static::verify($data, 0);
			$sync_attachment_id = 0;
			if (!empty($data['id'])) {
				$work_welcome              = self::findOne(['id' => $data['id']]);
				$work_welcome->update_time = DateUtil::getCurrentTime();
				$sync_attachment_id        = $work_welcome->sync_attachment_id;
			} else {
				$work_welcome              = new self();
				$work_welcome->create_time = DateUtil::getCurrentTime();
			}

			$transaction = \Yii::$app->db->beginTransaction();
			try {
				if ($data['add_type'] == 2 && !empty($data['link_image'])) {
					$link_image      = $data['link_image'];
					$sub_id          = $data['sub_id'];
					$isMasterAccount = $data['isMasterAccount'];
					$group_id        = NULL;
					unset($data['link_image']);
					unset($data['sub_id']);
					unset($data['isMasterAccount']);

					if (empty($group_id)) {
						$groupInfo = AttachmentGroup::findOne(['uid' => $data['uid'], 'is_not_group' => 1]);
						if ($groupInfo === NULL) {
							$group               = new AttachmentGroup();
							$group->uid          = $data['uid'];
							$group->title        = '未分组';
							$group->sort         = 1;
							$group->is_not_group = 1;
							$group->create_time  = DateUtil::getCurrentTime();
							if (!$group->validate() || !$group->save()) {
								throw new InvalidDataException(SUtils::modelError($group));
							}
							Attachment::updateAll(['group_id' => $group->id], ['uid' => $data['uid'], 'status' => 1, 'group_id' => NULL]);
							$group_id = $group->id;
						} else {
							$group_id = $groupInfo->id;
						}
					}

					//上传临时图片素材
					$attachment                  = new Attachment();
					$attachment->uid             = $data['uid'];
					$attachment->sub_id          = $sub_id;
					$attachment->isMasterAccount = $isMasterAccount;
					$attachment->file_type       = 1;
					$attachment->create_time     = DateUtil::getCurrentTime();
					$attachment->group_id        = $group_id;
					$attachment->is_temp         = 1;

					//文件
					$link_image_name = pathinfo($link_image, PATHINFO_FILENAME);
					$length          = mb_strlen($link_image_name, 'utf-8');
					if ($length > 128) {
						$attachment->file_name = mb_substr($link_image_name, 0, 128, 'utf-8');
					} else {
						$attachment->file_name = $link_image_name;
					}

					$img_data                      = getimagesize(\Yii::getAlias('@app') . $link_image);
					$attachment->local_path        = $link_image;
					$attachment->file_length       = $img_data['bits'];
					$attachment->file_content_type = $img_data['mime'];
					$attachment->file_width        = $img_data[0];
					$attachment->file_height       = $img_data[1];

					if (!$attachment->validate() || !$attachment->save()) {
						throw new InvalidDataException(SUtils::modelError($attachment));
					}

					$data['link_attachment_id'] = $attachment->id;
				}

				if ($data['add_type'] == 3 && !empty($data['attachment_id'])) {
					if (!empty($data['id'])) {
						$work_material_id = $work_welcome->work_material_id;
						if (empty($work_material_id)) {
							$work_welcome->work_material_id = static::getMaterialId($data);
						}
					} else {
						$work_welcome->work_material_id = static::getMaterialId($data);
					}
				}

				//beenlee 同步到内容库
				if ($data['material_sync'] == 1 && empty($data['attachment_id'])) {
					$data['sync_attachment_id'] = $sync_attachment_id;
					$sync_attachment_id         = static::syncData($data);
				}

				$content                          = static::getContent($data);
				$user_ids                         = json_encode($data['users']);
				$work_welcome->corp_id            = $data['corp_id'];
				$work_welcome->type               = $data['type'];
				$work_welcome->source             = $data['source'];
				$work_welcome->material_sync      = $data['material_sync'];
				$work_welcome->attachment_id      = $data['attachment_id'];
				$work_welcome->groupId            = $data['group_id'];
				$work_welcome->department         = $data['department'];
				$work_welcome->user_ids           = $user_ids;
				$work_welcome->sync_attachment_id = $sync_attachment_id;
				$work_welcome->context            = json_encode($content);

				if (!empty($work_welcome->dirtyAttributes)) {
					if (!$work_welcome->validate() || !$work_welcome->save()) {
						throw new InvalidDataException(SUtils::modelError($work_welcome));
					}

					if (!($data['material_sync'] == 1 && empty($data['attachment_id']))) {
						//beenlee 不同步 雷达规则跟随欢迎语
						if (isset($data['dynamic_notification'])) {
							$data['radar_dynamic_notification'] = $data['dynamic_notification'];
						}
						if (isset($data['radar_open'], $data['radar_dynamic_notification'], $data['radar_tag_open'], $data['tag_ids']) && $data['radar_open'] >= 0) {
							RadarLink::addRadarLink(2, $work_welcome->id, $data['radar_dynamic_notification'], $data['radar_tag_open'], $data['tag_ids'], $data['radar_open'], '欢迎语ID:' . $work_welcome->id, NULL, $content);
						}
					}

					$transaction->commit();
				}
			} catch (InvalidDataException $e) {
				$transaction->rollBack();
				throw new InvalidDataException($e->getMessage());
			}

			return true;
		}

		/**
		 * 检查欢迎语的生效时间
		 *
		 * @param string $time
		 * @param string $time_json
		 *
		 * @return true
		 */
		public static function checkTime ($time, $time_json)
		{
			if (!empty($time_json)) {
				$time_json = explode(',', $time_json);
				foreach ($time_json as $json) {
					$time1 = strtotime(date("Y-m-d", time()) . ' ' . $json[0]);
					$time2 = strtotime(date("Y-m-d", time()) . ' ' . $json[1]);
					$time3 = strtotime(date("Y-m-d", strtotime("+1 day")) . ' ' . $json[1]);

					if ($time1 <= $time2) {
						if ($time >= $time1 && $time <= $time2) {
							return true;
						}
					} else {
						if ($time >= $time1 && $time <= $time3) {
							return true;
						}
					}
				}

				return false;
			} else {
				return true;
			}

		}

		/**
		 * 获取企业微信是否创建过通用欢迎语
		 *
		 * @param int $corpId
		 *
		 * @return int
		 */
		public static function getCorpWelcome ($corpId)
		{
			$data         = 0;
			$work_welcome = WorkWelcome::findOne(['corp_id' => $corpId, 'type' => 1]);
			if (!empty($work_welcome)) {
				$data = 1;
			}

			return $data;
		}

		/*
		 * 欢迎语内容替换
		 * $content 欢迎语内容
		 * $user_external_id 用户id
		 * $type 类型：1、外部联系人，2、成员
		 */
		public static function welcomeContent ($content, $user_external_id, $type = 1)
		{
			if (strpos($content, '{nickname}') !== false) {
				$nickname = '';
				if ($type == 1) {
					$contactInfo = WorkExternalContact::findOne($user_external_id);
					if (!empty($contactInfo)) {
						if (!empty($contactInfo['name'])) {
							$nickname = $contactInfo['name'];
						} else {
							$nickname = $contactInfo['name_convert'];
						}
					}
				} elseif ($type == 2) {
					$workUser = WorkUser::findOne($user_external_id);
					if (!empty($workUser)) {
						$nickname = $workUser['name'];
					}
				}
				if (!empty($nickname)) {
					$content = str_replace("{nickname}", $nickname, $content);
				}
			}

			return $content;
		}
	}
