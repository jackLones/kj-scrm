<?php

	namespace app\models;

	use app\components\InvalidDataException;
	use app\util\SUtils;
	use Yii;

	/**
	 * This is the model class for table "{{%work_moments}}".
	 *
	 * @property int               $id
	 * @property int               $base_id     base ID
	 * @property int               $corp_id     企业ID
	 * @property int               $user_id     成员ID
	 * @property int               $open_status 可见范围：1、全部；2、标签；3、指定成员
	 * @property string            $open_range  可见范围标识：open_status为2时是标签ID集合，open_status为3时是成员集合
	 * @property int               $type        类型：1、仅文本；2、图片；3、视频；4、链接
	 * @property string            $text        文本内容
	 * @property int               $can_goods   是否可以点赞：0、关闭；1、开启
	 * @property int               $can_reply   是否可以回复：0、关闭；1、开启
	 * @property int               $open_sum    打开次数
	 * @property int               $share_sum   分享次数
	 * @property int               $status      状态：0、删除；1、正常
	 * @property string            $create_time 创建时间
	 *
	 * @property WorkMomentGoods[] $workMomentGoods
	 * @property WorkMomentMedia[] $workMomentMedia
	 * @property WorkMomentNews[]  $workMomentNews
	 * @property WorkMomentReply[] $workMomentReplies
	 * @property WorkCorp          $corp
	 * @property WorkUser          $user
	 */
	class WorkMoments extends \yii\db\ActiveRecord
	{
		const RANGE_ALL = 1;
		const RANGE_TAGS = 2;
		const RANGE_EXTERNAL = 3;

		const TEXT_MOMENT = 1;
		const IMAGE_MOMENT = 2;
		const VIDEO_MOMENT = 3;
		const NEWS_MOMENT = 4;

		const CLOSE_GOOD = 0;
		const OPEN_GOOD = 1;

		const CLOSE_REPLY = 0;
		const OPEN_REPLY = 1;

		const NORMAL_MOMENT = 0;
		const DEL_MOMENT = 1;

		const NAME = "moment-replay";

		/**
		 * {@inheritdoc}
		 */
		public static function tableName ()
		{
			return '{{%work_moments}}';
		}

		/**
		 * {@inheritdoc}
		 */
		public function rules ()
		{
			return [
				[['base_id', 'corp_id', 'user_id', 'open_status', 'type', 'can_goods', 'can_reply', 'open_sum', 'share_sum', 'status', 'external_status'], 'integer'],
				[['open_range', 'text', 'external_userid'], 'string'],
				[['create_time'], 'safe'],
				[['corp_id'], 'exist', 'skipOnError' => true, 'targetClass' => WorkCorp::className(), 'targetAttribute' => ['corp_id' => 'id']],
				[['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => WorkUser::className(), 'targetAttribute' => ['user_id' => 'id']],
			];
		}

		/**
		 * {@inheritdoc}
		 */
		public function attributeLabels ()
		{
			return [
				'id'          => Yii::t('app', 'ID'),
				'base_id'     => Yii::t('app', 'base ID'),
				'corp_id'     => Yii::t('app', '企业ID'),
				'user_id'     => Yii::t('app', '成员ID'),
				'open_status' => Yii::t('app', '可见范围：1、全部；2、标签；3、指定成员'),
				'open_range'  => Yii::t('app', '可见范围标识：open_status为2时是标签ID集合，open_status为3时是成员集合'),
				'type'        => Yii::t('app', '类型：1、仅文本；2、图片；3、视频；4、链接'),
				'text'        => Yii::t('app', '文本内容'),
				'can_goods'   => Yii::t('app', '是否可以点赞：0、关闭；1、开启'),
				'can_reply'   => Yii::t('app', '是否可以回复：0、关闭；1、开启'),
				'open_sum'    => Yii::t('app', '打开次数'),
				'share_sum'   => Yii::t('app', '分享次数'),
				'status'      => Yii::t('app', '状态：0、删除；1、正常'),
				'create_time' => Yii::t('app', '创建时间'),
				'external_status' => Yii::t('app', '朋友圈可见范围 1 全部  2指定成员'),
				'external_userid' => Yii::t('app', '朋友圈指定成员集合'),
			];
		}

		/**
		 * {@inheritDoc}
		 * @return bool
		 */
		public function beforeSave ($insert)
		{
			$this->text = rawurlencode($this->text);

			return parent::beforeSave($insert); // TODO: Change the autogenerated stub
		}

		/**
		 * {@inheritDoc}
		 */
		public function afterFind ()
		{
			if (!empty($this->text)) {
				$this->text = rawurldecode($this->text);
			}

			parent::afterFind();
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getWorkMomentGoods ()
		{
			return $this->hasMany(WorkMomentGoods::className(), ['moment_id' => 'id']);
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getWorkMomentMedia ()
		{
			return $this->hasMany(WorkMomentMedia::className(), ['moment_id' => 'id']);
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getWorkMomentNews ()
		{
			return $this->hasMany(WorkMomentNews::className(), ['moment_id' => 'id']);
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getWorkMomentReplies ()
		{
			return $this->hasMany(WorkMomentReply::className(), ['moment_id' => 'id']);
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getCorp ()
		{
			return $this->hasOne(WorkCorp::className(), ['id' => 'corp_id']);
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getUser ()
		{
			return $this->hasOne(WorkUser::className(), ['id' => 'user_id']);
		}

		public function dumpData ($withReply = false, $withGoods = [])
		{
			$data = [
				'id'          => $this->id,
				'type'        => $this->type,
				'text'        => $this->text,
				'can_goods'   => $this->can_goods,
				'can_reply'   => $this->can_reply,
				'create_time' => $this->create_time,
				'info'        => [],
				'corp_id'     => $this->corp_id,
				'user_id'     => $this->user_id,
				'open_status' => $this->open_status,
				'open_range'  => $this->open_range,
				'open_sum'    => $this->open_sum,
				'share_sum'   => $this->share_sum,
				'status'      => $this->status,
			];

			if ($withReply) {
				$data['reply_info'] = [];
			}

			if (!empty($withGoods)) {
				$withGoods['need_info'] = isset($withGoods['need_info']) ? $withGoods['need_info'] : false;
				$data['good_info']      = [];

				if (!empty($this->workMomentGoods)) {
					foreach ($this->workMomentGoods as $good) {
						array_push($data['good_info'], $good->dumpData($withGoods['need_info']));
					}
				}
			}
		}

		/**
		 * @param $type
		 * @param $momentId
		 */
		public static function getMomentInfo ($type, $momentId)
		{
			if ($type == self::IMAGE_MOMENT || $type == self::VIDEO_MOMENT) {
				return WorkMomentMedia::find()->where(["moment_id" => $momentId])->asArray()->all();
			}
			if ($type == self::NEWS_MOMENT) {
				$newInfo = WorkMomentNews::find()->where(["moment_id" => $momentId])->asArray()->one();
				if (!empty($newInfo) && !empty($newInfo["attachment"])) {
					WorkMomentNews::getAttachmentInfo($newInfo["attachment"], $newInfo);
				}

				return $newInfo;
			}

			return [];
		}

		public static function getMomentGoodHeardImage ($momentId, $external_id = '')
		{
            $heard = WorkMomentGoods::find()
                ->alias("a")
                ->with(['external' => function ($que) {
                    $que->alias('e')
                        ->select(['e.id', 'e.avatar', 'e.name_convert as name']);
                }])
                ->with(['user' => function ($que) {
                    $que->alias('u')
                        ->select(['u.id', 'u.avatar', 'u.name']);
                }])
                ->where(["a.moment_id" => $momentId]);
            if(!$external_id) {
                $heard->andWhere(["a.status" => 1]);
            }
                $heard = $heard->andFilterWhere(['a.external_id' => $external_id])
                ->asArray()->all();

            $status = 1;
            foreach($heard as $key => $val) {
                $avatar = '';
                $name = '';
                if(!empty($val['external'])) {
                    $avatar = $val['external']['avatar'];
                    $name = $val['external']['name'];
                } elseif (!empty($val['user'])) {
                    $avatar = $val['user']['avatar'];
                    $name = $val['user']['name'];
                }
                $heard[$key]['avatar'] = $avatar;
                $heard[$key]['name'] = $name;
                $status = $val['status'];
            }

			return ["heard_img" => array_column($heard, "avatar"), 'name' => array_column($heard, "name"), "count" => count($heard), 'status' => $status];
		}

		public static function getIsGood($momentId, $external_id = '', $user_id = '')
        {
            $external_id = empty($external_id) ? '' : $external_id;
            $user_id = empty($user_id) ? '' : $user_id;
            $good = WorkMomentGoods::find()
                ->where(['moment_id' => $momentId])
                ->andFilterWhere(['user_id' => $user_id])
                ->andFilterWhere(['external_id' => $external_id])
                ->asArray()
                ->one();
            if(empty($good)) {
                return 0;
            }
            return $good['status'];
        }

		public static function getMomentReply ($momentId, $external_id = '', $externals_id = '', $user_id = '', $is_self = 0)
		{
			$data    = WorkMomentReply::find()->alias("a")
				->leftJoin("{{%work_user}} as b", "a.user_id = b.id")
				->leftJoin("{{%work_external_contact}} as c", "a.external_id = c.id")
				->where(["a.moment_id" => $momentId]);
                if(!$external_id) {
                    $data = $data->andWhere(["a.status" => 1]);
                }
                $data = $data->andFilterWhere(['a.external_id' => $external_id])
				->select("a.content,a.id,a.status,a.reply_id,a.create_time,c.name_convert,b.name,a.user_id,a.external_id,c.external_userid,b.avatar,c.avatar external_avatar")
				->asArray()->all();
            $arr = [];
            if($is_self) {
                $WorkMoments = WorkMoments::findOne($momentId);

                $external = array_filter($data, function($v) {
                    return !empty($v['external_id']);
                });
                if(!empty($external)) {
                    $external = array_column($external, 'external_id');
                    $external_id = array_values(array_unique($external));
                    $followUse = WorkExternalContactFollowUser::find()->select(['external_userid', 'del_type'])->where(['external_userid' => $external_id])->andWhere(['user_id' => $WorkMoments->user_id])->asArray()->all();
                    $arr = array_column($followUse, 'del_type', 'external_userid');
                }
            }
			$newData = [];
			foreach ($data as $v) {
                $is_reply   = 0;
                $reply_name = '';
                $reply_userid = '';
                $reply_type = 1;//-1 内部员工  0 未删除  1成员删除外部联系人；2外部联系人删除成员
                $is_delete = 0;
                if($externals_id) {
                    $is_delete = $v['external_id'] == $externals_id ? 1 : 0;
                } else if($user_id) {
                    $is_delete = $v['user_id'] == $user_id ? 1 : 0;
                }
                $is_dels = $is_self == 1 ? 1 : $is_delete;
                $one_name = empty($v['name']) ? empty($v['name_convert']) ? '' : $v['name_convert'] : $v['name'];
			    if($v['reply_id']) {
			        $is_reply = 1;
                    $WorkMomentReply = WorkMomentReply::find()->select('user_id, external_id')->where(['id' => $v['reply_id']])->asArray()->one();
                    if($WorkMomentReply['user_id']) {
                        $WorkUser   = WorkUser::find()->select('name')->where(['id' => $WorkMomentReply['user_id']])->asArray()->one();
                        $reply_name = empty($WorkUser) ? '' : $WorkUser['name'];
                        $reply_type = -1;
                    } elseif ($WorkMomentReply['external_id']) {
                        $WorkExternalContact = WorkExternalContact::find()->select('id, name_convert, external_userid')->where(['id' => $WorkMomentReply['external_id']])->asArray()->one();
                        $reply_name = empty($WorkExternalContact) ? '' : $WorkExternalContact['name_convert'];
                        $reply_userid = empty($WorkExternalContact) ? '' : $WorkExternalContact['external_userid'];
                        if($is_self) {
                            $WorkMoments = WorkMoments::findOne($momentId);
                            $followUse = WorkExternalContactFollowUser::find()->select(['external_userid', 'del_type'])->where(['external_userid' => $WorkExternalContact['id']])->andWhere(['user_id' => $WorkMoments->user_id])->asArray()->one();
                            if($followUse) {
                                $reply_type = $followUse['del_type'];
                            }
                        }
                    }
                }
				$time1        = strtotime(date('Y-m-d', time()));
				$time2        = strtotime("+1 day") - 1;
				$time3        = strtotime($v["create_time"]);
				$v["content"] = urldecode($v["content"]);
				if ($time3 > $time1 && $time3 < $time2) {
					$v["create_time"] = date("H:i", $time3);
				} else {
					$v["create_time"] = date("Y-m-d H:i", $time3);
				}
				$newData[$v['id']] = $v;
                $newData[$v['id']]['is_reply'] = $is_reply;
                $newData[$v['id']]['reply_name'] = $reply_name;
                $newData[$v['id']]['reply_userid'] = $reply_userid;
                $newData[$v['id']]['reply_type'] = $reply_type;
                $newData[$v['id']]['reply_avatar'] = empty($v['avatar']) ? empty($v['external_avatar']) ? '' : $v['external_avatar'] : $v['avatar'];
                $newData[$v['id']]['one_name'] = $one_name;
                $newData[$v['id']]['is_delete'] = $is_delete;
                $newData[$v['id']]['is_dels'] = $is_dels;
                $is_info = 0;
                $type = 1;//-1 内部员工  0 未删除  1成员删除外部联系人；2外部联系人删除成员
                if($arr) {
                    if(isset($arr[$v['external_id']])) {
                        if($arr[$v['external_id']] == 0 || $arr[$v['external_id']] == 2) {
                            $is_info = 1;
                            $type = $arr[$v['external_id']];
                        }
                    }
                }
                if(!empty($v['user_id'])) {
                    $type = -1;
                }
                $newData[$v['id']]['is_info'] = $is_info;
                $newData[$v['id']]['type'] = $type;
			}
			return array_values($newData);
		}

		/**
		 * @param WorkMomentsBase $baseModel
		 * @param                 $user_id
		 * @param                 $data
		 *
		 */
		public static function createData ($baseModel, $user_id, $data)
		{
			$base = WorkMomentsBase::findOne($baseModel->id);
			$self = self::findOne(["base_id" => $base->id, "corp_id" => $base->corp_id, "user_id" => $user_id]);
			if (empty($self)) {
				$self              = new self();
				$self->base_id     = $base->id;
				$self->corp_id     = $base->corp_id;
				$self->user_id     = $user_id;
				$self->open_status = 1;
			}
			$self->text        = $base->context;
			$self->type        = $base->type;
			$self->create_time = date("Y-m-d H:i:s", time());
			if (!$self->validate()) {
				throw new InvalidDataException(SUtils::modelError($self));
			}
			$self->save();

			return $self;
		}

		/**
		 * 渠道明细
		 *
		 * @param       $id
		 * @param       $user_id
		 * @param array $data
		 */
		public static function getExternalTimeLine ($id, $user_id, &$data = [])
		{
			$timeLine = ExternalTimeLine::find()->alias("a")
				->leftJoin("{{%work_external_contact}} as b", "a.external_id = b.id")
				->where(["a.related_id" => $id, "a.user_id" => empty($user_id) ? 0 : $user_id, "a.event" => "moment_time"])
				->select("a.id,a.external_id,a.event_time,a.remark,b.name_convert,b.avatar as heard_img")
				->orderBy("a.event_time desc")
				->groupBy("a.event_time")->asArray()->all();
			foreach ($timeLine as $item) {
				$name              = urldecode($item["name_convert"]);
				$timeLocal         = strripos($item["remark"], "停");
				$str               = date("Y-m-d H:i", $item["event_time"]) . "浏览," . substr($item["remark"], $timeLocal, strlen($item["remark"]));
				$temp["id"]        = $item["id"];
				$temp["name"]      = $name;
				$temp["heard_img"] = $item["heard_img"];
				$temp["context"]   = $str;
				array_push($data, $temp);
			}
		}

	}
