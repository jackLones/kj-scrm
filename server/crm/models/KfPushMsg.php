<?php

	namespace app\models;

	use app\components\InvalidDataException;
	use app\util\DateUtil;
	use app\util\SUtils;
	use Yii;

	/**
	 * This is the model class for table "{{%kf_push_msg}}".
	 *
	 * @property int         $id
	 * @property int         $author_id      公众号ID
	 * @property string      $msg_title      消息名称
	 * @property int         $msg_type       类型，1：文本（text）、2：图片（img）、3：语音（voice）、4：视频（video）、5：图文（news）
	 * @property string      $content        文本回复的内容
	 * @property int         $material_id    素材ID
	 * @property int         $attachment_id  附件ID
	 * @property string      $title          图文消息的标题
	 * @property string      $digest         图文消息的摘要
	 * @property string      $cover_url      封面图片的URL
	 * @property string      $content_url    正文的URL
	 * @property int         $push_type      发送类别：1：标签、2：全部
	 * @property string      $push_rule      发送条件（json格式）
	 * @property string      $push_time      发送时间
	 * @property string      $create_time    创建时间
	 * @property string      $target_num     预计发送粉丝数
	 * @property string      $fans_num       发送成功粉丝数
	 * @property string      $queue_id       队列id
	 * @property string      $status         状态 0未发送 1已发送 2发送失败
	 * @property string      $is_del         状态 0未删除 1已删除
	 * @property string      $error_code     错误码
	 * @property string      $error_msg      错误信息
	 *
	 * @property WxAuthorize $author
	 * @property Material    $material
	 */
	class KfPushMsg extends \yii\db\ActiveRecord
	{
		const TEXT_MSG = 1;
		const IMG_MSG = 2;
		const VOICE_MSG = 3;
		const VIDEO_MSG = 4;
		const NEWS_MSG = 5;

		const PUSH_TO_ALL = 1;
		const PUSH_BY_TAGS = 2;
		const PUSH_BY_SEX = 3;
		const PUSH_BY_CUSTOM = 4;

		/**
		 * {@inheritdoc}
		 */
		public static function tableName ()
		{
			return '{{%kf_push_msg}}';
		}

		/**
		 * {@inheritdoc}
		 */
		public function rules ()
		{
			return [
				[['author_id', 'msg_type', 'material_id', 'push_type'], 'integer'],
				[['content', 'cover_url', 'content_url', 'push_rule'], 'string'],
				[['push_time', 'create_time'], 'safe'],
				[['msg_title'], 'string', 'max' => 32],
				[['title'], 'string', 'max' => 64],
				[['digest'], 'string', 'max' => 255],
				[['author_id'], 'exist', 'skipOnError' => true, 'targetClass' => WxAuthorize::className(), 'targetAttribute' => ['author_id' => 'author_id']],
				[['material_id'], 'exist', 'skipOnError' => true, 'targetClass' => Material::className(), 'targetAttribute' => ['material_id' => 'id']],
			];
		}

		/**
		 * {@inheritdoc}
		 */
		public function attributeLabels ()
		{
			return [
				'id'            => Yii::t('app', 'ID'),
				'author_id'     => Yii::t('app', '公众号ID'),
				'msg_title'     => Yii::t('app', '消息名称'),
				'msg_type'      => Yii::t('app', '类型，1：文本（text）、2：图片（img）、3：语音（voice）、4：视频（video）、5：图文（news）'),
				'content'       => Yii::t('app', '文本回复的内容'),
				'material_id'   => Yii::t('app', '素材ID'),
				'attachment_id' => Yii::t('app', '附件ID'),
				'title'         => Yii::t('app', '图文消息的标题'),
				'digest'        => Yii::t('app', '图文消息的摘要'),
				'cover_url'     => Yii::t('app', '封面图片的URL'),
				'content_url'   => Yii::t('app', '正文的URL'),
				'push_type'     => Yii::t('app', '发送类别：1：标签、2：全部'),
				'push_rule'     => Yii::t('app', '发送条件（json格式）'),
				'push_time'     => Yii::t('app', '发送时间'),
				'create_time'   => Yii::t('app', '创建时间'),
				'target_num'    => Yii::t('app', '预计发送粉丝数'),
				'fans_num'      => Yii::t('app', '发送成功粉丝数'),
				'queue_id'      => Yii::t('app', '队列id'),
				'status'        => Yii::t('app', '状态 0未发送 1已发送 2发送失败'),
				'is_del'        => Yii::t('app', '状态 0未删除 1已删除'),
				'error_code'    => Yii::t('app', '错误码'),
				'error_msg'     => Yii::t('app', '错误信息'),
			];
		}

		/**
		 *
		 * @return object|\yii\db\Connection|null
		 *
		 * @throws \yii\base\InvalidConfigException
		 */
		public static function getDb ()
		{
			return Yii::$app->get('mdb');
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getAuthor ()
		{
			return $this->hasOne(WxAuthorize::className(), ['author_id' => 'author_id']);
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getMaterial ()
		{
			return $this->hasOne(Material::className(), ['id' => 'material_id']);
		}

		/**
		 * {@inheritDoc}
		 * @return bool
		 */
		public function beforeSave ($insert)
		{
			$this->content = rawurlencode($this->content);

			return parent::beforeSave($insert); // TODO: Change the autogenerated stub
		}

		/**
		 * {@inheritDoc}
		 */
		public function afterFind ()
		{
			if (!empty($this->content)) {
				$this->content = rawurldecode($this->content);
			}

			parent::afterFind();
		}

		//设置数据
		public static function setKfData ($data)
		{
			if (empty($data['id'])) {
				$kfData  = new KfPushMsg();
				$msgInfo = static::findOne(['author_id' => $data['author_id'], 'msg_title' => $data['msg_title'], 'is_del' => 0]);
				if (!empty($msgInfo)) {
					throw new InvalidDataException('消息名称已存在，请更改');
				}
			} else {
				$kfData = KfPushMsg::findOne($data['id']);
			}
			$kfData->author_id = $data['author_id'];
			$kfData->msg_title = $data['msg_title'];
			$kfData->msg_type  = $data['msg_type'];
			if ($data['msg_type'] == 1) {
				$kfData->content = $data['content'];
			} elseif ($data['msg_type'] == 5) {
				if (empty($data['is_use'])) {
					$kfData->attachment_id = $data['attachment_id'];
				} else {
					$kfData->title       = $data['title'];
					$kfData->digest      = $data['digest'];
					$kfData->cover_url   = $data['cover_url'];
					$kfData->content_url = $data['content_url'];
					//同步自定义图文
					if (!empty($data['is_sync'])) {
						$userRelation            = UserAuthorRelation::findOne(['author_id' => $data['author_id']]);
						$attachment              = new Attachment();
						$attachment->uid         = $userRelation->uid;
						$attachment->file_type   = 4;
						$attachment->create_time = DateUtil::getCurrentTime();
						$attachment->group_id    = $data['group_id'];
						$attachment->file_name   = $data['title'];
						$attachment->content     = $data['digest'];
						$attachment->local_path  = $data['cover_url'];
						$attachment->jump_url    = $data['content_url'];
						if (!$attachment->validate() || !$attachment->save()) {
							throw new InvalidDataException(SUtils::modelError($attachment));
						}
					}
				}
			} else {
				$kfData->attachment_id = $data['attachment_id'];
			}

			if (!empty($kfData->attachment_id)) {
				$attachment = Attachment::findOne($kfData->attachment_id);
				if (empty($attachment) || $attachment->status == 0) {
					throw new InvalidDataException('素材已被删除，请重新编辑后再发送');
				}
				if (!empty($attachment->material_id) && $attachment->material->author_id == $data['author_id'] && !empty($attachment->material->status)) {
					$kfData->material_id = $attachment->material_id;
				} else {
					//$material = Material::findOne(['author_id' => $data['author_id'], 'attachment_id' => $kfData->attachment_id, 'status' => 1]);
					$material = Material::getMaterial(['author_id' => $data['author_id'], 'attachment_id' => $kfData->attachment_id, 'file_type' => $attachment->file_type]);
					if (!empty($material)) {
						$kfData->material_id = $material->id;
						$kfData->content     = $material->media_id;
					} elseif ($data['msg_type'] == 5 && empty($data['is_use'])) {
						$kfData->title       = $attachment->file_name;
						$kfData->digest      = $attachment->content;
						$kfData->cover_url   = $attachment->local_path;
						$kfData->content_url = $attachment->jump_url;
					}
				}
			}

//			if(!empty($kfData->material_id)){
//				$material = Material::findOne($kfData->material_id);
//				if(!empty($material)){
//					$kfData->content = $material->media_id;
//				}
//				if($material->status == 0){
//					throw new InvalidDataException('素材已被删除，请重新编辑后再发送');
//				}
//			}

			$kfData->push_type  = $data['push_type'];
			$kfData->target_num = $data['target_num'];

			$extend['sex']       = $data['sex'];
			$extend['stime']     = $data['stime'];
			$extend['etime']     = $data['etime'];
			$extend['province']  = $data['province'];
			$extend['city']      = $data['city'];
			$extend['tag_ids']   = $data['tag_ids'];
			$extend['send_type'] = $data['send_type'];
			$kfData->push_rule   = json_encode($extend, JSON_UNESCAPED_UNICODE);
			if ($data['send_type'] == 1) {
				$kfData->push_time = DateUtil::getCurrentTime();
			} else {
				$kfData->push_time = date('Y-m-d H:i:s', $data['send_time']);
			}
			$kfData->status      = 0;
			$kfData->create_time = DateUtil::getCurrentTime();
			\Yii::error($kfData->content, 'content44');
			if (!$kfData->validate() || !$kfData->save()) {
				if (empty($data['id'])) {
					throw new InvalidDataException('创建失败.' . SUtils::modelError($kfData));
				} else {
					throw new InvalidDataException('修改失败.' . SUtils::modelError($kfData));
				}
			}

			return $kfData->id;
		}
	}
