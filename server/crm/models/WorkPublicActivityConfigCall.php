<?php

	namespace app\models;

	use app\util\MsgUtil;
	use Yii;

	/**
	 * This is the model class for table "{{%work_public_activity_config_call}}".
	 *
	 * @property int                $id
	 * @property int                $activity_id      活动id
	 * @property int                $is_open          是否开启
	 * @property int                $type             1新成员加入提醒，2好友取关扣除人气提醒，3任务完成提醒，4任务完成推送图片，5重复参加提醒，6好友助力成功提醒，7好友重复助力提醒，8其他提醒，9免打扰任务提醒，10活动下线提醒，11活动完成后继续有新成员
	 * @property int                $is_url           1排行榜2兑换链接
	 * @property int                $is_template      是否使用模板0不使用（文本），1使用
	 * @property string             $template_id      模板id
	 * @property string             $template_context 模板内容
	 * @property string             $template_old     模板原始内容
	 * @property string             $context          回复内容
	 * @property string             $img_url          推送图片
	 * @property int                $create_time      创建时间
	 * @property int                $update_time      修改时间
	 *
	 * @property WorkPublicActivity $activity
	 */
	class WorkPublicActivityConfigCall extends \yii\db\ActiveRecord
	{
		const TYPE_ONE = 1; //新成员加入
		const TYPE_TWO = 2; //放弃助力
		const TYPE_THREE = 3;//一阶奖品
		const TYPE_FOUR = 4;//一阶完成任务图片
		const TYPE_FIVE = 5;//二阶推送
		const TYPE_SIX = 6;//已参加活动
		const TYPE_SEVEN = 7;//三阶
		const TYPE_EIGHT = 8;//好友助力成功
		const TYPE_NINE = 9;//不符合助力要求
		const TYPE_TEN = 10;//奖品库存不足
		const TYPE_ELEVEN = 11;//免打扰
		const TYPE_TWELVE = 12;//活动下线
		const TYPE_THIRTEEN = 13;//活动完成新成员加入
		const TYPE_FOURTEEN = 14;//企业微信
		const TYPE_FIFTEEN = 15; //重复参加提醒

		/**
		 * {@inheritdoc}
		 */
		public static function tableName ()
		{
			return '{{%work_public_activity_config_call}}';
		}

		/**
		 * {@inheritdoc}
		 */
		public function rules ()
		{
			return [
				[['activity_id', 'is_open', 'type', 'is_url', 'is_template', 'create_time', 'update_time'], 'integer'],
				[['template_context', 'template_old', 'context'], 'string'],
				[['img_url', 'template_id'], 'string', 'max' => 255],
				[['activity_id'], 'exist', 'skipOnError' => true, 'targetClass' => WorkPublicActivity::className(), 'targetAttribute' => ['activity_id' => 'id']],
			];
		}

		/**
		 * {@inheritdoc}
		 */
		public function attributeLabels ()
		{
			return [
				'id'               => Yii::t('app', 'ID'),
				'activity_id'      => Yii::t('app', '活动id'),
				'is_open'          => Yii::t('app', '是否开启'),
				'type'             => Yii::t('app', '1新成员加入提醒，2好友取关扣除人气提醒，3任务完成提醒，4任务完成推送图片，5重复参加提醒，6好友助力成功提醒，7好友重复助力提醒，8其他提醒，9免打扰任务提醒，10活动下线提醒，11活动完成后继续有新成员'),
				'is_url'           => Yii::t('app', '1排行榜2兑换链接'),
				'is_template'      => Yii::t('app', '是否使用模板0不使用（文本），1使用'),
				'template_id'      => Yii::t('app', '模板id'),
				'template_context' => Yii::t('app', '模板内容'),
				'template_old'     => Yii::t('app', '模板原始内容'),
				'context'          => Yii::t('app', '回复内容'),
				'img_url'          => Yii::t('app', '推送图片'),
				'create_time'      => Yii::t('app', '创建时间'),
				'update_time'      => Yii::t('app', '修改时间'),
			];
		}

		/**
		 *
		 * @return object|\yii\db\Connection|null
		 *
		 * @throws \yii\base\InvalidConfigException
		 */
		public static function getDb ()
		{
			return Yii::$app->get('mdb');
		}

		/**
		 * {@inheritDoc}
		 * @return bool
		 */
		public function beforeSave ($insert)
		{
			$this->context          = rawurlencode(rawurldecode($this->context));
			$this->template_context = rawurlencode(rawurldecode($this->template_context));

			return parent::beforeSave($insert); // TODO: Change the autogenerated stub
		}

		/**
		 * {@inheritDoc}
		 */
		public function afterFind ()
		{
			if (!empty($this->context)) {
				$this->context = rawurldecode($this->context);
			}
			if (!empty($this->template_context)) {
				$this->template_context = rawurldecode($this->template_context);
			}

			parent::afterFind(); // TODO: Change the autogenerated stub
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getActivity ()
		{
			return $this->hasOne(WorkPublicActivity::className(), ['id' => 'activity_id']);
		}

		public static function sendCallText ($public_openid, $id, $name, $fans_id, $openid, $type, $FansMsg)
		{
			$call = WorkPublicActivityConfigCall::find()->where(["activity_id" => $id, "type" => $type, "is_open" => 1])->one();
			if (!empty($call)) {
				$call = $call->toArray();
				if ($call["is_template"]) {
					$context = $call['context'];
				} else {
					$context = $call['context'];
				}
				$callText = WorkPublicActivityFansUser::replaceLevelAll($name, $context, $id, $fans_id);
				MsgUtil::send($public_openid, $openid, 1, ["text" => $callText]);
				FansMsg::create($FansMsg, 1, $callText, 2, FansMsg::TO_FANS);
			}

		}
	}
