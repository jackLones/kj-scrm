<?php

	namespace app\models;

	use app\components\InvalidDataException;
	use app\util\DateUtil;
	use app\util\SUtils;
	use Yii;

	/**
	 * This is the model class for table "{{%work_contact_way_baidu}}".
	 *
	 * @property int                       $id
	 * @property int                       $corp_id            授权的企业ID
	 * @property int                       $way_group_id       渠道活码分组id
	 * @property string                    $title              活码名称
	 * @property int                       $type               联系方式类型,1-单人, 2-多人
	 * @property int                       $skip_verify        外部客户添加时是否无需验证，默认为true
	 * @property int                       $is_del             0：未删除；1：已删除
	 * @property int                       $open_date          0关闭1开启
	 * @property int                       $add_num            添加人数
	 * @property string                    $tag_ids            给客户打的标签
	 * @property string                    $content            渠道活码的欢迎语内容
	 * @property string                    $status             渠道活码的欢迎语是否开启0关闭1开启
	 * @property int                       $sync_attachment_id 同步后的素材id
	 * @property int                       $work_material_id   企业微信素材id
	 * @property int                       $groupId            分组id
	 * @property int                       $material_sync      不同步到内容库1同步
	 * @property int                       $attachment_id      内容引擎id
	 * @property string                    $update_time        更新时间
	 * @property string                    $create_time        创建时间
	 *
	 * @property WorkCorp                  $corp
	 * @property WorkContactWayBaiduCode[] $workContactWayBaiduCodes
	 */
	class WorkContactWayBaidu extends \yii\db\ActiveRecord
	{
		/**
		 * {@inheritdoc}
		 */
		public static function tableName ()
		{
			return '{{%work_contact_way_baidu}}';
		}

		/**
		 * {@inheritdoc}
		 */
		public function rules ()
		{
			return [
				[['corp_id', 'way_group_id', 'type', 'skip_verify', 'is_del', 'open_date', 'add_num', 'sync_attachment_id', 'work_material_id', 'groupId', 'material_sync', 'attachment_id'], 'integer'],
				[['tag_ids', 'content'], 'string'],
				[['update_time', 'create_time'], 'safe'],
				[['title'], 'string', 'max' => 200],
				[['corp_id'], 'exist', 'skipOnError' => true, 'targetClass' => WorkCorp::className(), 'targetAttribute' => ['corp_id' => 'id']],
			];
		}
		/**
		 * {@inheritDoc}
		 * @return bool
		 */
		public function beforeSave ($insert)
		{
			$this->content = rawurlencode($this->content);

			return parent::beforeSave($insert); // TODO: Change the autogenerated stub
		}

		/**
		 * {@inheritDoc}
		 */
		public function afterFind ()
		{
			if (!empty($this->content)) {
				$this->content = rawurldecode($this->content);
			}

			parent::afterFind(); // TODO: Change the autogenerated stub
		}
		/**
		 * {@inheritdoc}
		 */
		public function attributeLabels ()
		{
			return [
				'id'                 => Yii::t('app', 'ID'),
				'corp_id'            => Yii::t('app', '授权的企业ID'),
				'way_group_id'       => Yii::t('app', '渠道活码分组id'),
				'title'              => Yii::t('app', '活码名称'),
				'type'               => Yii::t('app', '联系方式类型,1-单人, 2-多人'),
				'skip_verify'        => Yii::t('app', '外部客户添加时是否无需验证，默认为true'),
				'is_del'             => Yii::t('app', '0：未删除；1：已删除'),
				'open_date'          => Yii::t('app', '0关闭1开启'),
				'add_num'            => Yii::t('app', '添加人数'),
				'tag_ids'            => Yii::t('app', '给客户打的标签'),
				'content'            => Yii::t('app', '渠道活码的欢迎语内容'),
				'status'             => Yii::t('app', '渠道活码的欢迎语是否开启0关闭1开启'),
				'sync_attachment_id' => Yii::t('app', '同步后的素材id'),
				'work_material_id'   => Yii::t('app', '企业微信素材id'),
				'groupId'            => Yii::t('app', '分组id'),
				'material_sync'      => Yii::t('app', '0不同步到内容库1同步'),
				'attachment_id'      => Yii::t('app', '内容引擎id'),
				'update_time'        => Yii::t('app', '修改时间'),
				'create_time'        => Yii::t('app', '添加时间'),
			];
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getCorp ()
		{
			return $this->hasOne(WorkCorp::className(), ['id' => 'corp_id']);
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getWorkContactWayBaiduCodes ()
		{
			return $this->hasMany(WorkContactWayBaiduCode::className(), ['way_id' => 'id']);
		}

		public function dumpData ()
		{
			$result = [
				'id'            => strval($this->id),
				'corp_id'       => $this->corp_id,
				'way_group_id'  => strval($this->way_group_id),
				'type'          => $this->type,
				'title'         => $this->title,
				'skip_verify'   => $this->skip_verify,
				'is_del'        => $this->is_del,
				'add_num'       => $this->add_num,
				'update_time'   => $this->update_time,
				'create_time'   => $this->create_time,
				'tag_ids'       => $this->tag_ids,
				'material_sync' => $this->material_sync,
				'attachment_id' => $this->attachment_id,
				'groupId'       => $this->groupId,
				'status'        => $this->status,
				'tag_ids'       => $this->tag_ids,
				'content'       => $this->content,
				'open_date'     => $this->open_date,
				'specialTime'   => $this->open_date,
			];

			return $result;
		}

		//添加
		public static function setWay ($otherInfo)
		{
			$uid     = !empty($otherInfo['uid']) ? $otherInfo['uid'] : 0;
			$corp_id = !empty($otherInfo['corp_id']) ? $otherInfo['corp_id'] : 0;
			if (!empty($otherInfo['id'])) {
				$way                = static::findOne($otherInfo['id']);
				$sync_attachment_id = $way->sync_attachment_id;
			} else {
				$way                = new WorkContactWayBaidu();
				$way->create_time   = DateUtil::getCurrentTime();
				$sync_attachment_id = 0;
			}
			$way->corp_id       = $corp_id;
			$way->open_date     = !empty($otherInfo['open_date']) ? 1 : 0;
			$way->skip_verify   = intval($otherInfo['skip_verify']);
			$content            = WorkWelcome::getContent($otherInfo);
			$way->content       = json_encode($content);
			$way->tag_ids       = isset($otherInfo['tag_ids']) ? $otherInfo['tag_ids'] : '';
			$way->status        = isset($otherInfo['status']) ? $otherInfo['status'] : 0;
			$way->title         = isset($otherInfo['title']) ? $otherInfo['title'] : '';
			$way->type          = isset($otherInfo['type']) ? $otherInfo['type'] : 1;
			$groupId            = isset($otherInfo['group_id']) ? $otherInfo['group_id'] : 0;
			$material_sync      = isset($otherInfo['material_sync']) ? $otherInfo['material_sync'] : 0;
			$attachment_id      = isset($otherInfo['attachment_id']) ? $otherInfo['attachment_id'] : 0;
			$way->material_sync = $material_sync;
			$way->attachment_id = $attachment_id;
			$way->groupId       = $groupId;
			/**sym 刪除選擇部門但是查询需要回写*/
			WorkDepartment::FormatData($otherInfo['choose_date'],$otherInfo['week_user']);

			//分组
			if (!empty($otherInfo['way_group_id'])) {
				$way->way_group_id = $otherInfo['way_group_id'];
			} else {
				$wayGroup = WorkContactWayBaiduGroup::setNoGroup($uid, $corp_id);
				if (!empty($wayGroup)) {
					$way->way_group_id = $wayGroup->id;
				}
			}
			//欢迎语同步到内容库
			if ($material_sync == 1 && empty($attachment_id)) {
				$otherInfo['sync_attachment_id'] = $sync_attachment_id;
				$sync_attachment_id              = WorkWelcome::syncData($otherInfo);
			}
			$way->sync_attachment_id = $sync_attachment_id;
			if ($otherInfo['add_type'] == 3 && !empty($otherInfo['attachment_id'])) {
				if (!empty($otherInfo['id'])) {
					$work_material_id = $way->work_material_id;
					if (empty($work_material_id)) {
						$way->work_material_id = WorkWelcome::getMaterialId($otherInfo);
					}
				} else {
					$way->work_material_id = WorkWelcome::getMaterialId($otherInfo);
				}
			}
			if (!$way->validate() || !$way->save()) {
				throw new InvalidDataException(SUtils::modelError($way));
			}

			try {
				if ($way->open_date == 1) {
					//同步到渠道活码日期成员表
					$choose_date = $otherInfo['choose_date'];
					$res         = WorkContactWayBaiduDate::setData($choose_date, $way->id);
					Yii::error($res, '$res');
				}
				if (!empty($otherInfo['week_user'])) {
					$weekUser = $otherInfo['week_user'];
					WorkContactWayBaiduDate::setWeekData($weekUser, $way->id);
				}
			} catch (\Exception $e) {
				$message = $e->getMessage();
				Yii::error($message, '$message-1');
				throw new InvalidDataException($message);
			}

			return $way->id;
		}

		/**
		 * @param $userList
		 * @param $departmentList
		 * @param $corp_id
		 *
		 * @return array
		 *
		 */
		public static function getUserDepart ($userList, $departmentList, $corp_id)
		{
			$userId  = [];
			$partyId = [];
			if (!empty($userList)) {
				$userList = json_decode($userList, true);
				if (is_array($userList)) {
					foreach ($userList as $val) {
						$workUser = WorkUser::findOne($val['id']);
						if (!empty($workUser) && $workUser->corp_id == $corp_id) {
							array_push($userId, $workUser->userid);
						}
					}
				} else {
					$workUser = WorkUser::findOne($userList);
					if (!empty($workUser) && $workUser->corp_id == $corp_id) {
						array_push($userId, $workUser->userid);
					}
				}

			}
			if (!empty($departmentList)) {
				$departments = json_decode($departmentList, true);
				if (!empty($departments)) {
					foreach ($departments as $depart) {
						$department = WorkDepartment::findOne($depart);
						if (!empty($department) && $department->corp_id == $corp_id) {
							array_push($partyId, $department->department_id);
						}
					}
				}
			}

			return [
				'userId'  => $userId,
				'partyId' => $partyId,
			];

		}

		//获取活码成员部门数据
		public static function getUserPartyId ($way_id)
		{
			$userId  = [];
			$partyId = [];
			$week    = date('l');
			$day     = '';
			switch ($week) {
				case 'Monday':
					$day = WorkContactWayBaiduDate::MONDAY_DAY;
					break;
				case 'Tuesday':
					$day = WorkContactWayBaiduDate::TUESDAY_DAY;
					break;
				case 'Wednesday':
					$day = WorkContactWayBaiduDate::WEDNESDAY_DAY;
					break;
				case 'Thursday':
					$day = WorkContactWayBaiduDate::THURSDAY_DAY;
					break;
				case 'Friday':
					$day = WorkContactWayBaiduDate::FRIDAY_DAY;
					break;
				case 'Saturday':
					$day = WorkContactWayBaiduDate::SATURDAY_DAY;
					break;
				case 'Sunday':
					$day = WorkContactWayBaiduDate::SUNDAY_DAY;
					break;
			}
			$date    = date('Y-m-d');
			$newTime = time() + 60;
			$h       = date('H');
			if ($h == 23) {
				$date = date("Y-m-d", strtotime("+1 day"));
			}
			$contactWay = static::findOne($way_id);
			if (!empty($contactWay)) {
				$wayDate = WorkContactWayBaiduDate::findOne(['way_id' => $contactWay['id'], 'type' => 0, 'day' => $day]);
				if (!empty($wayDate)) {
					$dateUser = WorkContactWayBaiduDateUser::find()->andWhere(['date_id' => $wayDate->id])->asArray()->all();
					if (!empty($dateUser)) {
						foreach ($dateUser as $user) {
							if ($user['time'] == '00:00-00:00') {
								$userDepart = static::getUserDepart($user['user_key'], $user['department'], $contactWay['corp_id']);
								$userId     = $userDepart['userId'];
								$partyId    = $userDepart['partyId'];
							}
							if ($user['time'] != '00:00-00:00') {
								$time  = explode('-', $user['time']);
								$date1 = $date . ' ' . $time[0] . ':00';
								$date2 = $date . ' ' . $time[1] . ':00';
								if ($time[1] == '00:00') {
									$date2 = $date . ' ' . '23:59:59';
								}
								if ($newTime >= strtotime($date1) && $newTime <= strtotime($date2)) {
									$userDepart = static::getUserDepart($user['user_key'], $user['department'], $contactWay['corp_id']);
									$userId     = $userDepart['userId'];
									$partyId    = $userDepart['partyId'];
								}
							}
						}
					}
				}
				if ($contactWay['open_date'] == 1) {
					$workDateUser = WorkContactWayBaiduDate::find()->where(['type' => 1, 'way_id' => $contactWay['id']])->asArray()->all();
					if (!empty($workDateUser)) {
						foreach ($workDateUser as $user) {
							$time1 = strtotime($user['start_date']);
							$time2 = strtotime($user['end_date'] . ' 23:59:59');
							if ($newTime >= $time1 && $newTime <= $time2) {
								$dateUser = WorkContactWayBaiduDateUser::find()->andWhere(['date_id' => $user['id']])->asArray()->all();
								foreach ($dateUser as $user) {
									if ($user['time'] == '00:00-00:00') {
										$userDepart = static::getUserDepart($user['user_key'], $user['department'], $contactWay['corp_id']);
										$userId     = $userDepart['userId'];
										$partyId    = $userDepart['partyId'];
									}
									if ($user['time'] != '00:00-00:00') {
										$time  = explode('-', $user['time']);
										$date1 = $date . ' ' . $time[0] . ':00';
										$date2 = $date . ' ' . $time[1] . ':00';
										if ($time[1] == '00:00') {
											$date2 = $date . ' ' . '23:59:59';
										}
										if ($newTime >= strtotime($date1) && $newTime <= strtotime($date2)) {
											$userDepart = static::getUserDepart($user['user_key'], $user['department'], $contactWay['corp_id']);
											$userId     = $userDepart['userId'];
											$partyId    = $userDepart['partyId'];
										}
									}

								}
							}
						}
					}
				}
			}

			return [
				'userId'  => $userId,
				'partyId' => $partyId,
			];
		}
	}
