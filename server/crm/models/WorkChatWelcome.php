<?php

	namespace app\models;

	use app\util\DateUtil;
	use dovechen\yii2\weWork\src\dataStructure\ExternalContactMsgTemplate;
	use Yii;
	use app\util\SUtils;
	use app\util\WorkUtils;
	use app\components\InvalidDataException;
	use yii\helpers\ArrayHelper;

	/**
	 * This is the model class for table "{{%work_chat_welcome}}".
	 *
	 * @property int      $id
	 * @property int      $corp_id            授权的企业ID
	 * @property string   $context            欢迎语内容
	 * @property string   $template_id        群欢迎语的素材id
	 * @property int      $status             是否有效1是0否
	 * @property int      $sync_attachment_id 同步后的素材id
	 * @property int      $work_material_id   企业微信素材id
	 * @property int      $group_id           素材分组id
	 * @property int      $material_sync      0不同步到内容库1同步
	 * @property int      $attachment_id      内容引擎id
	 * @property int      $update_time        更新时间
	 * @property int      $create_time        创建时间
	 *
	 * @property WorkCorp $corp
	 */
	class WorkChatWelcome extends \yii\db\ActiveRecord
	{
		/**
		 * {@inheritdoc}
		 */
		public static function tableName ()
		{
			return '{{%work_chat_welcome}}';
		}

		/**
		 * {@inheritdoc}
		 */
		public function rules ()
		{
			return [
				[['corp_id', 'status', 'sync_attachment_id', 'work_material_id', 'group_id', 'material_sync', 'attachment_id', 'update_time', 'create_time'], 'integer'],
				[['context', 'template_id'], 'string'],
				[['corp_id'], 'exist', 'skipOnError' => true, 'targetClass' => WorkCorp::className(), 'targetAttribute' => ['corp_id' => 'id']],
			];
		}

		/**
		 * {@inheritdoc}
		 */
		public function attributeLabels ()
		{
			return [
				'id'                 => Yii::t('app', 'ID'),
				'corp_id'            => Yii::t('app', '授权的企业ID'),
				'context'            => Yii::t('app', '欢迎语内容'),
				'template_id'        => Yii::t('app', '群欢迎语的素材id'),
				'status'             => Yii::t('app', '是否有效1是0否'),
				'sync_attachment_id' => Yii::t('app', '同步后的素材id'),
				'work_material_id'   => Yii::t('app', '企业微信素材id'),
				'group_id'           => Yii::t('app', '素材分组id'),
				'material_sync'      => Yii::t('app', '0不同步到内容库1同步'),
				'attachment_id'      => Yii::t('app', '内容引擎id'),
				'update_time'        => Yii::t('app', '更新时间'),
				'create_time'        => Yii::t('app', '创建时间'),
			];
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getCorp ()
		{
			return $this->hasOne(WorkCorp::className(), ['id' => 'corp_id']);
		}

		/**
		 * {@inheritDoc}
		 * @return bool
		 */
		public function beforeSave ($insert)
		{
			$this->context = rawurlencode($this->context);

			return parent::beforeSave($insert); // TODO: Change the autogenerated stub
		}

		/**
		 * {@inheritDoc}
		 */
		public function afterFind ()
		{
			if (!empty($this->context)) {
				$this->context = rawurldecode($this->context);
			}

			parent::afterFind(); // TODO: Change the autogenerated stub
		}

		/**
		 * @param $welcome
		 *
		 * @return array
		 *
		 */
		public static function getData ($welcome)
		{
			$wel_type = '';
			$content  = json_decode($welcome->context, true);
			$con      = array_keys($content);

			if (in_array('text', $con)) {
				$wel_type .= '文本+';
			}
			if (in_array('image', $con)) {
				$wel_type .= '图片+';
			}
			if (in_array('link', $con)) {
				$wel_type .= '链接+';
			}
			if (in_array('miniprogram', $con)) {
				$wel_type .= '小程序+';
			}
			$wel_type = rtrim($wel_type, '+');

			return $wel_type;
		}

		/**
		 * @param $content
		 *
		 * @return array
		 *
		 */
		public static function getContentData ($content)
		{
			$data        = [];
			$msg_type    = isset($content['msg_type']) ? $content['msg_type'] : 0;
			$text        = isset($content['text']) ? $content['text'] : '';
			$image       = isset($content['image']) ? $content['image'] : '';
			$link        = isset($content['link']) ? $content['link'] : '';
			$miniprogram = isset($content['miniprogram']) ? $content['miniprogram'] : '';
			if (!empty($text)) {
				$data['text_content'] = str_replace('%NICKNAME%', '{nickname}', $content['text']['content']);
			}
			if (!empty($image)) {
				$work_material               = WorkMaterial::findOne(['attachment_id' => $content['image']['media_id']]);
				$attachment                  = Attachment::findOne($content['image']['media_id']);
				$data['image_url']           = $work_material->local_path;
				$data['image_attachment_id'] = $work_material->attachment_id;
				$data['file_name']           = $attachment->file_name;
				$data['add_type']            = 1;
			}
			if (!empty($link)) {
				$data['link_title']         = $content['link']['title'];
				$data['link_pic_url']       = '';
				$data['link_attachment_id'] = 0;
				if (!empty($content['link']['picurl'])) {
					$attachment                 = Attachment::findOne(['id' => $content['link']['picurl']]);
					$data['link_attachment_id'] = $content['link']['picurl'];
					$data['link_pic_url']       = $attachment->local_path;
				}
				if ($msg_type == 5) {
					$data['link_desc'] = $content['link']['description'];
				} else {
					$data['link_desc'] = $content['link']['desc'];
				}
				$data['link_url'] = $content['link']['url'];
				$data['add_type'] = 2;
			}
			if (!empty($miniprogram)) {
				$data['mini_title'] = $content['miniprogram']['title'];
				$work_material      = WorkMaterial::findOne(['attachment_id' => $content['miniprogram']['pic_media_id']]);
				if (!empty($work_material)) {
					$data['mini_pic_url']       = $work_material->local_path;
					$data['mini_attachment_id'] = $work_material->attachment_id;
				}
				$data['mini_appid'] = $content['miniprogram']['appid'];
				$data['mini_page']  = $content['miniprogram']['page'];
				$data['add_type']   = 3;
			}

			return $data;
		}

		/**
		 * @param $data
		 * @param $content
		 * @param $contentData
		 *
		 * @return mixed
		 *
		 */
		public static function getWelcomeData ($data, $content, $contentData)
		{
			$msg_type    = isset($content['msg_type']) ? $content['msg_type'] : 0;
			$text        = isset($content['text']) ? $content['text'] : '';
			$image       = isset($content['image']) ? $content['image'] : '';
			$link        = isset($content['link']) ? $content['link'] : '';
			$miniprogram = isset($content['miniprogram']) ? $content['miniprogram'] : '';
			if (!empty($text)) {
				$data['text_content'] = $contentData['text_content'];
			}
			if (!empty($image)) {
				$data['image_url']           = $contentData['image_url'];
				$data['file_name']           = $contentData['file_name'];
				$data['image_attachment_id'] = $contentData['image_attachment_id'];
				$data['add_type']            = $contentData['add_type'];
			}
			if (!empty($link)) {
				if (!empty($data['attachment_id'])) {
					$attachment   = Attachment::findOne($data['attachment_id']);
					$link_pic_url = $attachment->local_path;
				} else {
					$link_pic_url = $contentData['link_pic_url'];
				}
				$data['link_title']         = $contentData['link_title'];
				$data['link_pic_url']       = $link_pic_url;
				$data['link_attachment_id'] = $contentData['link_attachment_id'];
				$data['link_desc']          = $contentData['link_desc'];
				$data['link_url']           = $contentData['link_url'];
				$data['add_type']           = $contentData['add_type'];

				//todo beenlee 雷达链接状态
				if (isset($data['material_sync'])) {
					if ($data['material_sync'] > 0 && isset($data['sync_attachment_id'])) {
						$radarInfo = RadarLink::findOne(['associat_type' => 0, 'associat_id' => $data['sync_attachment_id']]);
					} else {
						$radarInfo = RadarLink::findOne(['associat_type' => 3, 'associat_id' => $data['id']]);
					}

					if ($radarInfo) {
						$data['radar_id']             = $radarInfo->id;
						$data['radar_status']         = $radarInfo->status;
						$data['dynamic_notification'] = $radarInfo->dynamic_notification;
						$data['radar_tag_open']       = $radarInfo->radar_tag_open;
						$tag_ids                      = $radarInfo->tag_ids;
						if (!empty($radarInfo->tag_ids)) {
							$tag_ids = explode(',', $tag_ids);
							sort($tag_ids);
							$tag_ids = implode(',', $tag_ids);
						}
						$data['radar_tag_ids']      = $tag_ids;
						$data['radar_tag_ids_name'] = $tags_name = [];
						if (!empty($radarInfo->tag_ids)) {
							$tags = WorkTag::find()->select('id,tagname')->where(['in', 'id', explode(',', $radarInfo->tag_ids)])->andWhere(['is_del' => 0])->all();
							if ($tags) {
								$tags_name = array_values(ArrayHelper::map($tags, 'id', 'tagname'));
							}
						}
						if (isset($tags_name) && !empty($tags_name)) {
							$data['radar_tag_ids_name'] = $tags_name;
						}
					} else {
						$data['radar_id']             = 0;
						$data['radar_status']         = 0;
						$data['dynamic_notification'] = 0;
						$data['radar_tag_open']       = 0;
						$data['radar_tag_ids']        = '';
						$data['radar_tag_ids_name']   = [];
					}
				}
			}
			if (!empty($miniprogram)) {
				if (!empty($data['attachment_id'])) {
					$attachment         = Attachment::findOne($data['attachment_id']);
					$mini_pic_url       = $attachment->local_path;
					$mini_appid         = $attachment->appId;
					$mini_page          = $attachment->appPath;
					$mini_title         = $attachment->file_name;
					$mini_attachment_id = '';
				} else {
					$mini_pic_url       = $contentData['mini_pic_url'];
					$mini_appid         = $contentData['mini_appid'];
					$mini_page          = $contentData['mini_page'];
					$mini_title         = $contentData['mini_title'];
					$mini_attachment_id = $contentData['mini_attachment_id'];
				}
				$data['mini_title']         = $mini_title;
				$data['mini_pic_url']       = $mini_pic_url;
				$data['mini_appid']         = $mini_appid;
				$data['mini_page']          = $mini_page;
				$data['mini_attachment_id'] = $mini_attachment_id;
				$data['add_type']           = $contentData['add_type'];
			}

			if ($msg_type == 3) {
				$data['voice_media_id'] = $content['voice']['media_id'];
				$attachment             = Attachment::findOne($content['voice']['media_id']);
				$data['file_name']      = $attachment->file_name;
			}
			if ($msg_type == 4) {
				$data['video_media_id'] = $content['video']['media_id'];
				$attachment             = Attachment::findOne($content['video']['media_id']);
				$data['file_name']      = $attachment->file_name;
			}
			if ($msg_type == 7) {
				$data['file_media_id'] = $content['file']['media_id'];
				$attachment            = Attachment::findOne($content['file']['media_id']);
				$data['file_name']     = $attachment->file_name;
			}

			return $data;
		}

		/**
		 * @param $data
		 *
		 * @return bool
		 * @throws InvalidDataException
		 */
		public static function add ($data)
		{
			static::verify($data);
			$sync_attachment_id = 0;
			if (!empty($data['id'])) {
				$work_welcome = self::findOne($data['id']);
				if (empty($work_welcome)) {
					throw new InvalidDataException('群欢迎语数据错误！');
				}
				$work_welcome->update_time = time();
				$sync_attachment_id        = $work_welcome->sync_attachment_id;
			} else {
				$work_welcome              = new self();
				$work_welcome->status      = 1;
				$work_welcome->create_time = time();
			}

			$transaction = \Yii::$app->db->beginTransaction();
			try {
				if ($data['add_type'] == 2 && !empty($data['link_image'])) {
					$link_image      = $data['link_image'];
					$sub_id          = $data['sub_id'];
					$isMasterAccount = $data['isMasterAccount'];
					$group_id        = NULL;
					unset($data['link_image']);
					unset($data['sub_id']);
					unset($data['isMasterAccount']);

					if (empty($group_id)) {
						$groupInfo = AttachmentGroup::findOne(['uid' => $data['uid'], 'is_not_group' => 1]);
						if (empty($groupInfo)) {
							$group               = new AttachmentGroup();
							$group->uid          = $data['uid'];
							$group->title        = '未分组';
							$group->sort         = 1;
							$group->is_not_group = 1;
							$group->create_time  = DateUtil::getCurrentTime();
							if (!$group->validate() || !$group->save()) {
								throw new InvalidDataException(SUtils::modelError($group));
							}
							Attachment::updateAll(['group_id' => $group->id], ['uid' => $data['uid'], 'status' => 1, 'group_id' => NULL]);
							$group_id = $group->id;
						} else {
							$group_id = $groupInfo->id;
						}
					}

					//上传临时图片素材
					$attachment                  = new Attachment();
					$attachment->uid             = $data['uid'];
					$attachment->sub_id          = $sub_id;
					$attachment->isMasterAccount = $isMasterAccount;
					$attachment->file_type       = 1;
					$attachment->create_time     = DateUtil::getCurrentTime();
					$attachment->group_id        = $group_id;
					$attachment->is_temp         = 1;

					//文件
					$link_image_name = pathinfo($link_image, PATHINFO_FILENAME);
					$length          = mb_strlen($link_image_name, 'utf-8');
					if ($length > 128) {
						$attachment->file_name = mb_substr($link_image_name, 0, 128, 'utf-8');
					} else {
						$attachment->file_name = $link_image_name;
					}

					$img_data                      = getimagesize(\Yii::getAlias('@app') . $link_image);
					$attachment->local_path        = $link_image;
					$attachment->file_length       = $img_data['bits'];
					$attachment->file_content_type = $img_data['mime'];
					$attachment->file_width        = $img_data[0];
					$attachment->file_height       = $img_data[1];

					if (!$attachment->validate() || !$attachment->save()) {
						throw new InvalidDataException(SUtils::modelError($attachment));
					}

					$data['link_attachment_id'] = $attachment->id;
				}

				if ($data['add_type'] == 3 && !empty($data['attachment_id'])) {
					if (!empty($data['id'])) {
						$work_material_id = $work_welcome->work_material_id;
						if (empty($work_material_id)) {
							$work_welcome->work_material_id = WorkWelcome::getMaterialId($data);
						}
					} else {
						$work_welcome->work_material_id = WorkWelcome::getMaterialId($data);
					}
				}

				//beenlee 同步到内容库
				if ($data['material_sync'] == 1 && empty($data['attachment_id'])) {
					$data['sync_attachment_id'] = $sync_attachment_id;
					$sync_attachment_id         = WorkWelcome::syncData($data);
				}

				$content = WorkWelcome::getContent($data, 1);

				try {
					$sendData         = $content;
					$attachment_id    = isset($data['attachment_id']) ? $data['attachment_id'] : 0;
					$work_material_id = isset($work_welcome->work_material_id) ? $work_welcome->work_material_id : 0;
					$sendData         = WorkWelcome::returnData($sendData, $attachment_id, $work_material_id, $data['corp_id']);

					$workApi = WorkUtils::getWorkApi($data['corp_id'], WorkUtils::EXTERNAL_API);

					if (!empty($data['id'])) {
						$sendData['template_id'] = $work_welcome->template_id;
						$sendData                = ExternalContactMsgTemplate::parseFromArray($sendData);
						$result                  = $workApi->ECGroupWelcomeTemplateEdit($sendData);
					} else {
						$sendData = ExternalContactMsgTemplate::parseFromArray($sendData);
						$result   = $workApi->ECGroupWelcomeTemplateAdd($sendData);
					}
					\Yii::error($result, 'ECGroupWelcomeTemplateAdd');

					if ($result['errcode'] != 0) {
						throw new InvalidDataException($result['errmsg']);
					}

					$work_welcome->corp_id            = $data['corp_id'];
					$work_welcome->context            = json_encode($content);
					$work_welcome->template_id        = isset($result['template_id']) && !empty($result['template_id']) ? $result['template_id'] : $work_welcome->template_id;
					$work_welcome->material_sync      = $data['material_sync'];
					$work_welcome->attachment_id      = $data['attachment_id'];
					$work_welcome->group_id           = $data['group_id'];
					$work_welcome->sync_attachment_id = $sync_attachment_id;

					if (!empty($work_welcome->dirtyAttributes)) {
						if (!$work_welcome->validate() || !$work_welcome->save()) {
							throw new InvalidDataException(SUtils::modelError($work_welcome));
						}

						/*if (!($data['material_sync'] == 1 && empty($data['attachment_id']))) {
							//beenlee 不同步 雷达规则跟随欢迎语
							if (isset($data['dynamic_notification'])) {
								$data['radar_dynamic_notification'] = $data['dynamic_notification'];
							}
							if (isset($data['radar_open'], $data['radar_dynamic_notification'], $data['radar_tag_open'], $data['radar_tag_ids']) && $data['radar_open'] >= 0) {
								//RadarLink::addRadarLink(3, $work_welcome->id, $data['radar_dynamic_notification'], $data['radar_tag_open'], $data['radar_tag_ids'], $data['radar_open'], '群欢迎语ID:'.$work_welcome->id);
							}
						}*/

						$transaction->commit();
					}
				} catch (\Exception $e) {
					\Yii::error($e->getMessage(), 'ECGroupWelcomeTemplateAdd_error');
					$message = $e->getMessage();
					if (strpos($message, '90207') !== false) {
						$message = '不合法的小程序appid';
					} elseif (strpos($message, '90200') !== false) {
						$message = '缺少小程序appid参数';
					} elseif (strpos($message, '90206') !== false) {
						$message = '小程序未关联到企业中';
					} elseif (strpos($message, '90208') !== false) {
						$message = '小程序appid不匹配';
					}
					throw new InvalidDataException($message);
				}

			} catch (InvalidDataException $e) {
				$transaction->rollBack();
				throw new InvalidDataException($e->getMessage());
			}

			return true;
		}

		/**
		 * 验证数据
		 *
		 * @param     $data
		 *
		 * @return bool
		 *
		 * @throws InvalidDataException
		 */
		public static function verify ($data)
		{
			$text_content       = isset($data['text_content']) ? $data['text_content'] : '';
			$add_type           = isset($data['add_type']) ? $data['add_type'] : '';
			$attachment_id      = isset($data['attachment_id']) ? $data['attachment_id'] : 0;
			$media_id           = isset($data['media_id']) ? $data['media_id'] : '';
			$link_attachment_id = isset($data['link_attachment_id']) ? $data['link_attachment_id'] : 0;
			$link_title         = isset($data['link_title']) ? $data['link_title'] : '';
			$link_url           = isset($data['link_url']) ? $data['link_url'] : '';
			$link_desc          = isset($data['link_desc']) ? $data['link_desc'] : '';
			$mini_title         = isset($data['mini_title']) ? $data['mini_title'] : '';
			$mini_pic_media_id  = isset($data['mini_pic_media_id']) ? $data['mini_pic_media_id'] : '';
			$mini_appid         = isset($data['mini_appid']) ? $data['mini_appid'] : '';
			$mini_page          = isset($data['mini_page']) ? $data['mini_page'] : '';

			if (empty($text_content) && empty($add_type)) {
				throw new InvalidDataException('欢迎语内容不能为空！');
			}
			if (!empty($text_content) && mb_strlen($text_content, 'utf-8') > 1000) {
				throw new InvalidDataException('文本内容最多1000个字！');
			}
			if (empty($media_id) && $add_type == 1) {
				throw new InvalidDataException('图片内容不能为空！');
			}
			if ($add_type == 1) {
				$attachment = Attachment::findOne($media_id);
				if ($attachment->status == 0) {
					throw new InvalidDataException('图片素材已删除！');
				}
			}
			if ($add_type == 2) {
				if (!empty($attachment_id)) {
					$attachment = Attachment::findOne($attachment_id);
					if ($attachment->status == 0) {
						throw new InvalidDataException('图文素材已删除！');
					}
				} else {
					if (!empty($link_attachment_id)) {
						$attachment = Attachment::findOne($link_attachment_id);
						if ($attachment->status == 0) {
							throw new InvalidDataException('图文素材的图片已删除！');
						}
					}
					if (empty($link_title) || empty($link_url)) {
						throw new InvalidDataException('网页标题和链接不能同时为空！');
					}
					if (!empty($link_title) && mb_strlen($link_title, 'utf-8') > 32) {
						throw new InvalidDataException('网页标题最多32个字！');
					}
					if (!empty($link_desc) && mb_strlen($link_desc, 'utf-8') > 128) {
						throw new InvalidDataException('网页描述最多128个字！');
					}
					$url = explode(':', $link_url);
					if (isset($url[0]) && isset($url[1])) {
						$link_url = strtolower($url[0]) . ':' . $url[1];
					}
					$preg = "/^http(s)?:\\/\\/.+/";
					if (!preg_match($preg, $link_url)) {
						throw new InvalidDataException('网页的链接必须是以http或https开头！');
					}
				}

			}
			if ($add_type == 3) {
				if (!empty($attachment_id)) {
					$attachment = Attachment::findOne($attachment_id);
					if ($attachment->status == 0) {
						throw new InvalidDataException('小程序素材已删除！');
					}
				} else {
					$attachment = Attachment::findOne($mini_pic_media_id);
					if (!empty($attachment)) {
						if ($attachment->status == 0) {
							throw new InvalidDataException('小程序封面素材已删除！');
						}
					}
					if (empty($mini_title)) {
						throw new InvalidDataException('小程序消息标题不能为空！');
					}
					if (!empty($mini_title) && mb_strlen($mini_title, 'utf-8') > 16) {
						throw new InvalidDataException('小程序标题最多16个字！');
					}
					if (empty($mini_pic_media_id)) {
						throw new InvalidDataException('小程序封面不能为空！');
					}
					if (empty($mini_appid)) {
						throw new InvalidDataException('小程序appid不能为空！');
					}
					if (empty($mini_page)) {
						throw new InvalidDataException('小程序路径不能为空！');
					}
				}

			}

			return true;
		}

		/**
		 * 群欢迎语删除
		 *
		 * @param int $id
		 *
		 * @return bool
		 *
		 * @throws InvalidDataException
		 */
		public static function updateStatus ($id)
		{
			$chatWelcome = WorkChatWelcome::findOne($id);
			if (empty($chatWelcome)) {
				throw new InvalidDataException('群欢迎语数据错误！');
			}

			try {
				$workApi = WorkUtils::getWorkApi($chatWelcome->corp_id, WorkUtils::EXTERNAL_API);
				$result  = $workApi->ECGroupWelcomeTemplateDel($chatWelcome->template_id);
				\Yii::error($result, 'ECGroupWelcomeTemplateDel');

				if ($result['errcode'] != 0) {
					throw new InvalidDataException($result['errmsg']);
				}
			} catch (\Exception $e) {
				\Yii::error($e->getMessage(), 'ECGroupWelcomeTemplateDel_error');
			}

			$chatWelcome->status = 0;
			if (!$chatWelcome->validate() || !$chatWelcome->save()) {
				throw new InvalidDataException(SUtils::modelError($chatWelcome));
			}

			return true;
		}

	}
