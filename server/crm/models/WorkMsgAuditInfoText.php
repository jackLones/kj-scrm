<?php

	namespace app\models;

	use app\components\InvalidDataException;
	use app\util\SUtils;
	use Yii;

	/**
	 * This is the model class for table "{{%work_msg_audit_info_text}}".
	 *
	 * @property int                              $id
	 * @property int                              $audit_info_id         会话内容ID
	 * @property string                           $content               消息内容
	 * @property string                           $content_convert       消息内容（解码后）
	 *
	 * @property WorkMsgAuditInfoChatrecordItem[] $workMsgAuditInfoChatrecordItems
	 * @property WorkMsgAuditInfoMixed[]          $workMsgAuditInfoMixeds
	 * @property WorkMsgAuditInfo                 $auditInfo
	 */
	class WorkMsgAuditInfoText extends \yii\db\ActiveRecord
	{
		const MSG_TYPE = 'text';

		/**
		 * {@inheritdoc}
		 */
		public static function tableName ()
		{
			return '{{%work_msg_audit_info_text}}';
		}

		/**
		 * {@inheritdoc}
		 */
		public function rules ()
		{
			return [
				[['audit_info_id'], 'integer'],
				[['content'], 'string'],
				[['audit_info_id'], 'exist', 'skipOnError' => true, 'targetClass' => WorkMsgAuditInfo::className(), 'targetAttribute' => ['audit_info_id' => 'id']],
			];
		}

		/**
		 * {@inheritdoc}
		 */
		public function attributeLabels ()
		{
			return [
				'id'              => Yii::t('app', 'ID'),
				'audit_info_id'   => Yii::t('app', '会话内容ID'),
				'content'         => Yii::t('app', '消息内容'),
				'content_convert' => Yii::t('app', '消息内容（解码后）'),
			];
		}

		public function beforeSave ($insert)
		{
			$this->content = rawurlencode($this->content);

			return parent::beforeSave($insert); // TODO: Change the autogenerated stub
		}

		public function afterFind ()
		{
			if (!empty($this->content)) {
				$this->content = rawurldecode($this->content);
			}

			parent::afterFind(); // TODO: Change the autogenerated stub
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getWorkMsgAuditInfoChatrecordItems ()
		{
			return $this->hasMany(WorkMsgAuditInfoChatrecordItem::className(), ['text_id' => 'id']);
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getWorkMsgAuditInfoMixeds ()
		{
			return $this->hasMany(WorkMsgAuditInfoMixed::className(), ['text_id' => 'id']);
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getAuditInfo ()
		{
			return $this->hasOne(WorkMsgAuditInfo::className(), ['id' => 'audit_info_id']);
		}

		public function dumpData ()
		{
			return [
				'content' => $this->content
			];
		}

		/**
		 * @param      $infoId
		 * @param      $info
		 * @param bool $needCreate
		 *
		 * @return int
		 *
		 * @throws InvalidDataException
		 */
		public static function create ($infoId, $info, $needCreate = false)
		{
			$textInfo = self::findOne(['audit_info_id' => $infoId]);

			if (empty($textInfo) || $needCreate) {
				$textInfo                  = new self();
				$textInfo->audit_info_id   = $infoId;
				$textInfo->content         = $info['content'];
				$textInfo->content_convert = $info['content'];

				if (!$textInfo->validate() || !$textInfo->save()) {
					throw new InvalidDataException(SUtils::modelError($textInfo));
				}

				$result    = '';
				$auditInfo = WorkMsgAuditInfo::findOne($infoId);

				//智能推荐
				if ($auditInfo->from_type == 2 && $auditInfo->to_type == 1 && !empty($auditInfo->to_user_id)){
					$auditUser = WorkMsgAuditUser::findOne(['audit_id' => $auditInfo->audit_id, 'user_id' => $auditInfo->to_user_id, 'keyword_status' => 1]);
					if (!empty($auditUser)){
						WorkMsgKeywordUser::creat($auditInfo, $info['content']);
					}
				}

				//发送提醒
				if (!empty($auditInfo->roomid)) {
					if (!empty($auditInfo->chat_id)) {
						WorkChatRemindSend::creat($auditInfo, static::MSG_TYPE, $textInfo->content);
					}
				} else {
					$result = WorkUserTagExternal::setData($auditInfo, $info['content']);
					\Yii::error($result,'WorkUserTagExternal');
					LimitWordRemind::setSendData($auditInfo, $info['content']);
				}
			}

			return $textInfo->id;
		}
	}
