<?php

	namespace app\models;

	use Yii;
	use app\components\InvalidDataException;
	use app\util\DateUtil;
	use app\util\SUtils;
	use app\util\WorkUtils;
	use dovechen\yii2\weWork\src\dataStructure\ExternalContactWay;
	use dovechen\yii2\weWork\Work;

	/**
	 * This is the model class for table "{{%work_chat_contact_way}}".
	 *
	 * @property int                     $id
	 * @property int                     $corp_id      授权的企业ID
	 * @property int                     $way_group_id 渠道活码分组id
	 * @property int                     $type         拉群方式：1群二维码2企微活码
	 * @property string                  $config_id    联系方式的配置id
	 * @property string                  $title        活码名称
	 * @property int                     $skip_verify  外部客户添加时是否无需验证，默认为true
	 * @property string                  $state        企业自定义的state参数，用于区分不同的添加渠道，在调用“获取外部联系人详情”时会返回该参数值
	 * @property int                     $is_del       0：未删除；1：已删除
	 * @property string                  $qr_code      联系二维码的URL
	 * @property int                     $add_num      添加人数群聊人数
	 * @property string                  $tag_ids      给客户打的标签
	 * @property string                  $user_key     用户选择的key值
	 * @property string                  $user         用户userID列表
	 * @property string                  $content      渠道活码的欢迎语内容
	 * @property string                  $local_path   二维码图片本地地址
	 * @property string                  $create_time  创建时间
	 *
	 * @property WorkCorp                $corp
	 * @property WorkChatContactWayGroup $wayGroup
	 * @property WorkChatWayList[]       $workChatWayLists
	 */
	class WorkChatContactWay extends \yii\db\ActiveRecord
	{

		const CHAT_HEAD = 'chat';

		/**
		 * {@inheritdoc}
		 */
		public static function tableName ()
		{
			return '{{%work_chat_contact_way}}';
		}

		/**
		 * {@inheritdoc}
		 */
		public function rules ()
		{
			return [
				[['corp_id', 'way_group_id', 'type', 'skip_verify', 'is_del', 'add_num'], 'integer'],
				[['tag_ids', 'user_key', 'user', 'content', 'local_path'], 'string'],
				[['create_time'], 'safe'],
				[['config_id', 'state'], 'string', 'max' => 64],
				[['title'], 'string', 'max' => 200],
				[['qr_code'], 'string', 'max' => 255],
				[['corp_id'], 'exist', 'skipOnError' => true, 'targetClass' => WorkCorp::className(), 'targetAttribute' => ['corp_id' => 'id']],
				[['way_group_id'], 'exist', 'skipOnError' => true, 'targetClass' => WorkChatContactWayGroup::className(), 'targetAttribute' => ['way_group_id' => 'id']],
			];
		}

		/**
		 * {@inheritdoc}
		 */
		public function attributeLabels ()
		{
			return [
				'id'           => Yii::t('app', 'ID'),
				'corp_id'      => Yii::t('app', '授权的企业ID'),
				'way_group_id' => Yii::t('app', '渠道活码分组id'),
				'type'         => Yii::t('app', '拉群方式：1群二维码2企微活码'),
				'config_id'    => Yii::t('app', '联系方式的配置id'),
				'title'        => Yii::t('app', '活码名称'),
				'skip_verify'  => Yii::t('app', '外部客户添加时是否无需验证，默认为true'),
				'state'        => Yii::t('app', '企业自定义的state参数，用于区分不同的添加渠道，在调用“获取外部联系人详情”时会返回该参数值'),
				'is_del'       => Yii::t('app', '0：未删除；1：已删除'),
				'qr_code'      => Yii::t('app', '联系二维码的URL'),
				'add_num'      => Yii::t('app', '添加人数群聊人数'),
				'tag_ids'      => Yii::t('app', '给客户打的标签'),
				'user_key'     => Yii::t('app', '用户选择的key值'),
				'user'         => Yii::t('app', '用户userID列表'),
				'content'      => Yii::t('app', '渠道活码的欢迎语内容'),
				'local_path'   => Yii::t('app', '二维码图片本地地址'),
				'create_time'  => Yii::t('app', '创建时间'),
			];
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getCorp ()
		{
			return $this->hasOne(WorkCorp::className(), ['id' => 'corp_id']);
		}

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getWayGroup ()
		{
			return $this->hasOne(WorkChatContactWayGroup::className(), ['id' => 'way_group_id']);
		}
		/**
		 * {@inheritDoc}
		 * @return bool
		 */
		public function beforeSave ($insert)
		{
			$this->content = rawurlencode($this->content);

			return parent::beforeSave($insert); // TODO: Change the autogenerated stub
		}

		/**
		 * {@inheritDoc}
		 */
		public function afterFind ()
		{
			if (!empty($this->content)) {
				$this->content = rawurldecode($this->content);
			}

			parent::afterFind(); // TODO: Change the autogenerated stub
		}
		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getWorkChatWayLists ()
		{
			return $this->hasMany(WorkChatWayList::className(), ['way_id' => 'id']);
		}

		/**
		 * @param $flag
		 * 群活码数据
		 * @return array
		 *
		 */
		public function dumpData ($flag=0)
		{
			$userKeyArr = json_decode($this->user_key, 1);
			$tagIds  = [];
			$tagName = [];
			if (!empty($this->tag_ids)) {
				$tagIds  = explode(',', $this->tag_ids);
				$tag     = WorkTag::find()->where(["and",["corp_id"=>$this->corp_id],['in', 'id', $tagIds]])->andWhere(['is_del' => 0])->asArray()->all();
				$tagName = array_column($tag, 'tagname');
			}

			$success_num       = 0;
			$externalContactId = WorkExternalContact::find()->Where("find_in_set ($this->id,chat_way_id)")->andWhere(["corp_id"=>$this->corp_id])->select('id')->asArray()->all();

			if ($this->type == 1){
				$detail = WorkExternalContactUserWayDetail::find()->where(["way_id" => $this->id])->select('chat_id')->asArray()->all();
				if (!empty($detail)) {
					//$externalContactId = WorkExternalContact::find()->Where("find_in_set ($this->id,chat_way_id)")->select('id')->asArray()->all();
					$externalContactId = array_column($externalContactId, "id");
					$chat_ids          = array_column($detail, "chat_id");
					$success_num       += WorkChatInfo::find()->alias("a")
						->leftJoin("{{%work_chat}} as b","a.chat_id = b.id")
						->where(["in", 'a.chat_id', $chat_ids])
						->andWhere(["in", 'a.external_id', $externalContactId])
						//->andWhere(['a.status' => 1, "a.join_scene" => 3, "a.type" => 2,"b.corp_id"=>$this->corp_id])
						->andWhere(["a.join_scene" => 3, "a.type" => 2,"b.corp_id"=>$this->corp_id])
						->count();
				}
			}

			$chatList = [];
			if ($this->type == 1) {
				$list = WorkChatWayList::find()->alias('w');
				$list = $list->leftJoin('{{%work_chat}} s', '`w`.`chat_id` = `s`.`id`');
				$list = $list->where(['w.way_id' => $this->id, 's.corp_id' => $this->corp_id, 'w.is_del' => 0])->select('s.id as id,s.name as name,s.status as cstatus,w.id way_list_id,w.chat_status,w.status,w.limit,w.local_path,w.media_id')->asArray()->all();
				$orderList = [];
				foreach ($list as $k=>$v){
					if ($v['status'] == 1 && $v['chat_status'] == 1){
						$orderList[] = $v;
						unset($list[$k]);
					}
				}
				foreach ($list as $k=>$v){
					if ($v['status'] == 1 && $v['chat_status'] == 0){
						$orderList[] = $v;
						unset($list[$k]);
					}
				}
				foreach ($list as $k=>$v){
					if ($v['status'] == 1 && $v['chat_status'] == 2){
						$orderList[] = $v;
						unset($list[$k]);
					}
				}
				foreach ($list as $k=>$v){
					if ($v['status'] == 0){
						$orderList[] = $v;
					}
				}
				if (!empty($orderList)) {
					foreach ($orderList as $k => $v) {
						$count = WorkChatInfo::find()->where(['chat_id' => $v['id'], 'status' => 1])->count();
						if ($v['status'] == 0) {
							$v['chat_status'] = 3;
						}
						$chatList[$k]['way_list_id'] = $v['way_list_id'];
						$chatList[$k]['name']        = WorkChat::getChatName($v['id']);
						$chatList[$k]['member_num']  = $count;
						$chatList[$k]['chat_id']     = $v['id'];
						$chatList[$k]['chat_status'] = $v['chat_status'];
						$chatList[$k]['status']      = $v['status'];
						$chatList[$k]['limit']       = $v['limit'];
						$chatList[$k]['local_path']  = $v['local_path'];
						$chatList[$k]['media_id']    = $v['media_id'];
						$chatList[$k]['total']       = 200;
						$chatList[$k]['avatarData']  = WorkChat::getChatAvatar($v['id'], $v['cstatus']);

					}
				}
			} else {
				$list = WorkChatWayList::find()->alias('w');
				$list = $list->where(['w.way_id' => $this->id, 'w.is_del' => 0])->asArray()->all();
				$orderList = [];
				foreach ($list as $k=>$v){
					if ($v['status'] == 1 && $v['chat_status'] == 1){
						$orderList[] = $v;
						unset($list[$k]);
					}
				}
				foreach ($list as $k=>$v){
					if ($v['status'] == 1 && $v['chat_status'] == 0){
						$orderList[] = $v;
						unset($list[$k]);
					}
				}
				foreach ($list as $k=>$v){
					if ($v['status'] == 1 && $v['chat_status'] == 2){
						$orderList[] = $v;
						unset($list[$k]);
					}
				}
				foreach ($list as $k=>$v){
					if ($v['status'] == 0){
						$orderList[] = $v;
					}
				}
				if (!empty($orderList)) {
					foreach ($orderList as $k => $v) {
						$count = WorkExternalContactUserWayDetail::find()->where(['way_id' => $this->id, 'way_list_id' => $v['id']])->count();
						if ($v['status'] == 0) {
							$v['chat_status'] = 3;
						}
						$chatList[$k]['way_list_id'] = $v['id'];
						$chatList[$k]['name']        = $v['chat_way_name'];
						$chatList[$k]['member_num']  = $count;
						$chatList[$k]['chat_status'] = $v['chat_status'];
						$chatList[$k]['status']      = $v['status'];
						$chatList[$k]['limit']       = $v['limit'];
						$chatList[$k]['local_path']  = $v['local_path'];
						$chatList[$k]['media_id']    = $v['media_id'];
					}
				}
			}

			//$addNum            = WorkExternalContact::find()->Where("find_in_set ($this->id,chat_way_id)")->count();
			$addNum            = count($externalContactId);
			/*$addNum = WorkExternalContactFollowUser::find()
				->Where(['chat_way_id' => $this->id])
				->asArray()
				->count();*/
			if(!empty($userKeyArr)){
				WorkDepartment::ActivityDataFormat($userKeyArr,$this->corp_id,[]);
			}


			$result            = [
				'key'          => $this->id,
				'id'           => strval($this->id),
				'corp_id'      => $this->corp_id,
				'title'        => $this->title,
				'way_group_id' => strval($this->way_group_id),
				'type'         => $this->type,
				'skip_verify'  => $this->skip_verify,
				'state'        => $this->state,
				'qr_code'      => $this->qr_code,
				'create_time'  => date("Y-m-d H:i", strtotime($this->create_time)),
				'tag_ids'      => $tagIds,
				'tag_name'     => $tagName,
				'local_path'   => $this->local_path,
				'text_content' => $this->content,
				'user_key'     => $userKeyArr,
				'chat_list'    => $chatList,
				'add_num'      => $addNum,
				'success_num'  => $success_num,
			];

//			$tmp = \Yii::$app->db->createCommand("SELECT table_name,create_time FROM information_schema.TABLES where table_name ='{{%work_external_contact_user_way_detail}}'")->queryOne();
//			$result['detail_status'] = 0;
//			if(!empty($tmp)){
//				$result['detail_status'] = (strtotime($this->create_time)>strtotime($tmp['create_time']))?1:0;
//			}

			return $result;

		}

		/**
		 * @param $corpId
		 * @param $configId
		 *
		 * @return array|mixed
		 *
		 * @throws InvalidDataException
		 * @throws \ParameterError
		 * @throws \QyApiError
		 * @throws \yii\base\InvalidConfigException
		 */
		public static function getWay ($corpId, $configId)
		{
			$authCorp = WorkCorp::findOne($corpId);

			if (empty($authCorp)) {
				throw new InvalidDataException('参数不正确。');
			}

			$workApi = WorkUtils::getWorkApi($corpId, WorkUtils::EXTERNAL_API);
			$info    = [];
			if (!empty($workApi)) {
				$wayInfo = $workApi->ECGetContactWay($configId);
				$wayInfo = SUtils::Object2Array($wayInfo);
				$info    = $wayInfo['contact_way'];
			}

			return $info;
		}

		/**
		 * @param $data
		 * @param $contactWayInfo
		 *
		 * @return bool
		 *
		 * @throws InvalidDataException
		 * @throws \ParameterError
		 * @throws \QyApiError
		 * @throws \yii\base\InvalidConfigException
		 */
		public static function add ($data, $contactWayInfo)
		{
			$transaction = Yii::$app->db->beginTransaction();
			try {
				if (empty($data['id'])) {
					$workChatContactWay              = new WorkChatContactWay();
					$workChatContactWay->create_time = DateUtil::getCurrentTime();
					$contactWay                      = static::addWay($contactWayInfo, $data['corp_id']);
					$workChatContactWay->config_id   = $contactWay['config_id'];
					$workChatContactWay->qr_code     = $contactWay['qr_code'];
					$contactWayInfo                  = static::getWay($data['corp_id'], $workChatContactWay->config_id);
					if (!empty($contactWayInfo['qr_code'])) {
						$imageData = Material::getImage($contactWayInfo['qr_code'], 'qrcode/' . $data['uid'] . '/wxwork');
						if (!empty($imageData['local_path'])) {
							$workChatContactWay->local_path = $imageData['local_path'];
						}
					}
				} else {
					$workChatContactWay = WorkChatContactWay::findOne($data['id']);
					static::updateWay($contactWayInfo, $data['corp_id'], $workChatContactWay->config_id);
				}
				$workChatContactWay->corp_id      = $data['corp_id'];
				$workChatContactWay->way_group_id = $data['way_group_id'];
				$workChatContactWay->type         = $data['type'];
				$workChatContactWay->title        = $data['title'];
				$workChatContactWay->skip_verify  = (int) !$contactWayInfo['skip_verify'];
				$workChatContactWay->state        = $contactWayInfo['state'];
				$workChatContactWay->tag_ids      = trim(implode(',', $data['tag_ids']), ',');
				$workChatContactWay->user_key     = json_encode($data['user_key']);
				$workChatContactWay->user         = json_encode($data['user']);
				$workChatContactWay->content      = $data['text_content'];
				if (!$workChatContactWay->validate() || !$workChatContactWay->save()) {
					throw new InvalidDataException("创建失败" . SUtils::modelError($workChatContactWay));
				}
				if (!empty($data['chat_list'])) {
					//WorkChatWayList::deleteAll(['way_id' => $workChatContactWay->id]);
					WorkChatWayList::updateAll(['is_del' => 1], ['way_id' => $workChatContactWay->id]);
					$flag = false;
					foreach ($data['chat_list'] as $key => $list) {
						if ($data['type'] == 1) {
							//群二维码
							$chat = WorkChatWayList::findOne(['way_id' => $workChatContactWay->id, 'chat_id' => $list['chat_id']]);
							if (empty($chat)) {
								$chat              = new WorkChatWayList();
								$chat->create_time = DateUtil::getCurrentTime();
								$chat->way_id      = $workChatContactWay->id;
								$chat->chat_id     = $list['chat_id'];
							}
							$chat_status = 0;
							$count       = WorkChatInfo::find()->where(['chat_id' => $list['chat_id'], 'status' => 1])->count();
							if ($list['limit'] <= $count) {
								$chat_status = 2;
							}
							if ($chat_status != 2 && !$flag) {
								$chat_status = 1;
								$flag        = true;
							}
							$chat->chat_status = $chat_status;
						} else {
							//企微活码
							$chat = [];
							if (isset($list['way_list_id']) && $list['way_list_id']) {
								$chat = WorkChatWayList::findOne(['way_id' => $workChatContactWay->id, 'id' => $list['way_list_id']]);
							}
							$chat_status = $key == 0 ? 1 : 0;
							if (!empty($chat)) {
								$count = WorkExternalContactUserWayDetail::find()->where(['way_id' => $workChatContactWay->id, 'way_list_id' => $list['way_list_id']])->count();
								if ($list['limit'] <= $count) {
									$chat_status = 2;
								}
								if ($chat_status != 2 && !$flag) {
									$chat_status = 1;
									$flag        = true;
								}
							}
							if (empty($chat)) {
								$chat              = new WorkChatWayList();
								$chat->create_time = DateUtil::getCurrentTime();
								$chat->way_id      = $workChatContactWay->id;
							}
							$chat->chat_status   = $chat_status;
							$chat->chat_way_name = $list['chat_way_name'];
						}

						$chat->limit      = !empty($list['limit']) ? $list['limit'] : 0;
						$chat->media_id   = $list['media_id'];
						$chat->local_path = $list['local_path'];
						$chat->status     = $list['status'];
						$chat->sort       = $key;
						$chat->is_del     = 0;

						if (!$chat->validate() || !$chat->save()) {
							throw new InvalidDataException("设置失败" . SUtils::modelError($chat));
						}
					}
				}
				$transaction->commit();

				return true;
			} catch (\Exception $e) {
				$transaction->rollBack();
				\Yii::error($e->getMessage(), 'message_chat');
				throw new InvalidDataException("创建失败：" . $e->getMessage());
			}

		}

		/**
		 * @param $contactWayInfo
		 * @param $corpId
		 *
		 * @return array
		 *
		 * @throws InvalidDataException
		 * @throws \ParameterError
		 * @throws \QyApiError
		 * @throws \yii\base\InvalidConfigException
		 */
		public static function addWay ($contactWayInfo, $corpId)
		{
			$workApi = WorkUtils::getWorkApi($corpId, WorkUtils::EXTERNAL_API);
			try {
				if (!empty($workApi)) {
					$sendData  = ExternalContactWay::parseFromArray($contactWayInfo);
					$wayResult = $workApi->ECAddContactWay($sendData);
					\Yii::error($wayResult, 'chatway-1');
					if ($wayResult['errcode'] != 0) {
						throw new InvalidDataException($wayResult['errmsg']);
					}
					$wayInfo        = $workApi->ECGetContactWay($wayResult['config_id']);
					$wayInfo        = SUtils::Object2Array($wayInfo);
					$contactWayInfo = $wayInfo['contact_way'];

					return ['config_id' => $contactWayInfo['config_id'], 'qr_code' => $contactWayInfo['qr_code']];
				}
			} catch (\Exception $e) {
				$message = $e->getMessage();
				if (strpos($message, '84074') !== false) {
					$message = '没有外部联系人权限';
				}
				if (strpos($message, '41054') !== false) {
					$message = '引流成员必须是已激活的成员（已登录过APP的才算作完全激活）';
				}
				if (strpos($message, '40096') !== false) {
					$message = '不合法的外部联系人userid';
				} elseif (strpos($message, '40098') !== false) {
					$message = '接替成员尚未实名认证';
				} elseif (strpos($message, '40100') !== false) {
					$message = '用户的外部联系人已经在转移流程中';
				}

				throw new InvalidDataException($message);
			}

			return [];
		}

		/**
		 * @param $contactWayInfo
		 * @param $corpId
		 * @param $config_id
		 *
		 * @return bool
		 *
		 * @throws InvalidDataException
		 * @throws \ParameterError
		 * @throws \QyApiError
		 * @throws \yii\base\InvalidConfigException
		 */
		public static function updateWay ($contactWayInfo, $corpId, $config_id)
		{
			\Yii::error($contactWayInfo, '$contactWayInfo');
			$workApi = WorkUtils::getWorkApi($corpId, WorkUtils::EXTERNAL_API);
			try {
				if (!empty($workApi)) {
					$contactWayInfo['config_id'] = $config_id;
					$sendData                    = ExternalContactWay::parseFromArray($contactWayInfo);
					$wayResult                   = $workApi->ECUpdateContactWay($sendData);

					return true;
				}
			} catch (\Exception $e) {
				$message = $e->getMessage();
				if (strpos($message, '84074') !== false) {
					$message = '没有外部联系人权限';
				}
				if (strpos($message, '41054') !== false) {
					$message = '引流成员必须是已激活的成员（已登录过APP的才算作完全激活）';
				}
				if (strpos($message, '40096') !== false) {
					$message = '不合法的外部联系人userid';
				} elseif (strpos($message, '40098') !== false) {
					$message = '接替成员尚未实名认证';
				} elseif (strpos($message, '40100') !== false) {
					$message = '用户的外部联系人已经在转移流程中';
				}

				throw new InvalidDataException($message);
			}
		}

	}
