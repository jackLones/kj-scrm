<?php
	/**
	 * Create by PhpStorm
	 * User: dovechen
	 * Date: 2020/1/1
	 * Time: 12:56
	 */

	namespace app\controllers;

	use app\controllers\common\BaseController;
	use app\models\WorkCorp;
	use app\models\WorkCorpAgent;
	use app\models\WorkCorpAuth;
	use app\models\WorkDepartment;
	use app\models\WorkSuiteConfig;
	use app\models\WorkTag;
	use app\models\WorkUser;
	use app\queue\WorkCorpJob;
	use app\queue\WorkDepartmentJob;
	use app\queue\WorkExternalContactJob;
	use app\queue\WorkTagJob;
	use app\queue\WorkUserJob;
	use app\util\DateUtil;
	use app\util\WorkConstUtil;
	use app\util\WorkUtils;
	use dovechen\yii2\weWork\components\MessageCrypt;

	class WorkReceiveController extends BaseController
	{
		/**
		 * @param \yii\base\Action $action
		 *
		 * @return bool
		 *
		 * @throws \yii\web\BadRequestHttpException
		 */
		public function beforeAction ($action)
		{
			defined('YII_BEGIN_NORMAL_TIME') or define('YII_BEGIN_NORMAL_TIME', time());

			$this->enableCsrfValidation = false;

			return parent::beforeAction($action); // TODO: Change the autogenerated stub
		}

		/**
		 * @throws \Throwable
		 * @throws \yii\db\StaleObjectException
		 */
		public function actionIndex ($id)
		{
			$sReplayEchoStr = '';
			$postData       = '';
			$workSuiteData  = WorkSuiteConfig::findOne($id);

			if (\Yii::$app->request->isGet) {
				if (!empty($_GET['echostr'])) {
					// 对返回的第三方平台安全TICKET进行解密
					$messageCrypt = new MessageCrypt($workSuiteData->token, $workSuiteData->encode_aes_key, $workSuiteData->provider->provider_corpid);

					$decryptCode = $messageCrypt->VerifyURL($_GET['msg_signature'], $_GET['timestamp'], $_GET['nonce'], $_GET['echostr'], $sReplayEchoStr);

					if ($decryptCode == 0) {
						echo $sReplayEchoStr;
					}
				}
			} elseif (\Yii::$app->request->isPost) {
				// 对返回的第三方平台安全TICKET进行解密
				$messageCrypt = new MessageCrypt($workSuiteData->token, $workSuiteData->encode_aes_key, $workSuiteData->suite_id);

				$encryptMsg = file_get_contents("php://input");

				if (!empty($encryptMsg)) {
					$decryptCode = $messageCrypt->DecryptMsg($_GET['msg_signature'], $_GET['timestamp'], $_GET['nonce'], $encryptMsg, $postData);

					/*
					 * 解密失败返回错误代码
					 *
					 * 解密成功返回示例
					 *
					 * 推送suite_ticket
					 *
					 * <xml>
					 * 	<SuiteId><![CDATA[ww4asffe99e54c0f4c]]></SuiteId>
					 * 	<InfoType> <![CDATA[suite_ticket]]></InfoType>
					 * 	<TimeStamp>1403610513</TimeStamp>
					 * 	<SuiteTicket><![CDATA[asdfasfdasdfasdf]]></SuiteTicket>
					 * </xml>
					 *
					 * 授权成功通知
					 *
					 * <xml>
					 * 	<SuiteId><![CDATA[ww4asffe99e54c0f4c]]></ SuiteId>
					 *  <AuthCode><![CDATA[AUTHCODE]]></AuthCode>
					 *  <InfoType><![CDATA[create_auth]]></InfoType>
					 *  <TimeStamp>1403610513</TimeStamp>
					 * </xml>
					 *
					 * 变更授权通知
					 *
					 * <xml>
					 * 	<SuiteId><![CDATA[ww4asffe99e54c0f4c]]></SuiteId>
					 * 	<InfoType><![CDATA[change_auth]]></InfoType>
					 * 	<TimeStamp>1403610513</TimeStamp>
					 * 	<AuthCorpId><![CDATA[wxf8b4f85f3a794e77]]></AuthCorpId>
					 * </xml>
					 *
					 * 取消授权通知
					 *
					 * <xml>
					 * 	<SuiteId><![CDATA[ww4asffe99e54c0f4c]]></ SuiteId>
					 * 	<InfoType><![CDATA[cancel_auth]]></InfoType>
					 * 	<TimeStamp>1403610513</TimeStamp>
					 * 	<AuthCorpId><![CDATA[wxf8b4f85f3a794e77]]></AuthCorpId>
					 * </xml>
					 */
					if ($decryptCode == 0) {
						$msg = $postData;
						$xml = new \DOMDocument();
						$xml->loadXML($msg);

						// 判断是否为第三方平台安全TICKET
						$infoTypeItem = $xml->getElementsByTagName("InfoType");
						$infoType     = $infoTypeItem->item(0)->nodeValue;

						switch ($infoType) {
							// 推送suite_ticket
							case WorkConstUtil::SUITE_TICKET:
								$suiteTicketItem = $xml->getElementsByTagName("SuiteTicket");
								$suiteTicket     = $suiteTicketItem->item(0)->nodeValue;

								$workSuiteData->suite_ticket = $suiteTicket;
								$workSuiteData->update_time  = DateUtil::getCurrentTime();
								if ($workSuiteData->update()) {
									echo "success";
								} else {
									echo "failed";
								}

								break;
							case WorkCorpAuth::CREATE_AUTH:
							case WorkCorpAuth::CHANGE_AUTH:
								$jobId = \Yii::$app->p2->push(new WorkCorpJob([
									'xml' => $msg,
								]));

								echo "success";

								break;
							case WorkCorpAuth::CANCEL_AUTH:
								$authCorpIdItem = $xml->getElementsByTagName("AuthCorpId");
								$authCorpId     = $authCorpIdItem->item(0)->nodeValue;

								$workCorp = WorkCorp::findOne(['corpid' => $authCorpId]);
								if (!empty($workCorp)) {
									$workCorpAuth = WorkCorpAuth::findOne(['suite_id' => $workSuiteData->id, 'corp_id' => $workCorp->id]);
									if (!empty($workCorpAuth)) {
										$workCorpAuth->auth_type = WorkCorpAuth::CANCEL_AUTH;
										$workCorpAuth->update();

										WorkCorpAgent::updateAll(['is_del' => WorkCorpAgent::AGENT_IS_DEL], ['corp_id' => $workCorp->id, 'suite_id' => $workSuiteData->id]);

										echo "success";
									} else {
										echo "failed";
									}
								} else {
									echo "failed";
								}

								break;
							case WorkConstUtil::CHANGE_CONTACT:
								$changeTypeItem = $xml->getElementsByTagName("ChangeType");
								$changeType     = $changeTypeItem->item(0)->nodeValue;

								if (in_array($changeType, [WorkUser::CREATE_USER, WorkUser::UPDATE_USER, WorkUser::DELETE_USER])) {
									$jobId = \Yii::$app->p2->push(new WorkUserJob([
										'xml' => $msg,
									]));
								}

								if (in_array($changeType, [WorkDepartment::CREATE_PARTY, WorkDepartment::UPDATE_PARTY, WorkDepartment::DELETE_PARTY])) {
									$jobId = \Yii::$app->p2->push(new WorkDepartmentJob([
										'xml' => $msg,
									]));
								}

								if ($changeType == WorkTag::UPDATE_TAG) {
									$jobId = \Yii::$app->p2->push(new WorkTagJob([
										'xml' => $msg,
									]));
								}

								echo "success";

								break;
							case WorkConstUtil::CHANGE_EXTERNAL_CONTACT:
								$authCorpIdItem = $xml->getElementsByTagName("AuthCorpId");
								$authCorpId     = $authCorpIdItem->item(0)->nodeValue;
								if (in_array($authCorpId, \Yii::$app->params['check_server_corpid'])) {
									$jobId = \Yii::$app->p2->push(new WorkExternalContactJob([
										'xml' => $msg,
									]));
								}

								echo "success";

								break;
							default:
								echo "failed";

								break;
						}
					}
				}
			}
		}
	}